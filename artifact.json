{
  "metadata": {
    "name": "@itentialopensource/prebuilt-promotion",
    "version": "0.0.5",
    "description": "Push pre-built to a specified version control service",
    "license": "Apache-2.0",
    "repository": {
      "type": "gitlab",
      "hostname": "gitlab.com",
      "path": "itentialopensource/pre-built-automations"
    },
    "keywords": [
      "Itential",
      "IAP",
      "artifacts"
    ],
    "author": "Itential Automation Platform_1",
    "IAPDependencies": {
      "@itential/app-operations_manager": "",
      "@itential/app-json_forms": "",
      "@itential/app-jst": "",
      "@itential/app-workflow_engine": "",
      "@itential/app-template_builder": "",
      "version-control-adapters": ""
    }
  },
  "manifest": {
    "bundleName": "@itentialopensource/prebuilt-promotion",
    "fingerprint": "67aa2cae547e674ddd59e339",
    "createdEpoch": "1739205806642",
    "artifacts": [
      {
        "id": "Prebuilt Promotion",
        "name": "Prebuilt Promotion",
        "type": "automation",
        "location": "/bundles/automations/Prebuilt Promotion.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "Prebuilt Promotion",
        "name": "Prebuilt Promotion",
        "type": "workflow",
        "location": "/bundles/workflows/Prebuilt Promotion.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "Prebuilt Promotion Re-Discover",
        "name": "Prebuilt Promotion Re-Discover",
        "type": "workflow",
        "location": "/bundles/workflows/Prebuilt Promotion Re-Discover.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "Prebuilt Promotion Gitlab Create Link",
        "name": "Prebuilt Promotion Gitlab Create Link",
        "type": "workflow",
        "location": "/bundles/workflows/Prebuilt Promotion Gitlab Create Link.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "Prebuilt Promotion Bitbucket Create Link",
        "name": "Prebuilt Promotion Bitbucket Create Link",
        "type": "workflow",
        "location": "/bundles/workflows/Prebuilt Promotion Bitbucket Create Link.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "Prebuilt Promotion Github Create Link",
        "name": "Prebuilt Promotion Github Create Link",
        "type": "workflow",
        "location": "/bundles/workflows/Prebuilt Promotion Github Create Link.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "Prebuilt Promotion Gitlab Add Files",
        "name": "Prebuilt Promotion Gitlab Add Files",
        "type": "workflow",
        "location": "/bundles/workflows/Prebuilt Promotion Gitlab Add Files.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "Prebuilt Promotion Github Add Files",
        "name": "Prebuilt Promotion Github Add Files",
        "type": "workflow",
        "location": "/bundles/workflows/Prebuilt Promotion Github Add Files.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "Push Bundles to GitHub Commit Data",
        "name": "Push Bundles to GitHub Commit Data",
        "type": "workflow",
        "location": "/bundles/workflows/Push Bundles to GitHub Commit Data.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "Prebuilt Promotion Github Create Branch",
        "name": "Prebuilt Promotion Github Create Branch",
        "type": "workflow",
        "location": "/bundles/workflows/Prebuilt Promotion Github Create Branch.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "Prebuilt Promotion Bitbucket Add Files",
        "name": "Prebuilt Promotion Bitbucket Add Files",
        "type": "workflow",
        "location": "/bundles/workflows/Prebuilt Promotion Bitbucket Add Files.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "Prebuilt Promotion Github Check OrgRepo",
        "name": "Prebuilt Promotion Github Check OrgRepo",
        "type": "workflow",
        "location": "/bundles/workflows/Prebuilt Promotion Github Check OrgRepo.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "Prebuilt Promotion Github New Commit",
        "name": "Prebuilt Promotion Github New Commit",
        "type": "workflow",
        "location": "/bundles/workflows/Prebuilt Promotion Github New Commit.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "Prebuilt Promotion Form",
        "name": "Prebuilt Promotion Form",
        "type": "json-forms",
        "location": "/bundles/json_forms/Prebuilt Promotion Form.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "Re-Discovery Components Form",
        "name": "Re-Discovery Components Form",
        "type": "json-forms",
        "location": "/bundles/json_forms/Re-Discovery Components Form.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "BitbucketFilesToAddAndDelete",
        "name": "BitbucketFilesToAddAndDelete",
        "type": "template",
        "location": "/bundles/templates/BitbucketFilesToAddAndDelete.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "605a0b9299ae1b00eb7c74e9",
        "name": "convertObjecttoString",
        "type": "transformation",
        "location": "/bundles/transformations/convertObjecttoString.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "6287f3480f8090010e7a4b89",
        "name": "filterArtifactArrayToOnlyCreateFiles",
        "type": "transformation",
        "location": "/bundles/transformations/filterArtifactArrayToOnlyCreateFiles.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "605d2b11d1976e009291a74d",
        "name": "updatePackageGitHubJSON",
        "type": "transformation",
        "location": "/bundles/transformations/updatePackageGitHubJSON.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "605b86f821c795008dc26118",
        "name": "mergeFormWithDiscovery",
        "type": "transformation",
        "location": "/bundles/transformations/mergeFormWithDiscovery.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "6075bcc58c016f0098c72846",
        "name": "filterActionsGitlab",
        "type": "transformation",
        "location": "/bundles/transformations/filterActionsGitlab.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "621d36785da44100e455a1d3",
        "name": "createAndUpdateArraysPP",
        "type": "transformation",
        "location": "/bundles/transformations/createAndUpdateArraysPP.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "621d05685da44100e455a1d1",
        "name": "getFileObjectsPP",
        "type": "transformation",
        "location": "/bundles/transformations/getFileObjectsPP.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "622f933c53c0030101260b09",
        "name": "projectExistsGitlab",
        "type": "transformation",
        "location": "/bundles/transformations/projectExistsGitlab.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "621fd789da0c6c470881bdab",
        "name": "generateCommitActions",
        "type": "transformation",
        "location": "/bundles/transformations/generateCommitActions.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "6075bc6c8c016f0098c7283f",
        "name": "updatePackageJSONGitlab",
        "type": "transformation",
        "location": "/bundles/transformations/updatePackageJSONGitlab.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "6075d13d8c016f0098c7284f",
        "name": "getUriForFilesGitlab",
        "type": "transformation",
        "location": "/bundles/transformations/getUriForFilesGitlab.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "6075d1cf8c016f0098c72852",
        "name": "actionCreateGitlab",
        "type": "transformation",
        "location": "/bundles/transformations/actionCreateGitlab.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "623231be3230da01016b79de",
        "name": "convertFormDataPP",
        "type": "transformation",
        "location": "/bundles/transformations/convertFormDataPP.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "6075d09d8c016f0098c7284e",
        "name": "getPackageJsonGitlab",
        "type": "transformation",
        "location": "/bundles/transformations/getPackageJsonGitlab.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "64356046770ce80183cec91d",
        "name": "getRepoURLGitlab",
        "type": "transformation",
        "location": "/bundles/transformations/getRepoURLGitlab.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "6075cfe68c016f0098c7284d",
        "name": "getUriGitlab",
        "type": "transformation",
        "location": "/bundles/transformations/getUriGitlab.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "6075cef28c016f0098c7284c",
        "name": "getArtifactPathGitlab",
        "type": "transformation",
        "location": "/bundles/transformations/getArtifactPathGitlab.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "621002baa161ae00ef6164b5",
        "name": "translateSchemaPushBundles",
        "type": "transformation",
        "location": "/bundles/transformations/translateSchemaPushBundles.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "6075d19a8c016f0098c72851",
        "name": "createDeleteCommitGitlab",
        "type": "transformation",
        "location": "/bundles/transformations/createDeleteCommitGitlab.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "5f7caed7a6f94b2e4b558b71",
        "name": "convertFormOutputToDiscoveryFormat",
        "type": "transformation",
        "location": "/bundles/transformations/convertFormOutputToDiscoveryFormat.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "6210015da161ae00ef6164b4",
        "name": "convertArtifactInfoToForm",
        "type": "transformation",
        "location": "/bundles/transformations/convertArtifactInfoToForm.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "60647088fa6304009929d8d6",
        "name": "filterArrayOfObjectsGitLab",
        "type": "transformation",
        "location": "/bundles/transformations/filterArrayOfObjectsGitLab.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "6075bda98c016f0098c72849",
        "name": "getMetadataAndComponentsGitlab",
        "type": "transformation",
        "location": "/bundles/transformations/getMetadataAndComponentsGitlab.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "620ea276e3638a010009b10e",
        "name": "componentsObject",
        "type": "transformation",
        "location": "/bundles/transformations/componentsObject.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "6227a41704a9540111aef712",
        "name": "Prebuilt Promotion Version Control Instance Filter",
        "type": "transformation",
        "location": "/bundles/transformations/Prebuilt Promotion Version Control Instance Filter.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "6234aa0b329ee901170bd820",
        "name": "buildGETAdapterByNameURI",
        "type": "transformation",
        "location": "/bundles/transformations/buildGETAdapterByNameURI.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "62322beada0c6c470881bdaf",
        "name": "setRepositoryInPackageJson",
        "type": "transformation",
        "location": "/bundles/transformations/setRepositoryInPackageJson.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "6075d17e8c016f0098c72850",
        "name": "filterBodyGitlab",
        "type": "transformation",
        "location": "/bundles/transformations/filterBodyGitlab.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "63effc7c2680b700eb4eeefa",
        "name": "createNewProjectRequest",
        "type": "transformation",
        "location": "/bundles/transformations/createNewProjectRequest.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "605b870f21c795008dc26119",
        "name": "createArtifactForPublish",
        "type": "transformation",
        "location": "/bundles/transformations/createArtifactForPublish.json",
        "properties": {
          "entryPoint": false
        }
      }
    ]
  },
  "bundles": [
    {
      "type": "automation",
      "data": {
        "_id": "63603386158e87012ccf106f",
        "name": "Prebuilt Promotion",
        "description": "",
        "componentName": "Prebuilt Promotion",
        "componentType": "workflows",
        "gbac": {
          "write": [],
          "read": []
        },
        "created": "2022-10-31T20:43:50.782Z",
        "createdBy": "admin@pronghorn",
        "lastUpdated": "2025-02-06T18:32:45.883Z",
        "lastUpdatedBy": "admin@pronghorn",
        "triggers": [
          {
            "_id": "67a5004fa66b413d7f038cc7",
            "created": "2022-10-31T20:43:50.925Z",
            "createdBy": "admin@pronghorn",
            "lastUpdated": "2025-02-10T16:40:22.301Z",
            "lastUpdatedBy": "admin@pronghorn",
            "name": "Start Prebuilt Promotion with Form",
            "type": "manual",
            "enabled": true,
            "actionType": "automations",
            "actionId": "63603386158e87012ccf106f",
            "formId": "Prebuilt Promotion Form",
            "formData": {
              "checkInPrebuilt": {
                "makeProjectPrivateGithubOnly": false,
                "addRepositoryDependencyFiles": true,
                "reDiscoverPrebuilt": false,
                "forExistingProjects": {
                  "mrType": "major",
                  "targetBranch": "main",
                  "commitMessage": "test-9"
                },
                "versionControlService": "github",
                "projectName": "isd-testing-2",
                "groupPath": "itential-logan",
                "prebuilt": "@itentialopensource/prebuilt-promotion"
              }
            },
            "formSchemaHash": "aa637c2e577de554136f51a8bf2bb312a624de5928544dfdf13a3d0d34412ba6",
            "description": "",
            "legacyWrapper": true,
            "migrationVersion": 3
          }
        ]
      }
    },
    {
      "type": "workflow",
      "data": {
        "created": "2022-03-08T14:35:35.606Z",
        "createdVersion": "5.40.5-2021.1.52.0",
        "created_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {}
        },
        "description": null,
        "font_size": 12,
        "inputSchema": {
          "type": "object",
          "properties": {
            "formData": {
              "type": "object",
              "properties": {
                "checkInPrebuilt": {
                  "type": "object",
                  "properties": {
                    "reDiscoverPrebuilt": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "addRepositoryDependencyFiles": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "makeProjectPrivateGithubOnly": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "forExistingProjects": {
                      "type": "object",
                      "properties": {
                        "mrType": {
                          "type": "string",
                          "examples": [
                            "patch"
                          ]
                        },
                        "commitMessage": {
                          "type": "string",
                          "examples": [
                            "init"
                          ]
                        },
                        "targetBranch": {
                          "type": "string",
                          "examples": [
                            "master"
                          ]
                        }
                      },
                      "required": []
                    },
                    "versionControlService": {
                      "type": "string",
                      "examples": [
                        "gitlab"
                      ]
                    },
                    "projectName": {
                      "type": "string",
                      "examples": [
                        "test"
                      ]
                    },
                    "groupPath": {
                      "type": "string",
                      "examples": [
                        "ACME/engineering"
                      ]
                    },
                    "prebuilt": {
                      "type": "string",
                      "examples": [
                        "@dsup/testprebuilt"
                      ]
                    }
                  },
                  "required": []
                }
              },
              "required": []
            }
          },
          "required": [
            "formData"
          ]
        },
        "lastUpdatedVersion": "4.69.3-2023.2.129",
        "last_updated": "2025-02-06T18:32:42.351Z",
        "last_updated_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {}
        },
        "name": "Prebuilt Promotion",
        "outputSchema": {
          "type": "object",
          "properties": {
            "formData": {
              "type": "object",
              "properties": {
                "checkInPrebuilt": {
                  "type": "object",
                  "properties": {
                    "reDiscoverPrebuilt": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "addRepositoryDependencyFiles": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "makeProjectPrivateGithubOnly": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "forExistingProjects": {
                      "type": "object",
                      "properties": {
                        "mrType": {
                          "type": "string",
                          "examples": [
                            "patch"
                          ]
                        },
                        "commitMessage": {
                          "type": "string",
                          "examples": [
                            "init"
                          ]
                        },
                        "targetBranch": {
                          "type": "string",
                          "examples": [
                            "master"
                          ]
                        }
                      },
                      "required": []
                    },
                    "versionControlService": {
                      "type": "string",
                      "examples": [
                        "gitlab"
                      ]
                    },
                    "projectName": {
                      "type": "string",
                      "examples": [
                        "test"
                      ]
                    },
                    "groupPath": {
                      "type": "string",
                      "examples": [
                        "ACME/engineering"
                      ]
                    },
                    "prebuilt": {
                      "type": "string",
                      "examples": [
                        "@dsup/testprebuilt"
                      ]
                    }
                  },
                  "required": []
                }
              },
              "required": []
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            },
            "healthcheck": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "package_id": {
                    "type": "string"
                  },
                  "version": {
                    "type": "string"
                  }
                }
              }
            },
            "packageJson": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "author": {
                  "type": "string"
                },
                "version": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "scripts": {
                  "type": "object",
                  "properties": {
                    "test": {
                      "type": "string"
                    },
                    "deploy": {
                      "type": "string"
                    },
                    "validateSchema": {
                      "type": "string"
                    },
                    "validateSchemaLinks": {
                      "type": "string"
                    },
                    "generateImageLinks": {
                      "type": "string"
                    }
                  }
                },
                "repository": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "hostname": {
                      "type": "string"
                    },
                    "path": {
                      "type": "string"
                    }
                  }
                },
                "keywords": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "license": {
                  "type": "string"
                },
                "devDependencies": {
                  "type": "object",
                  "properties": {
                    "ajv": {
                      "type": "string"
                    },
                    "better-ajv-errors": {
                      "type": "string"
                    },
                    "fs-extra": {
                      "type": "string"
                    },
                    "r2": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "artifactIdArr": {
              "title": "return_data",
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "object"
                },
                {
                  "type": "array"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "examples": [
                "value"
              ]
            }
          }
        },
        "preAutomationTime": 0,
        "sla": 0,
        "tasks": {
          "430": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "buildGETAdapterByNameURI",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "6234aa0b329ee901170bd820",
                "variableMap": {
                  "adapterName": "$var.e587.ServiceType"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "getAdapterByNameURI": null
              }
            },
            "deprecated": false,
            "groups": [],
            "task_name": "buildGETAdapterByNameURI",
            "retrySettings": null,
            "nodeLocation": {
              "x": -6000,
              "y": 700
            }
          },
          "3627": {
            "name": "stringConcat",
            "canvasName": "concat",
            "summary": "Build MR Branch Name",
            "description": "Build MR Branch Name",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "String",
            "variables": {
              "incoming": {
                "str": "$var.e587.MRType",
                "stringN": "/"
              },
              "outgoing": {
                "combinedStrings": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": -2700,
              "y": 700
            }
          },
          "4020": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "healthcheck",
                "value": [
                  {
                    "package_id": "@itential/app-automation_catalog",
                    "version": ""
                  },
                  {
                    "package_id": "@itential/app-ag_manager",
                    "version": ""
                  },
                  {
                    "package_id": "@itential/app-admin_essentials",
                    "version": ""
                  },
                  {
                    "package_id": "@itential/app-golden_services",
                    "version": ""
                  },
                  {
                    "package_id": "@itential/app-form_builder",
                    "version": ""
                  },
                  {
                    "package_id": "@itential/app-artifacts",
                    "version": ""
                  },
                  {
                    "package_id": "@itential/app-automation_studio",
                    "version": ""
                  },
                  {
                    "package_id": "@itential/app-json_forms",
                    "version": ""
                  },
                  {
                    "package_id": "@itential/app-configuration_manager",
                    "version": ""
                  },
                  {
                    "package_id": "@itential/app-golden_config",
                    "version": ""
                  },
                  {
                    "package_id": "@itential/adapter-local_aaa",
                    "version": ""
                  },
                  {
                    "package_id": "@itential/app-mop",
                    "version": ""
                  },
                  {
                    "package_id": "@itential/app-nso_manager",
                    "version": ""
                  },
                  {
                    "package_id": "@itential/app-policy_manager",
                    "version": ""
                  },
                  {
                    "package_id": "@itential/app-service_management",
                    "version": ""
                  },
                  {
                    "package_id": "@itential/search",
                    "version": ""
                  },
                  {
                    "package_id": "@itential/app-service_catalog",
                    "version": ""
                  },
                  {
                    "package_id": "@itential/app-smart_template",
                    "version": ""
                  },
                  {
                    "package_id": "@itential/app-task_worker",
                    "version": ""
                  },
                  {
                    "package_id": "@itential/app-template_builder",
                    "version": ""
                  },
                  {
                    "package_id": "@itential/tags",
                    "version": ""
                  },
                  {
                    "package_id": "@itential/adapter-mongo",
                    "version": ""
                  },
                  {
                    "package_id": "@itential/adapter-redis",
                    "version": ""
                  },
                  {
                    "package_id": "@itential/app-workflow_engine",
                    "version": ""
                  },
                  {
                    "package_id": "@itential/app-workflow_builder",
                    "version": ""
                  }
                ]
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": -8100,
              "y": 700
            }
          },
          "5379": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "setRepositoryInPackageJson",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "62322beada0c6c470881bdaf",
                "variableMap": {
                  "originalPackageJson": "$var.job.packageJson",
                  "adapterType": "$var.e587.ServiceType",
                  "groupPath": "$var.e587.GroupPath",
                  "adapterProperties": "$var.d48d.responseBody"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "updatedPackageJson": null
              }
            },
            "deprecated": false,
            "groups": [],
            "task_name": "setRepositoryInPackageJson",
            "retrySettings": null,
            "nodeLocation": {
              "x": -4800,
              "y": 700
            }
          },
          "8200": {
            "name": "query",
            "canvasName": "query",
            "summary": "Extract Artifact ID",
            "description": "Extract Artifact ID",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "_id",
                "obj": "$var.e4d3.firstFilteredElement"
              },
              "outgoing": {
                "return_data": "$var.job.artifactIdArr"
              },
              "error": ""
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": -10500,
              "y": 600
            }
          },
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "summary": "workflow_start",
            "description": "workflow_start",
            "nodeLocation": {
              "x": -14700,
              "y": 600
            }
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "summary": "workflow_end",
            "description": "workflow_end",
            "nodeLocation": {
              "x": 300,
              "y": 700
            }
          },
          "aa4e": {
            "name": "gatherInternalGET",
            "canvasName": "gatherInternalGET",
            "summary": "Gather List of Installed Artifacts",
            "description": "Gather List of Installed Artifacts",
            "location": "Application",
            "app": "AppArtifacts",
            "displayName": "AppArtifacts",
            "type": "manual",
            "variables": {
              "incoming": {
                "internalURL": "/prebuilts?skip=0&limit=2000"
              },
              "outgoing": {
                "responseBody": null
              },
              "error": "",
              "decorators": []
            },
            "view": "/app_artifacts/views/tasks/gatherInternalGET",
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": -14100,
              "y": 600
            }
          },
          "5ed7": {
            "name": "stringConcat",
            "canvasName": "concat",
            "summary": "Make Artifact URI",
            "description": "Concatenates a string with a second string(s). The second parameter can be a string or array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "String",
            "variables": {
              "incoming": {
                "str": "/prebuilts/",
                "stringN": "$var.8200.return_data"
              },
              "outgoing": {
                "combinedStrings": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": -9900,
              "y": 700
            }
          },
          "4d16": {
            "name": "gatherInternalGET",
            "canvasName": "gatherInternalGET",
            "summary": "Gather Selected Artifact Info",
            "description": "Gather GET call",
            "location": "Application",
            "app": "AppArtifacts",
            "displayName": "AppArtifacts",
            "type": "manual",
            "variables": {
              "incoming": {
                "internalURL": "$var.5ed7.combinedStrings"
              },
              "outgoing": {
                "responseBody": null
              },
              "error": ""
            },
            "view": "/app_artifacts/views/tasks/gatherInternalGET",
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": -8700,
              "y": 700
            }
          },
          "4b23": {
            "name": "createPublishedArtifactFromScratch",
            "canvasName": "createPublishedArtifactFromScratch",
            "summary": "Creates artifact for publishing without DB calls",
            "description": "Creates JSON object containing artifact file structure and all associated data from input tasks without touching database",
            "location": "Application",
            "locationType": null,
            "app": "AppArtifacts",
            "type": "automatic",
            "displayName": "AppArtifacts",
            "variables": {
              "incoming": {
                "artifactData": "$var.5bc6.artifactDataFormatted",
                "modules": "$var.job.healthcheck",
                "packageJson": "$var.5379.updatedPackageJson"
              },
              "outgoing": {
                "callback": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": -3900,
              "y": 700
            }
          },
          "cbf5": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "componentsObject",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "620ea276e3638a010009b10e",
                "variableMap": {
                  "input": "$var.4d16.responseBody"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": false,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "output": null
              }
            },
            "deprecated": false,
            "groups": [],
            "task_name": "componentsObject",
            "retrySettings": null,
            "nodeLocation": {
              "x": -7500,
              "y": 700
            }
          },
          "5bc6": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "JSON Transformation",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "6075bda98c016f0098c72849",
                "variableMap": {
                  "artifactDataUnformatted": "$var.4d16.responseBody",
                  "componentObject": "$var.cbf5.output"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": false,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "artifactDataFormatted": null
              }
            },
            "deprecated": false,
            "groups": [],
            "task_name": "getMetadataAndComponentsGitlab",
            "nodeLocation": {
              "x": -7200,
              "y": 700
            }
          },
          "382d": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "packageJson",
                "value": {
                  "name": "",
                  "author": "Itential Automation Platform",
                  "version": "0.0.0",
                  "description": "Checked in new artifact",
                  "scripts": {
                    "test": "echo \"Error: no test specified\" && exit 1",
                    "deploy": "echo not needed npm publish --access=public --registry=http://registry.npmjs.org",
                    "validateSchema": "node test/manifestTester.js manifest.json manifest-schema.json",
                    "validateSchemaLinks": "node test/manifestLinkTester.js manifest.json",
                    "generateImageLinks": "node utils/generateImageLinks.js"
                  },
                  "repository": {
                    "type": "gitlab",
                    "hostname": "gitlab.com",
                    "path": "itentialopensource/pre-built-automations"
                  },
                  "keywords": [
                    "Itential",
                    "IAP",
                    "artifacts"
                  ],
                  "license": "Apache-2.0",
                  "devDependencies": {
                    "ajv": "^6.12.6",
                    "better-ajv-errors": "^1.2.0",
                    "fs-extra": "^7.0.1",
                    "r2": "^2.0.1"
                  }
                }
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": -6600,
              "y": 700
            }
          },
          "cec6": {
            "name": "getTime",
            "canvasName": "getTime",
            "summary": "Get time",
            "description": "Gets the current time with an optional offset, timezone shift, and format string",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Time",
            "variables": {
              "incoming": {
                "timezone": "-05:00",
                "offsetDuration": "",
                "format": "YYYY-MM-DDTHH-mm-ss"
              },
              "outgoing": {
                "time": null
              },
              "error": ""
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": -3300,
              "y": 700
            }
          },
          "6cd9": {
            "name": "stringConcat",
            "canvasName": "concat",
            "summary": "Build MR Branch Name",
            "description": "Build MR Branch Name",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "String",
            "variables": {
              "incoming": {
                "str": "$var.3627.combinedStrings",
                "stringN": "$var.3fc8.return_data"
              },
              "outgoing": {
                "combinedStrings": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": -2100,
              "y": 700
            }
          },
          "3fc8": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query time",
            "description": "Query time",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "time",
                "obj": "$var.cec6.time"
              },
              "outgoing": {
                "return_data": null
              },
              "error": ""
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": -3000,
              "y": 700
            }
          },
          "1f6a": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query packageJson name",
            "description": "Query packageJson name",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "name",
                "obj": "$var.4d16.responseBody"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": -1500,
              "y": 700
            }
          },
          "30d4": {
            "name": "gatherInternalGET",
            "canvasName": "gatherInternalGET",
            "summary": "Gather WhoAmI",
            "description": "Gather WhoAmI",
            "location": "Application",
            "app": "AppArtifacts",
            "displayName": "AppArtifacts",
            "type": "manual",
            "variables": {
              "incoming": {
                "internalURL": "/whoami"
              },
              "outgoing": {
                "responseBody": null
              },
              "error": "",
              "decorators": []
            },
            "view": "/app_artifacts/views/tasks/gatherInternalGET",
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": -12900,
              "y": 600
            }
          },
          "b1b8": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query username from WhoAmI",
            "description": "Query username from WhoAmI",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "username",
                "obj": "$var.30d4.responseBody"
              },
              "outgoing": {
                "return_data": "$var.job.artifactIdArr"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": -12600,
              "y": 600
            }
          },
          "5cd3": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Run Evaluation Task",
            "description": "Run an evaluation",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "rediscover",
                          "task": "e587"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": false,
                          "task": "static"
                        }
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": -9300,
              "y": 700
            }
          },
          "4a09": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "Run Child Job",
            "description": "Run a child job inside a workflow.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "Prebuilt Promotion Re-Discover",
                "variables": {
                  "internalURL": {
                    "variable": "",
                    "task": "5ed7",
                    "value": "combinedStrings"
                  }
                },
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "deprecated": false,
            "groups": [],
            "actor": "job",
            "nodeLocation": {
              "x": -9300,
              "y": 1100
            }
          },
          "e4d3": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "JSON Transformation",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "60647088fa6304009929d8d6",
                "variableMap": {
                  "filterableArray": "$var.27b2.return_data",
                  "keyToFilterOn": "name",
                  "valueToFind": "$var.e587.ArtifactName",
                  "discardMatching": false
                },
                "options": {
                  "extractOutput": false,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "filteredArray": null,
                "firstFilteredElement": null
              }
            },
            "deprecated": false,
            "groups": [],
            "task_name": "filterArrayOfObjectsGitLab",
            "retrySettings": null,
            "nodeLocation": {
              "x": -10800,
              "y": 600
            }
          },
          "27b2": {
            "name": "query",
            "canvasName": "query",
            "summary": "get Artifact Array",
            "description": "Get Artifact array from list of artifacts",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "results",
                "obj": "$var.aa4e.responseBody"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": -13500,
              "y": 600
            }
          },
          "e587": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "convertFormDataPP",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "623231be3230da01016b79de",
                "variableMap": {
                  "formData": "$var.job.formData",
                  "apps": "$var.e126.responseBody"
                },
                "options": {
                  "extractOutput": false,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "ArtifactName": null,
                "GroupPath": null,
                "RepositoryName": null,
                "MRType": null,
                "CommitMessage": null,
                "TargetBranch": null,
                "rediscover": null,
                "Adapter": null,
                "ServiceType": null,
                "ProjectPath": null,
                "privateRepo": null,
                "addRepositoryDependenyFiles": null
              },
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "task_name": "convertFormDataPP",
            "retrySettings": null,
            "nodeLocation": {
              "x": -11400,
              "y": 600
            }
          },
          "e126": {
            "name": "gatherInternalGET",
            "canvasName": "gatherInternalGET",
            "summary": "Gather Apps",
            "description": "Gather List of Installed Artifacts",
            "location": "Application",
            "app": "AppArtifacts",
            "displayName": "AppArtifacts",
            "type": "manual",
            "variables": {
              "incoming": {
                "internalURL": "/health/adapters"
              },
              "outgoing": {
                "responseBody": null
              },
              "error": "",
              "decorators": []
            },
            "view": "/app_artifacts/views/tasks/gatherInternalGET",
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": -12000,
              "y": 600
            }
          },
          "4c6a": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "isGitlab",
            "description": "isGitlab",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "ServiceType",
                          "task": "e587"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": "gitlab",
                          "task": "static"
                        }
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": -1200,
              "y": 700
            }
          },
          "500c": {
            "name": "ViewData",
            "canvasName": "ViewData",
            "summary": "View Data",
            "description": "Displays a message and runtime data to an operator. This can be used to request a decision, or used for acknowledgement only.",
            "location": "Application",
            "app": "WorkFlowEngine",
            "displayName": "Tools",
            "type": "manual",
            "variables": {
              "incoming": {
                "header": "Invalid Version Control Service",
                "message": "Make sure you selected a valid adapter and rerun this automation.",
                "body": "",
                "variables": {},
                "btn_success": "Ok",
                "btn_failure": ""
              },
              "outgoing": {},
              "error": "",
              "decorators": []
            },
            "view": "/workflow_engine/task/ViewData",
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": -600,
              "y": 0
            }
          },
          "d48d": {
            "name": "gatherInternalGET",
            "canvasName": "gatherInternalGET",
            "summary": "Get Adapter Properties",
            "description": "Gather GET call",
            "location": "Application",
            "app": "AppArtifacts",
            "displayName": "AppArtifacts",
            "type": "manual",
            "variables": {
              "incoming": {
                "internalURL": "$var.430.getAdapterByNameURI"
              },
              "outgoing": {
                "responseBody": null
              },
              "error": "",
              "decorators": []
            },
            "view": "/app_artifacts/views/tasks/gatherInternalGET",
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": -5400,
              "y": 800
            }
          },
          "6d70": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "isBitbucket",
            "description": "isBitbucket",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "ServiceType",
                          "task": "e587"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": "bitbucket",
                          "task": "static"
                        }
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": -900,
              "y": 500
            }
          },
          "4a63": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "Gitlab",
            "description": "Runs a child job inside a workflow.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "Prebuilt Promotion Gitlab Create Link",
                "variables": {
                  "repoName": {
                    "editable": true,
                    "task": "e587",
                    "value": "RepositoryName"
                  },
                  "targetBranch": {
                    "editable": true,
                    "task": "e587",
                    "value": "TargetBranch"
                  },
                  "adapter_id": {
                    "editable": true,
                    "task": "e587",
                    "value": "Adapter"
                  },
                  "commitMessage": {
                    "editable": true,
                    "task": "e587",
                    "value": "CommitMessage"
                  },
                  "mrBranchName": {
                    "editable": true,
                    "task": "6cd9",
                    "value": "combinedStrings"
                  },
                  "username": {
                    "editable": true,
                    "task": "b1b8",
                    "value": "return_data"
                  },
                  "url": {
                    "editable": true,
                    "task": "e587",
                    "value": "GroupPath"
                  },
                  "packageJsonName": {
                    "editable": true,
                    "task": "1f6a",
                    "value": "return_data"
                  },
                  "artifact": {
                    "editable": true,
                    "task": "4b23",
                    "value": "callback"
                  }
                },
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "deprecated": false,
            "groups": [],
            "actor": "job",
            "nodeLocation": {
              "x": -600,
              "y": 1000
            }
          },
          "f609": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "Bitbucket",
            "description": "Runs a child job inside a workflow.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "Prebuilt Promotion Bitbucket Create Link",
                "variables": {
                  "mrBranchName": {
                    "editable": true,
                    "task": "6cd9",
                    "value": "combinedStrings"
                  },
                  "commitMessage": {
                    "editable": true,
                    "task": "e587",
                    "value": "CommitMessage"
                  },
                  "url": {
                    "editable": true,
                    "task": "e587",
                    "value": "GroupPath"
                  },
                  "targetBranch": {
                    "editable": true,
                    "task": "e587",
                    "value": "TargetBranch"
                  },
                  "adapter_id": {
                    "editable": true,
                    "task": "e587",
                    "value": "Adapter"
                  },
                  "repoName": {
                    "editable": true,
                    "task": "e587",
                    "value": "RepositoryName"
                  },
                  "username": {
                    "editable": true,
                    "task": "b1b8",
                    "value": "return_data"
                  },
                  "artifact": {
                    "editable": true,
                    "task": "4b23",
                    "value": "callback"
                  },
                  "packageJsonName": {
                    "editable": true,
                    "task": "1f6a",
                    "value": "return_data"
                  },
                  "projectPath": {
                    "editable": true,
                    "task": "e587",
                    "value": "ProjectPath"
                  }
                },
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "deprecated": false,
            "groups": [],
            "actor": "job",
            "nodeLocation": {
              "x": -600,
              "y": 800
            }
          },
          "c65b": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "Github",
            "description": "Runs a child job inside a workflow.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "Prebuilt Promotion Github Create Link",
                "variables": {
                  "OrganizationName": {
                    "editable": true,
                    "task": "e587",
                    "value": "GroupPath"
                  },
                  "ProjectName": {
                    "editable": true,
                    "task": "e587",
                    "value": "RepositoryName"
                  },
                  "TargetBranch": {
                    "editable": true,
                    "task": "e587",
                    "value": "TargetBranch"
                  },
                  "adapter_id": {
                    "editable": true,
                    "task": "e587",
                    "value": "Adapter"
                  },
                  "MRType": {
                    "editable": true,
                    "task": "e587",
                    "value": "MRType"
                  },
                  "commitMessage": {
                    "editable": true,
                    "task": "e587",
                    "value": "CommitMessage"
                  },
                  "packageJsonName": {
                    "editable": true,
                    "task": "1f6a",
                    "value": "return_data"
                  },
                  "artifact": {
                    "editable": true,
                    "task": "4b23",
                    "value": "callback"
                  },
                  "privateRepo": {
                    "editable": true,
                    "task": "e587",
                    "value": "privateRepo"
                  },
                  "addRepositoryDependencyFiles": {
                    "task": "e587",
                    "value": "addRepositoryDependenyFiles"
                  }
                },
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "deprecated": false,
            "groups": [],
            "actor": "job",
            "nodeLocation": {
              "x": -300,
              "y": 500
            }
          },
          "341d": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "isGithub",
            "description": "isGithub",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "ServiceType",
                          "task": "e587"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": "github",
                          "task": "static"
                        }
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": -900,
              "y": 300
            }
          }
        },
        "transitions": {
          "430": {
            "d48d": {
              "type": "standard",
              "state": "success"
            }
          },
          "2938": {},
          "3627": {
            "6cd9": {
              "type": "standard",
              "state": "success"
            }
          },
          "4020": {
            "cbf5": {
              "type": "standard",
              "state": "success"
            }
          },
          "4326": {},
          "4778": {},
          "5379": {
            "4b23": {
              "type": "standard",
              "state": "success"
            }
          },
          "7847": {},
          "8200": {
            "5ed7": {
              "type": "standard",
              "state": "success"
            }
          },
          "8273": {},
          "9969": {},
          "workflow_start": {
            "aa4e": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "a671": {},
          "f186": {},
          "de5e": {},
          "6cad": {},
          "b3bd": {},
          "460c": {},
          "ebce": {},
          "69b0": {},
          "41f8": {},
          "62c8": {},
          "b784": {},
          "be39": {},
          "d402": {},
          "aa4e": {
            "27b2": {
              "type": "standard",
              "state": "success"
            }
          },
          "5ed7": {
            "5cd3": {
              "type": "standard",
              "state": "success"
            }
          },
          "606e": {},
          "f68d": {},
          "4d16": {
            "4020": {
              "type": "standard",
              "state": "success"
            }
          },
          "4b23": {
            "cec6": {
              "type": "standard",
              "state": "success"
            }
          },
          "cbf5": {
            "5bc6": {
              "type": "standard",
              "state": "success"
            }
          },
          "5bc6": {
            "382d": {
              "type": "standard",
              "state": "success"
            }
          },
          "382d": {
            "430": {
              "type": "standard",
              "state": "success"
            }
          },
          "cec6": {
            "3fc8": {
              "type": "standard",
              "state": "success"
            }
          },
          "6cd9": {
            "1f6a": {
              "type": "standard",
              "state": "success"
            }
          },
          "3fc8": {
            "3627": {
              "type": "standard",
              "state": "success"
            }
          },
          "204c": {},
          "d4f8": {},
          "1f6a": {
            "4c6a": {
              "type": "standard",
              "state": "success"
            }
          },
          "30d4": {
            "b1b8": {
              "type": "standard",
              "state": "success"
            }
          },
          "b1b8": {
            "e126": {
              "type": "standard",
              "state": "success"
            }
          },
          "5cd3": {
            "4a09": {
              "type": "standard",
              "state": "failure"
            },
            "4d16": {
              "type": "standard",
              "state": "success"
            }
          },
          "4a09": {
            "4d16": {
              "type": "standard",
              "state": "success"
            }
          },
          "e4d3": {
            "8200": {
              "type": "standard",
              "state": "success"
            }
          },
          "27b2": {
            "30d4": {
              "type": "standard",
              "state": "success"
            }
          },
          "e587": {
            "e4d3": {
              "type": "standard",
              "state": "success"
            }
          },
          "8bc0": {},
          "e126": {
            "e587": {
              "type": "standard",
              "state": "success"
            }
          },
          "4c6a": {
            "6d70": {
              "type": "standard",
              "state": "failure"
            },
            "4a63": {
              "type": "standard",
              "state": "success"
            }
          },
          "500c": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "d48d": {
            "5379": {
              "type": "standard",
              "state": "success"
            }
          },
          "6d70": {
            "f609": {
              "type": "standard",
              "state": "success"
            },
            "341d": {
              "type": "standard",
              "state": "failure"
            }
          },
          "4a63": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "f609": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "c65b": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "341d": {
            "500c": {
              "type": "standard",
              "state": "failure"
            },
            "c65b": {
              "type": "standard",
              "state": "success"
            }
          }
        },
        "type": "automation",
        "canvasVersion": 3,
        "tags": [],
        "groups": [],
        "migrationVersion": 4
      }
    },
    {
      "type": "workflow",
      "data": {
        "created": "2022-03-08T15:20:46.127Z",
        "createdVersion": "5.40.5-2021.1.52.0",
        "created_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {}
        },
        "description": null,
        "font_size": 12,
        "inputSchema": {
          "type": "object",
          "properties": {
            "internalURL": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            }
          },
          "required": [
            "internalURL"
          ]
        },
        "lastUpdatedVersion": "4.69.3-2023.2.129",
        "last_updated": "2025-02-06T18:32:42.504Z",
        "last_updated_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {}
        },
        "name": "Prebuilt Promotion Re-Discover",
        "outputSchema": {
          "type": "object",
          "properties": {
            "internalURL": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            }
          }
        },
        "tasks": {
          "5979": {
            "name": "componentDiscovery",
            "canvasName": "componentDiscovery",
            "summary": "Performs discovery on Automation Catalogs or Workflows",
            "description": "Discovers any referenced components within automation catalogs",
            "location": "Application",
            "locationType": null,
            "app": "AppArtifacts",
            "type": "automatic",
            "displayName": "AppArtifacts",
            "variables": {
              "incoming": {
                "entryPoint": "$var.b668.discoveryEntryPoint"
              },
              "outgoing": {
                "discovery": null
              },
              "error": ""
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 1800,
              "y": 1100
            }
          },
          "7393": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "mergeFormWithDiscovery",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "605b86f821c795008dc26118",
                "variableMap": {
                  "formOutput": "$var.d69a.export",
                  "discoveryOutput": "$var.5979.discovery"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": false,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "formInput": null
              }
            },
            "deprecated": false,
            "groups": [],
            "task_name": "mergeFormWithDiscovery",
            "retrySettings": null,
            "nodeLocation": {
              "x": 2100,
              "y": 1000
            }
          },
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "nodeLocation": {
              "x": -2700,
              "y": 1000
            }
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "nodeLocation": {
              "x": 5400,
              "y": 1100
            }
          },
          "5dec": {
            "name": "gatherInternalGET",
            "canvasName": "gatherInternalGET",
            "summary": "Gather Selected Artifact Info",
            "description": "Gather Selected Artifact Info",
            "location": "Application",
            "app": "AppArtifacts",
            "displayName": "AppArtifacts",
            "type": "manual",
            "variables": {
              "incoming": {
                "internalURL": "$var.job.internalURL"
              },
              "outgoing": {
                "responseBody": null
              },
              "error": ""
            },
            "view": "/app_artifacts/views/tasks/gatherInternalGET",
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": -1800,
              "y": 1000
            }
          },
          "76d1": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "convertArtifactInfoToForm",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "6210015da161ae00ef6164b4",
                "variableMap": {
                  "input": "$var.5dec.responseBody"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": false,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "output": null
              }
            },
            "deprecated": false,
            "groups": [],
            "task_name": "convertArtifactInfoToForm",
            "retrySettings": null,
            "nodeLocation": {
              "x": -1200,
              "y": 1000
            }
          },
          "b668": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "convertFormOutputToDiscoveryFormat",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "5f7caed7a6f94b2e4b558b71",
                "variableMap": {
                  "formOutput": "$var.d69a.export"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "discoveryEntryPoint": null
              }
            },
            "deprecated": false,
            "groups": [],
            "task_name": "convertFormOutputToDiscoveryFormat",
            "retrySettings": null,
            "nodeLocation": {
              "x": 900,
              "y": 1000
            }
          },
          "bd16": {
            "name": "ViewData",
            "canvasName": "ViewData",
            "summary": "Confirm",
            "description": "Confirm",
            "location": "Application",
            "app": "WorkFlowEngine",
            "displayName": "Tools",
            "type": "manual",
            "variables": {
              "incoming": {
                "header": "Confirm Artifact Update",
                "message": "Please confirm correctness of the up to date list of components presented by the previous task.",
                "body": "Confirm button will update the list of components inside the Admin Essentials application.<br>Retry will revert to the previous task, so you can pick and choose what documents you may want to omit before discovery.",
                "variables": {},
                "btn_success": "CONFIRM",
                "btn_failure": "RETRY"
              },
              "outgoing": {},
              "error": ""
            },
            "view": "/workflow_engine/task/ViewData",
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 3000,
              "y": 1000
            }
          },
          "2b81": {
            "name": "ViewData",
            "canvasName": "ViewData",
            "summary": "Failed Discovery",
            "description": "View data in a pretty format",
            "location": "Application",
            "app": "WorkFlowEngine",
            "displayName": "Tools",
            "type": "manual",
            "variables": {
              "incoming": {
                "header": "Failed Discovery",
                "message": "Some selected component(s) caused the discovery to fail.<br>Please try again",
                "body": "",
                "variables": {},
                "btn_success": "Try Again",
                "btn_failure": ""
              },
              "outgoing": {},
              "error": ""
            },
            "view": "/workflow_engine/task/ViewData",
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 1800,
              "y": 1500
            }
          },
          "8ed7": {
            "name": "createPublishedArtifactFromScratch",
            "canvasName": "createPublishedArtifactFromScratch",
            "summary": "Creates artifact for publishing without DB calls",
            "description": "Creates JSON object containing artifact file structure and all associated data from input tasks without touching database",
            "location": "Application",
            "locationType": null,
            "app": "AppArtifacts",
            "type": "automatic",
            "displayName": "AppArtifacts",
            "variables": {
              "incoming": {
                "artifactData": "$var.eb15.mata",
                "modules": "$var.b3c0.responseBody",
                "packageJson": "$var.eb15.packageJSON"
              },
              "outgoing": {
                "callback": null
              },
              "error": ""
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 4200,
              "y": 1100
            }
          },
          "eb15": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "createArtifactForPublish",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "605b870f21c795008dc26119",
                "variableMap": {
                  "AEartifactInfo": "$var.5dec.responseBody",
                  "formOutput": "$var.b723.export",
                  "discovery": "$var.5979.discovery"
                },
                "options": {
                  "extractOutput": false,
                  "validateIncoming": false,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "mata": null,
                "packageJSON": null
              }
            },
            "deprecated": false,
            "groups": [],
            "task_name": "createArtifactForPublish",
            "retrySettings": null,
            "nodeLocation": {
              "x": 3300,
              "y": 1000
            }
          },
          "cd71": {
            "name": "replaceArtifactAdminEssentials",
            "canvasName": "replaceArtifactAdminEssentials",
            "summary": "Replaces an artifact in AE via direct mongo injection",
            "description": "Replaces an artifact created from a published artifact in admin essentials",
            "location": "Application",
            "locationType": null,
            "app": "AppArtifacts",
            "type": "automatic",
            "displayName": "AppArtifacts",
            "variables": {
              "incoming": {
                "artifactBundle": "$var.8ed7.callback"
              },
              "outgoing": {
                "modifiedCount": null
              },
              "error": ""
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 4800,
              "y": 1100
            }
          },
          "b3c0": {
            "name": "gatherInternalGET",
            "canvasName": "gatherInternalGET",
            "summary": "Gather GET call",
            "description": "Gather GET call",
            "location": "Application",
            "app": "AppArtifacts",
            "displayName": "AppArtifacts",
            "type": "manual",
            "variables": {
              "incoming": {
                "internalURL": "/health/adapters"
              },
              "outgoing": {
                "responseBody": null
              },
              "error": "",
              "decorators": []
            },
            "view": "/app_artifacts/views/tasks/gatherInternalGET",
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 3600,
              "y": 1100
            }
          },
          "d69a": {
            "name": "ShowJsonForm",
            "canvasName": "ShowJsonForm",
            "summary": "Show Current Components",
            "description": "Show Current Components",
            "location": "Application",
            "app": "JsonForms",
            "displayName": "JsonForms",
            "type": "manual",
            "variables": {
              "incoming": {
                "form_id": "Re-Discovery Components Form",
                "instance_data": "$var.2e2b.componentEditorFormInput"
              },
              "outgoing": {
                "export": null
              },
              "error": "",
              "decorators": []
            },
            "view": "/json-forms/task/ShowJsonForm",
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 300,
              "y": 1000
            }
          },
          "b723": {
            "name": "ShowJsonForm",
            "canvasName": "ShowJsonForm",
            "summary": "Show New Components",
            "description": "Show New Components",
            "location": "Application",
            "app": "JsonForms",
            "displayName": "JsonForms",
            "type": "manual",
            "variables": {
              "incoming": {
                "form_id": "Re-Discovery Components Form",
                "instance_data": "$var.7393.formInput"
              },
              "outgoing": {
                "export": null
              },
              "error": "",
              "decorators": []
            },
            "view": "/json-forms/task/ShowJsonForm",
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 2700,
              "y": 1000
            }
          },
          "2e2b": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "translateSchemaPushBundles",
            "description": "Takes in the output of the componentDiscovery task in appartifacts and outputs a format that can be used in a form where the components can be edited.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "621002baa161ae00ef6164b5",
                "variableMap": {
                  "componentDiscoveryOutput": "$var.76d1.output"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": false,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "componentEditorFormInput": null
              }
            },
            "deprecated": false,
            "groups": [],
            "task_name": "translateSchemaPushBundles",
            "retrySettings": null,
            "nodeLocation": {
              "x": -600,
              "y": 1000
            }
          }
        },
        "transitions": {
          "5979": {
            "7393": {
              "type": "standard",
              "state": "success"
            },
            "2b81": {
              "type": "standard",
              "state": "error"
            }
          },
          "6355": {},
          "7393": {
            "b723": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_start": {
            "5dec": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "5dec": {
            "76d1": {
              "type": "standard",
              "state": "success"
            }
          },
          "76d1": {
            "2e2b": {
              "type": "standard",
              "state": "success"
            }
          },
          "b668": {
            "5979": {
              "type": "standard",
              "state": "success"
            }
          },
          "bd16": {
            "5dec": {
              "type": "revert",
              "state": "failure"
            },
            "eb15": {
              "type": "standard",
              "state": "success"
            }
          },
          "2b81": {
            "5dec": {
              "type": "revert",
              "state": "success"
            }
          },
          "8ed7": {
            "cd71": {
              "type": "standard",
              "state": "success"
            }
          },
          "eb15": {
            "b3c0": {
              "type": "standard",
              "state": "success"
            }
          },
          "cd71": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "b3c0": {
            "8ed7": {
              "type": "standard",
              "state": "success"
            }
          },
          "d69a": {
            "b668": {
              "type": "standard",
              "state": "success"
            }
          },
          "b723": {
            "bd16": {
              "type": "standard",
              "state": "success"
            }
          },
          "2e2b": {
            "d69a": {
              "type": "standard",
              "state": "success"
            }
          }
        },
        "type": "automation",
        "canvasVersion": 3,
        "tags": [],
        "groups": [],
        "migrationVersion": 4
      }
    },
    {
      "type": "workflow",
      "data": {
        "name": "Prebuilt Promotion Gitlab Create Link",
        "tasks": {
          "592": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query update commit data",
            "description": "Query update commit data",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "commitActions",
                "obj": "$var.46fe.output"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 8700,
              "y": 2500
            }
          },
          "1751": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "JSON Transformation",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "6075cef28c016f0098c7284c",
                "variableMap": {
                  "artifactFullName": "$var.job.repoName"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "artifactName": null
              }
            },
            "groups": [],
            "task_name": "getArtifactPathGitlab",
            "nodeLocation": {
              "x": 900,
              "y": 1100
            }
          },
          "2890": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query Data Using 'json-query' Format",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response",
                "obj": "$var.c6d7.result"
              },
              "outgoing": {
                "return_data": null
              },
              "error": ""
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 7500,
              "y": 2800
            }
          },
          "2995": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query Data Using 'json-query' Format",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "time",
                "obj": "$var.b99e.time"
              },
              "outgoing": {
                "return_data": null
              },
              "error": ""
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 10200,
              "y": 900
            }
          },
          "3495": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "createNewProjectRequest",
            "description": "Creates request object for new project call",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "63effc7c2680b700eb4eeefa",
                "variableMap": {
                  "foundGroups": "$var.fb.result",
                  "path": "$var.job.url",
                  "projectName": "$var.job.repoName"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": true,
                  "revertToDefaultValue": false
                }
              },
              "outgoing": {
                "createProjectRequest": null
              },
              "decorators": []
            },
            "groups": [],
            "task_name": "createNewProjectRequest",
            "retrySettings": null,
            "nodeLocation": {
              "x": 4200,
              "y": 900
            }
          },
          "5168": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query repo id",
            "description": "Query repo id",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response.id",
                "obj": "$var.6c1.result"
              },
              "outgoing": {
                "return_data": null
              },
              "error": ""
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 5400,
              "y": 1100
            }
          },
          "6825": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "CI-YML file content",
            "description": "Set an object key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "name": ".gitlab-ci.yml"
                },
                "path": [
                  "content"
                ],
                "value": "default:\n  image: alpine:3.15\n\n  before_script:\n    - apk add --no-cache git\n    - apk add bash\n    - apk update && apk add --no-cache nodejs~=16 npm\n    - apk add --no-cache python3 py3-pip\n    - apk add --update --no-cache openssh\n\n  after_script:\n    - rm -rf ~/.ssh\n\nstages:\n  # Lint code, test code quality, and ensure there are no insecure dependencies\n  - quality\n  # Run unit and integration test suites\n  - test\n  # version bump\n  - bump\n  # Generate artifact.json file (needed for admin-essentials starting IAP 2020.1)\n  - generate\n  # Promote artifact.json to IAP\n  - promote\n\nsecurity:\n  allow_failure: true\n  stage: quality\n  script:\n    - npm i\n    # check node version:\n    - 'echo \"node version: $(node --version)\"'\n    # check npm version\n    - 'echo \"npm version: $(npm --version)\"'\n    - npm audit --registry=https://registry.npmjs.org\n\nschema_validation:\n  allow_failure: false\n  stage: test\n  script:\n    - npm i\n    # check node version:\n    - 'echo \"node version: $(node --version)\"'\n    # check npm version\n    - 'echo \"npm version: $(npm --version)\"'\n    - npm run validateSchema\n\nschemaLinks_validation:\n  allow_failure: false\n  stage: test\n  script:\n    - npm i\n    # check node version:\n    - 'echo \"node version: $(node --version)\"'\n    # check npm version\n    - 'echo \"npm version: $(npm --version)\"'\n    - npm run validateSchemaLinks\n\nversion_bump:\n  stage: bump\n  only:\n    - master\n  script:\n    - sh ./scripts/git_setup.sh\n    - sh ./scripts/node_setup.sh\n    - sh ./scripts/ver_bump.sh\n\ngenerate_artifact_json:\n  allow_failure: false\n  stage: generate\n  artifacts:\n    paths:\n    - artifact.json\n    expire_in: 5 mins \n  script:\n    - sh ./scripts/commit.sh\n\npromote_to_iap:\n  allow_failure: false\n  only:\n    - master\n  except:\n    variables: \n      - $PROMOTE == \"False\"\n  dependencies: \n    - generate_artifact_json\n  stage: promote\n  script:\n    - |\n      pip3 install requests\n      if ! python3 ./scripts/promote.py ./artifact.json; then\n        echo -e \"\\033[0;31mERROR: ***********************************************************************************\"\n        echo \"ERROR: There was an issue promoting artifact.json to IAP.\"\n        echo -e \"ERROR: ***********************************************************************************\\033[0m\"\n        exit 1\n      fi \n      \n# Only use spaces to indent your .yml configuration.\n# -----\n"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": -2100,
              "y": 1100
            }
          },
          "6891": {
            "name": "getV4ProjectsIdRepositoryBranchesBranch",
            "canvasName": "getV4ProjectsIdRepositoryBranchesBranch",
            "summary": "Get a single branch",
            "description": "Get a single branch",
            "location": "Adapter",
            "locationType": "Gitlab",
            "app": "Gitlab",
            "type": "automatic",
            "displayName": "Gitlab",
            "variables": {
              "incoming": {
                "id": "$var.3c4a.repoId",
                "branch": "$var.job.targetBranch",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 5700,
              "y": 1700
            }
          },
          "7100": {
            "name": "ViewData",
            "canvasName": "ViewData",
            "summary": "View Data",
            "description": "View data in a pretty format",
            "location": "Application",
            "app": "WorkFlowEngine",
            "displayName": "Tools",
            "type": "manual",
            "variables": {
              "incoming": {
                "header": "Failed",
                "message": "Failed to create merge request",
                "body": "Try again?",
                "variables": {},
                "btn_success": "Try Again",
                "btn_failure": "Cancel job"
              },
              "outgoing": {},
              "error": "",
              "decorators": []
            },
            "view": "/workflow_engine/task/ViewData",
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 13800,
              "y": 2000
            }
          },
          "9900": {
            "name": "getV4GroupsIdProjectsWithOptions",
            "canvasName": "getV4GroupsIdProjectsWithOptions",
            "summary": "Search for Repository",
            "description": "Search for Repository",
            "location": "Adapter",
            "locationType": "Gitlab",
            "app": "Gitlab",
            "type": "automatic",
            "displayName": "Gitlab",
            "variables": {
              "incoming": {
                "id": "$var.job.url",
                "queryData": "$var.c0e1.merged_object",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 2100,
              "y": 1100
            }
          },
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "nodeLocation": {
              "x": -3000,
              "y": 1100
            }
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "nodeLocation": {
              "x": 14700,
              "y": 900
            }
          },
          "29b": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "postRepoURI",
                "value": "https://gitlab.com/api/v4/projects"
              },
              "outgoing": {
                "value": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 1200,
              "y": 1100
            }
          },
          "190d": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query homepage",
            "description": "Query homepage",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response.web_url",
                "obj": "$var.6c1.result"
              },
              "outgoing": {
                "return_data": null
              },
              "error": ""
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 5400,
              "y": 900
            }
          },
          "cfa6": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query ssh url",
            "description": "Query ssh url",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response.ssh_url_to_repo",
                "obj": "$var.6c1.result"
              },
              "outgoing": {
                "return_data": null
              },
              "error": ""
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 5400,
              "y": 800
            }
          },
          "5a9c": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge Data",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "git",
                    "value": {
                      "task": "cfa6",
                      "variable": "return_data"
                    }
                  },
                  {
                    "key": "homepage",
                    "value": {
                      "task": "190d",
                      "variable": "return_data"
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 5700,
              "y": 1000
            }
          },
          "5a7e": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query create",
            "description": "Query create",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "create",
                "obj": "$var.99e6.createArray"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 6300,
              "y": 1000
            }
          },
          "871d": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query create commit data",
            "description": "Query create commit data",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "commitActions",
                "obj": "$var.1a1d.output"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 8400,
              "y": 900
            }
          },
          "14f0": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge Data",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "branch",
                    "value": {
                      "task": "job",
                      "variable": "targetBranch",
                      "editable": true
                    }
                  },
                  {
                    "key": "commit_message",
                    "value": {
                      "task": "job",
                      "variable": "commitMessage",
                      "editable": true
                    }
                  },
                  {
                    "key": "actions",
                    "value": {
                      "task": "871d",
                      "variable": "return_data"
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 9000,
              "y": 1000
            }
          },
          "3b3e": {
            "name": "ViewData",
            "canvasName": "ViewData",
            "summary": "View Data",
            "description": "View data in a pretty format",
            "location": "Application",
            "app": "WorkFlowEngine",
            "displayName": "Tools",
            "type": "manual",
            "variables": {
              "incoming": {
                "header": "Error",
                "message": "Error making commit to repository on GitLab. ",
                "body": "Try again?",
                "variables": {},
                "btn_success": "Try Again",
                "btn_failure": "Cancel Job"
              },
              "outgoing": {},
              "error": "",
              "decorators": []
            },
            "view": "/workflow_engine/task/ViewData",
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 11100,
              "y": 400
            }
          },
          "542c": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "JSON Transformation",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "6075cfe68c016f0098c7284d",
                "variableMap": {
                  "repoId": "$var.5168.return_data"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "gitlabCommitURI": null
              }
            },
            "groups": [],
            "task_name": "getUriGitlab",
            "nodeLocation": {
              "x": 9300,
              "y": 900
            }
          },
          "38fc": {
            "name": "ViewData",
            "canvasName": "ViewData",
            "summary": "Failed to create project",
            "description": "View data in a pretty format",
            "location": "Application",
            "app": "WorkFlowEngine",
            "displayName": "Tools",
            "type": "manual",
            "variables": {
              "incoming": {
                "header": "Failed",
                "message": "Failed to create project repository. Try again?",
                "body": "",
                "variables": {},
                "btn_success": "Try again",
                "btn_failure": "Cancel job"
              },
              "outgoing": {},
              "error": "",
              "decorators": []
            },
            "view": "/workflow_engine/task/ViewData",
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 4800,
              "y": 500
            }
          },
          "c46b": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge Data",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "branch",
                    "value": {
                      "task": "job",
                      "variable": "mrBranchName",
                      "editable": true
                    }
                  },
                  {
                    "key": "ref",
                    "value": {
                      "task": "job",
                      "variable": "targetBranch",
                      "editable": true
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 4800,
              "y": 1600
            }
          },
          "af69": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query update",
            "description": "Query update",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "update",
                "obj": "$var.99e6.updateArray"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 6600,
              "y": 2100
            }
          },
          "25d8": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge Data",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "branch",
                    "value": {
                      "task": "job",
                      "variable": "mrBranchName",
                      "editable": true
                    }
                  },
                  {
                    "key": "commit_message",
                    "value": {
                      "task": "job",
                      "variable": "commitMessage",
                      "editable": true
                    }
                  },
                  {
                    "key": "actions",
                    "value": {
                      "task": "592",
                      "variable": "return_data"
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 8100,
              "y": 2500
            }
          },
          "b529": {
            "name": "ViewData",
            "canvasName": "ViewData",
            "summary": "View Data",
            "description": "View data in a pretty format",
            "location": "Application",
            "app": "WorkFlowEngine",
            "displayName": "Tools",
            "type": "manual",
            "variables": {
              "incoming": {
                "header": "Failed",
                "message": "Failed to update MR branch",
                "body": "Try again?",
                "variables": {},
                "btn_success": "Try Again",
                "btn_failure": "Cancel Job"
              },
              "outgoing": {},
              "error": "",
              "decorators": []
            },
            "view": "/workflow_engine/task/ViewData",
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 11700,
              "y": 2000
            }
          },
          "dd20": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge Data",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "source_branch",
                    "value": {
                      "task": "job",
                      "variable": "mrBranchName",
                      "editable": true
                    }
                  },
                  {
                    "key": "target_branch",
                    "value": {
                      "task": "job",
                      "variable": "targetBranch",
                      "editable": true
                    }
                  },
                  {
                    "key": "title",
                    "value": {
                      "task": "job",
                      "variable": "mrBranchName",
                      "editable": true
                    }
                  },
                  {
                    "key": "description",
                    "value": {
                      "task": "ddb4",
                      "variable": "combinedStrings",
                      "editable": true
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 12900,
              "y": 2500
            }
          },
          "92e3": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "JSON Transformation",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "6075cfe68c016f0098c7284d",
                "variableMap": {
                  "repoId": "$var.3c4a.repoId"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "gitlabCommitURI": null
              }
            },
            "groups": [],
            "task_name": "getUriGitlab",
            "nodeLocation": {
              "x": 7500,
              "y": 2400
            }
          },
          "3c4a": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "getRepoURLGitlab",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "64356046770ce80183cec91d",
                "variableMap": {
                  "repoSearchName": "$var.job.repoName",
                  "incomingRepo": "$var.9900.result"
                },
                "options": {
                  "extractOutput": false,
                  "validateIncoming": false,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "repoURL": null,
                "repoId": null,
                "httpURL": null
              },
              "decorators": []
            },
            "groups": [],
            "task_name": "getRepoURLGitlab",
            "retrySettings": null,
            "nodeLocation": {
              "x": 4800,
              "y": 1300
            }
          },
          "f382": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "JSON Transformation",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "6075d09d8c016f0098c7284e",
                "variableMap": {
                  "repoId": "$var.3c4a.repoId",
                  "targetBranch": "$var.job.targetBranch"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": false,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "getPackageJsonURL": null
              }
            },
            "groups": [],
            "task_name": "getPackageJsonGitlab",
            "nodeLocation": {
              "x": 7200,
              "y": 2100
            }
          },
          "40bf": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query version",
            "description": "Query version",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response.version",
                "obj": "$var.c16e.result"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 8700,
              "y": 2100
            }
          },
          "ddb4": {
            "name": "stringConcat",
            "canvasName": "concat",
            "summary": "Merge request description",
            "description": "Merge request description",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "String",
            "variables": {
              "incoming": {
                "str": "Merge request created by:",
                "stringN": "$var.job.username"
              },
              "outgoing": {
                "combinedStrings": null
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 12300,
              "y": 2500
            }
          },
          "d1bf": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "filterActionsGitlab",
            "description": "filterActionsGitlab",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "6075bcc58c016f0098c72846",
                "variableMap": {
                  "branch": "$var.ae5b.branch",
                  "commit_message": "$var.ae5b.commit_message",
                  "filterActions": "$var.ae5b.actions"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "filteredCommit": null
              },
              "decorators": []
            },
            "groups": [],
            "task_name": "filterActionsGitlab",
            "retrySettings": null,
            "nodeLocation": {
              "x": 10500,
              "y": 2500
            }
          },
          "ae5b": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "actionsCreateGitlab",
            "description": "actionsCreateGitlab",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "6075d1cf8c016f0098c72852",
                "variableMap": {
                  "commitUpdate": "$var.25d8.merged_object"
                },
                "options": {
                  "extractOutput": false,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "branch": null,
                "commit_message": null,
                "actions": null
              },
              "decorators": []
            },
            "groups": [],
            "task_name": "actionCreateGitlab",
            "retrySettings": null,
            "nodeLocation": {
              "x": 10500,
              "y": 2800
            }
          },
          "2dcc": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "JSON Transformation",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "6075d13d8c016f0098c7284f",
                "variableMap": {
                  "repoID": "$var.3c4a.repoId"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "uriForGet": null
              }
            },
            "groups": [],
            "task_name": "getUriForFilesGitlab",
            "nodeLocation": {
              "x": 6600,
              "y": 2400
            }
          },
          "6c1": {
            "name": "postV4Projects",
            "canvasName": "postV4Projects",
            "summary": "Create new project",
            "description": "Create new project",
            "location": "Adapter",
            "locationType": "Gitlab",
            "app": "Gitlab",
            "type": "automatic",
            "displayName": "Gitlab",
            "variables": {
              "incoming": {
                "body": "$var.3495.createProjectRequest",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "$var.job.error",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 4800,
              "y": 900
            }
          },
          "2b32": {
            "name": "postV4ProjectsIdRepositoryBranches",
            "canvasName": "postV4ProjectsIdRepositoryBranches",
            "summary": "Create branch",
            "description": "Create branch",
            "location": "Adapter",
            "locationType": "Gitlab",
            "app": "Gitlab",
            "type": "automatic",
            "displayName": "Gitlab",
            "variables": {
              "incoming": {
                "id": "$var.3c4a.repoId",
                "body": "$var.c46b.merged_object",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 5700,
              "y": 2100
            }
          },
          "c16e": {
            "name": "getV4ProjectsRepositoryFilesRaw",
            "canvasName": "getV4ProjectsRepositoryFilesRaw",
            "summary": "Get raw file from repository",
            "description": "Get raw file from repository",
            "location": "Adapter",
            "locationType": "Gitlab",
            "app": "Gitlab",
            "type": "automatic",
            "displayName": "Gitlab",
            "variables": {
              "incoming": {
                "ref": "master",
                "id": "$var.3c4a.repoId",
                "filePath": "package.json",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 8100,
              "y": 2100
            }
          },
          "57f8": {
            "name": "postV4ProjectsIdRepositoryCommits",
            "canvasName": "postV4ProjectsIdRepositoryCommits",
            "summary": "Commit multiple file changes as one commit",
            "description": "This feature was introduced in GitLab 8.13",
            "location": "Adapter",
            "locationType": "Gitlab",
            "app": "Gitlab",
            "type": "automatic",
            "displayName": "Gitlab",
            "variables": {
              "incoming": {
                "id": "$var.3c4a.repoId",
                "body": "$var.a161.commitDeleteBody",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 9600,
              "y": 2800
            }
          },
          "3ed9": {
            "name": "postV4ProjectsIdRepositoryCommits",
            "canvasName": "postV4ProjectsIdRepositoryCommits",
            "summary": "Commit multiple file changes as one commit",
            "description": "This feature was introduced in GitLab 8.13",
            "location": "Adapter",
            "locationType": "Gitlab",
            "app": "Gitlab",
            "type": "automatic",
            "displayName": "Gitlab",
            "variables": {
              "incoming": {
                "id": "$var.3c4a.repoId",
                "body": "$var.d1bf.filteredCommit",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 11400,
              "y": 2500
            }
          },
          "9c59": {
            "name": "postV4ProjectsIdMergeRequests",
            "canvasName": "postV4ProjectsIdMergeRequests",
            "summary": "Create a merge request",
            "description": "Create a merge request",
            "location": "Adapter",
            "locationType": "Gitlab",
            "app": "Gitlab",
            "type": "automatic",
            "displayName": "Gitlab",
            "variables": {
              "incoming": {
                "id": "$var.3c4a.repoId",
                "body": "$var.dd20.merged_object",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 13800,
              "y": 2500
            }
          },
          "5c14": {
            "name": "postV4ProjectsIdRepositoryCommits",
            "canvasName": "postV4ProjectsIdRepositoryCommits",
            "summary": "Commit multiple file changes as one commit",
            "description": "Commit multiple file changes as one commit",
            "location": "Adapter",
            "locationType": "Gitlab",
            "app": "Gitlab",
            "type": "automatic",
            "displayName": "Gitlab",
            "variables": {
              "incoming": {
                "id": "$var.5168.return_data",
                "body": "$var.14f0.merged_object",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "retrySettings": {
              "state": [
                "error"
              ],
              "autoRetry": true,
              "limit": 3,
              "delay": 10000
            },
            "nodeLocation": {
              "x": 11100,
              "y": 900
            }
          },
          "f3e4": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "filterBodyGitlab",
            "description": "filterBodyGitlab",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "6075d17e8c016f0098c72850",
                "variableMap": {
                  "bodyFromGetCall": "$var.2890.return_data"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "filteredBody": null
              },
              "decorators": []
            },
            "groups": [],
            "task_name": "filterBodyGitlab",
            "retrySettings": null,
            "nodeLocation": {
              "x": 8100,
              "y": 2800
            }
          },
          "a161": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "createDeleteCommitGitlab",
            "description": "createDeleteCommitGitlab",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "6075d19a8c016f0098c72851",
                "variableMap": {
                  "commit_message": "Clean Repo [skip ci]",
                  "branch": "$var.job.mrBranchName",
                  "filteredBody": "$var.f3e4.filteredBody"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "commitDeleteBody": null
              },
              "decorators": []
            },
            "groups": [],
            "task_name": "createDeleteCommitGitlab",
            "retrySettings": null,
            "nodeLocation": {
              "x": 8700,
              "y": 2800
            }
          },
          "c6d7": {
            "name": "getV4ProjectsIdRepositoryTree",
            "canvasName": "getV4ProjectsIdRepositoryTree",
            "summary": "Get a project repository tree",
            "description": "Get a project repository tree",
            "location": "Adapter",
            "locationType": "Gitlab",
            "app": "Gitlab",
            "type": "automatic",
            "displayName": "Gitlab",
            "variables": {
              "incoming": {
                "id": "$var.3c4a.repoId",
                "ref": "$var.job.mrBranchName",
                "pathParam": "",
                "recursive": true,
                "perPage": 5000,
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 6600,
              "y": 2800
            }
          },
          "b99e": {
            "name": "getTime",
            "canvasName": "getTime",
            "summary": "Get time",
            "description": "Gets the current time with an optional offset, timezone shift, and format string",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Time",
            "variables": {
              "incoming": {
                "timezone": "-05:00",
                "offsetDuration": "",
                "format": ""
              },
              "outgoing": {
                "time": null
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 9900,
              "y": 900
            }
          },
          "b51": {
            "name": "ViewData",
            "canvasName": "ViewData",
            "summary": "SubGroup Not Found",
            "description": "SubGroup Not Found",
            "location": "Application",
            "app": "WorkFlowEngine",
            "displayName": "Tools",
            "type": "manual",
            "variables": {
              "incoming": {
                "header": "SubGroup Not Found",
                "message": "Failed to find subgroup listed below in GitLab. Make sure the inputted subgroup exists. Select Try Again to re-attempt subgroup search or Cancel Job to cancel this job.",
                "body": "$var.job.url",
                "variables": {},
                "btn_success": "Try Again",
                "btn_failure": "Cancel Job"
              },
              "outgoing": {},
              "error": "",
              "decorators": []
            },
            "view": "/workflow_engine/task/ViewData",
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 2700,
              "y": 0
            }
          },
          "ea3c": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "updatePackageJSONGitlab",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "6075bc6c8c016f0098c7283f",
                "variableMap": {
                  "filesArray": "$var.5a7e.return_data",
                  "packageJsonName": "$var.job.packageJsonName",
                  "packageJsonVersion": "0.0.1"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "fixedArray": null
              }
            },
            "groups": [],
            "task_name": "updatePackageJSONGitlab",
            "retrySettings": null,
            "nodeLocation": {
              "x": 6900,
              "y": 1000
            }
          },
          "7f02": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "updatePackageJSONGitlab",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "6075bc6c8c016f0098c7283f",
                "variableMap": {
                  "filesArray": "$var.af69.return_data",
                  "packageJsonName": "$var.job.packageJsonName",
                  "packageJsonVersion": "1"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "fixedArray": null
              }
            },
            "groups": [],
            "task_name": "updatePackageJSONGitlab",
            "retrySettings": null,
            "nodeLocation": {
              "x": 9300,
              "y": 2100
            }
          },
          "1a1d": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "generateCommitActions",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "621fd789da0c6c470881bdab",
                "variableMap": {
                  "fixedArray": "$var.ea3c.fixedArray",
                  "action": "create"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "output": null
              },
              "decorators": []
            },
            "groups": [],
            "task_name": "generateCommitActions",
            "retrySettings": null,
            "nodeLocation": {
              "x": 7800,
              "y": 1000
            }
          },
          "46fe": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "generateCommitActions",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "621fd789da0c6c470881bdab",
                "variableMap": {
                  "action": "update",
                  "fixedArray": "$var.7f02.fixedArray"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "output": null
              }
            },
            "groups": [],
            "task_name": "generateCommitActions",
            "retrySettings": null,
            "nodeLocation": {
              "x": 9300,
              "y": 2400
            }
          },
          "a7e2": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Check if project exists",
            "description": "Check if project exists",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "response",
                        "operand_1": {
                          "variable": "result",
                          "task": "9900"
                        },
                        "operator": "!=",
                        "operand_2": {
                          "variable": [],
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 2700,
              "y": 1100
            }
          },
          "da5e": {
            "name": "ViewData",
            "canvasName": "ViewData",
            "summary": "Target Branch Not Found",
            "description": "View data in a pretty format",
            "location": "Application",
            "app": "WorkFlowEngine",
            "displayName": "Tools",
            "type": "manual",
            "variables": {
              "incoming": {
                "header": "Target Branch Not Found",
                "message": "Failed to get Target Branch. Check that the inputted Target Branch exists.",
                "body": "",
                "variables": {},
                "btn_success": "Cancel Job",
                "btn_failure": ""
              },
              "outgoing": {},
              "error": "",
              "decorators": []
            },
            "view": "/workflow_engine/task/ViewData",
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 6900,
              "y": 1600
            }
          },
          "defc": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "Create Script and Test Files",
            "description": "Runs a child job inside a workflow.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "Prebuilt Promotion Gitlab Add Files",
                "variables": {},
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "groups": [],
            "actor": "job",
            "nodeLocation": {
              "x": -1500,
              "y": 1100
            }
          },
          "716f": {
            "name": "query",
            "canvasName": "query",
            "summary": "getScriptFiles",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "scriptFiles",
                "obj": "$var.defc.job_details"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": -900,
              "y": 1100
            }
          },
          "3fff": {
            "name": "query",
            "canvasName": "query",
            "summary": "getTestFiles",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "testFiles",
                "obj": "$var.defc.job_details"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": -900,
              "y": 1100
            }
          },
          "c290": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "getFileObjectsPP",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "621d05685da44100e455a1d1",
                "variableMap": {
                  "scriptsArr": "$var.716f.return_data",
                  "ymlFile": "$var.6825.object",
                  "testFiles": "$var.3fff.return_data"
                },
                "options": {
                  "extractOutput": false,
                  "validateIncoming": false,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "scriptsFolder": null,
                "YMLFile": null,
                "testFolder": null
              }
            },
            "groups": [],
            "task_name": "getFileObjectsPP",
            "retrySettings": null,
            "nodeLocation": {
              "x": -300,
              "y": 1100
            }
          },
          "99e6": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "createAndUpdateArraysPP",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "621d36785da44100e455a1d3",
                "variableMap": {
                  "artifact": "$var.job.artifact",
                  "scriptsObject": "$var.c290.scriptsFolder",
                  "ymlFile": "$var.c290.YMLFile",
                  "testsObject": "$var.c290.testFolder"
                },
                "options": {
                  "extractOutput": false,
                  "validateIncoming": false,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "createArray": null,
                "updateArray": null
              },
              "decorators": []
            },
            "groups": [],
            "task_name": "createAndUpdateArraysPP",
            "retrySettings": null,
            "nodeLocation": {
              "x": 0,
              "y": 1100
            }
          },
          "c0e1": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge Data",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "search",
                    "value": {
                      "task": "job",
                      "variable": "repoName",
                      "editable": true
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": -2400,
              "y": 1100
            }
          },
          "c944": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Failure path",
            "description": "Failure path",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": ""
              },
              "outgoing": {
                "response": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 4800,
              "y": 0
            }
          },
          "91a2": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Failure path",
            "description": "Failure path",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": ""
              },
              "outgoing": {
                "response": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 14400,
              "y": 100
            }
          },
          "fb": {
            "name": "getV4Groups",
            "canvasName": "getV4Groups",
            "summary": "Get a groups list",
            "description": "Get a groups list",
            "location": "Adapter",
            "locationType": "Gitlab",
            "app": "Gitlab",
            "type": "automatic",
            "displayName": "Gitlab",
            "variables": {
              "incoming": {
                "statistics": "",
                "allAvailable": "",
                "search": "$var.job.url",
                "orderBy": "",
                "sort": "",
                "skipGroups": "",
                "withCustomAttributes": "",
                "owned": "",
                "minAccessLevel": "",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 3000,
              "y": 900
            }
          },
          "cbd6": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Check if provided path for group exists",
            "description": "Check if provided path for group exists",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "response[*].full_path",
                        "operand_1": {
                          "variable": "result",
                          "task": "fb"
                        },
                        "operator": "contains",
                        "operand_2": {
                          "variable": "url",
                          "task": "job"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 3600,
              "y": 900
            }
          }
        },
        "transitions": {
          "592": {
            "25d8": {
              "type": "standard",
              "state": "success"
            }
          },
          "985": {},
          "1290": {},
          "1751": {
            "29b": {
              "type": "standard",
              "state": "success"
            }
          },
          "2890": {
            "f3e4": {
              "type": "standard",
              "state": "success"
            }
          },
          "2995": {
            "5c14": {
              "type": "standard",
              "state": "success"
            }
          },
          "3495": {
            "6c1": {
              "type": "standard",
              "state": "success"
            }
          },
          "5168": {
            "5a9c": {
              "type": "standard",
              "state": "success"
            }
          },
          "6825": {
            "defc": {
              "type": "standard",
              "state": "success"
            }
          },
          "6891": {
            "2b32": {
              "type": "standard",
              "state": "success"
            },
            "da5e": {
              "type": "standard",
              "state": "error"
            }
          },
          "7100": {
            "workflow_end": {
              "type": "standard",
              "state": "failure"
            },
            "9c59": {
              "type": "revert",
              "state": "success"
            }
          },
          "9900": {
            "b51": {
              "type": "standard",
              "state": "error"
            },
            "a7e2": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_start": {
            "c0e1": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "29b": {
            "9900": {
              "type": "standard",
              "state": "success"
            }
          },
          "190d": {
            "5a9c": {
              "type": "standard",
              "state": "success"
            }
          },
          "cfa6": {
            "5a9c": {
              "type": "standard",
              "state": "success"
            }
          },
          "5a9c": {
            "5a7e": {
              "type": "standard",
              "state": "success"
            }
          },
          "5a7e": {
            "ea3c": {
              "type": "standard",
              "state": "success"
            }
          },
          "871d": {
            "14f0": {
              "type": "standard",
              "state": "success"
            }
          },
          "14f0": {
            "542c": {
              "type": "standard",
              "state": "success"
            }
          },
          "3b3e": {
            "542c": {
              "type": "revert",
              "state": "success"
            },
            "workflow_end": {
              "type": "standard",
              "state": "failure"
            }
          },
          "542c": {
            "b99e": {
              "type": "standard",
              "state": "success"
            }
          },
          "38fc": {
            "6c1": {
              "type": "revert",
              "state": "success"
            },
            "c944": {
              "type": "standard",
              "state": "failure"
            }
          },
          "c46b": {
            "6891": {
              "type": "standard",
              "state": "success"
            }
          },
          "af69": {
            "f382": {
              "type": "standard",
              "state": "success"
            }
          },
          "25d8": {
            "92e3": {
              "type": "standard",
              "state": "success"
            }
          },
          "b529": {
            "3ed9": {
              "type": "revert",
              "state": "success"
            },
            "workflow_end": {
              "type": "standard",
              "state": "failure"
            }
          },
          "dd20": {
            "9c59": {
              "type": "standard",
              "state": "success"
            }
          },
          "92e3": {
            "2dcc": {
              "type": "standard",
              "state": "success"
            }
          },
          "3c4a": {
            "c46b": {
              "type": "standard",
              "state": "success"
            }
          },
          "f382": {
            "c16e": {
              "type": "standard",
              "state": "success"
            }
          },
          "40bf": {
            "7f02": {
              "type": "standard",
              "state": "success"
            }
          },
          "ddb4": {
            "dd20": {
              "type": "standard",
              "state": "success"
            }
          },
          "d1bf": {
            "3ed9": {
              "type": "standard",
              "state": "success"
            }
          },
          "ae5b": {
            "d1bf": {
              "type": "standard",
              "state": "success"
            }
          },
          "2dcc": {
            "c6d7": {
              "type": "standard",
              "state": "success"
            }
          },
          "6c1": {
            "5168": {
              "type": "standard",
              "state": "success"
            },
            "cfa6": {
              "type": "standard",
              "state": "success"
            },
            "190d": {
              "type": "standard",
              "state": "success"
            },
            "38fc": {
              "type": "standard",
              "state": "error"
            }
          },
          "2b32": {
            "af69": {
              "type": "standard",
              "state": "success"
            }
          },
          "c16e": {
            "40bf": {
              "type": "standard",
              "state": "success"
            }
          },
          "57f8": {
            "ae5b": {
              "type": "standard",
              "state": "success"
            }
          },
          "3ed9": {
            "b529": {
              "type": "standard",
              "state": "error"
            },
            "ddb4": {
              "type": "standard",
              "state": "success"
            }
          },
          "9c59": {
            "7100": {
              "type": "standard",
              "state": "error"
            },
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "5c14": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            },
            "3b3e": {
              "type": "standard",
              "state": "error"
            }
          },
          "f3e4": {
            "a161": {
              "type": "standard",
              "state": "success"
            }
          },
          "a161": {
            "57f8": {
              "type": "standard",
              "state": "success"
            }
          },
          "c6d7": {
            "2890": {
              "type": "standard",
              "state": "success"
            }
          },
          "b99e": {
            "2995": {
              "type": "standard",
              "state": "success"
            }
          },
          "b51": {
            "9900": {
              "type": "revert",
              "state": "success"
            },
            "c944": {
              "type": "standard",
              "state": "failure"
            }
          },
          "ea3c": {
            "1a1d": {
              "type": "standard",
              "state": "success"
            }
          },
          "7f02": {
            "46fe": {
              "type": "standard",
              "state": "success"
            }
          },
          "1a1d": {
            "871d": {
              "type": "standard",
              "state": "success"
            }
          },
          "46fe": {
            "592": {
              "type": "standard",
              "state": "success"
            }
          },
          "a7e2": {
            "3c4a": {
              "type": "standard",
              "state": "success"
            },
            "fb": {
              "type": "standard",
              "state": "failure"
            }
          },
          "da5e": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "defc": {
            "716f": {
              "type": "standard",
              "state": "success"
            }
          },
          "716f": {
            "3fff": {
              "type": "standard",
              "state": "success"
            }
          },
          "3fff": {
            "c290": {
              "type": "standard",
              "state": "success"
            }
          },
          "c290": {
            "99e6": {
              "type": "standard",
              "state": "success"
            }
          },
          "99e6": {
            "1751": {
              "type": "standard",
              "state": "success"
            }
          },
          "c0e1": {
            "6825": {
              "type": "standard",
              "state": "success"
            }
          },
          "c944": {
            "91a2": {
              "type": "standard",
              "state": "success"
            }
          },
          "91a2": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "fb": {
            "cbd6": {
              "type": "standard",
              "state": "success"
            }
          },
          "cbd6": {
            "3495": {
              "type": "standard",
              "state": "success"
            },
            "b51": {
              "type": "standard",
              "state": "failure"
            }
          },
          "583c": {},
          "ba52": {},
          "c60": {},
          "683e": {},
          "2c42": {},
          "33ba": {},
          "1fc1": {},
          "80b1": {},
          "5a0d": {},
          "a613": {},
          "36fe": {},
          "43dd": {},
          "5d88": {},
          "7c4f": {}
        },
        "inputSchema": {
          "type": "object",
          "properties": {
            "repoName": {
              "type": "string",
              "examples": [
                "New Artifact"
              ]
            },
            "url": {
              "type": "string",
              "examples": [
                "test"
              ]
            },
            "targetBranch": {
              "title": "branch",
              "type": "string"
            },
            "adapter_id": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "commitMessage": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "mrBranchName": {
              "type": "string"
            },
            "username": {
              "title": "stringN",
              "type": [
                "array",
                "string",
                "boolean",
                "number"
              ],
              "items": {
                "type": "string"
              },
              "examples": [
                [
                  " World"
                ]
              ]
            },
            "packageJsonName": {
              "type": "string",
              "examples": [
                "sdfsa"
              ]
            },
            "artifact": {
              "type": "object",
              "properties": {
                "update": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": []
                  }
                },
                "create": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": []
                  }
                }
              },
              "required": []
            }
          },
          "required": [
            "repoName",
            "url",
            "targetBranch",
            "adapter_id",
            "commitMessage",
            "mrBranchName",
            "username",
            "packageJsonName",
            "artifact"
          ]
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "repoName": {
              "type": "string",
              "examples": [
                "New Artifact"
              ]
            },
            "url": {
              "type": "string",
              "examples": [
                "test"
              ]
            },
            "targetBranch": {
              "title": "branch",
              "type": "string"
            },
            "adapter_id": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "commitMessage": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "mrBranchName": {
              "type": "string"
            },
            "username": {
              "title": "stringN",
              "type": [
                "array",
                "string",
                "boolean",
                "number"
              ],
              "items": {
                "type": "string"
              },
              "examples": [
                [
                  " World"
                ]
              ]
            },
            "packageJsonName": {
              "type": "string",
              "examples": [
                "sdfsa"
              ]
            },
            "artifact": {
              "type": "object",
              "properties": {
                "update": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": []
                  }
                },
                "create": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": []
                  }
                }
              },
              "required": []
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            },
            "postRepoURI": {
              "type": "string"
            },
            "error": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            }
          }
        },
        "created": "2022-03-08T14:50:49.785Z",
        "createdVersion": "5.40.5-2021.1.52.0",
        "created_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {}
        },
        "font_size": 12,
        "lastUpdatedVersion": "5.55.2-2023.2.14",
        "last_updated": "2025-02-06T20:09:18.584Z",
        "last_updated_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {}
        },
        "preAutomationTime": 0,
        "sla": 0,
        "type": "automation",
        "canvasVersion": 3,
        "tags": [],
        "groups": [],
        "migrationVersion": 4
      }
    },
    {
      "type": "workflow",
      "data": {
        "created": "2022-04-20T04:49:56.579Z",
        "createdVersion": "5.40.5-2021.1.72.0",
        "created_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {}
        },
        "description": null,
        "font_size": 12,
        "inputSchema": {
          "type": "object",
          "properties": {
            "_id": {
              "title": "job_id",
              "type": "string",
              "examples": [
                "test"
              ]
            },
            "mrBranchName": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "commitMessage": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "url": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "targetBranch": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "adapter_id": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "repoName": {
              "title": "str",
              "type": "string",
              "examples": [
                "Hello World"
              ]
            },
            "username": {
              "title": "stringN",
              "type": [
                "array",
                "string",
                "boolean",
                "number"
              ],
              "items": {
                "type": "string"
              },
              "examples": [
                [
                  " World"
                ]
              ]
            },
            "artifact": {
              "title": "obj",
              "type": "object",
              "properties": {},
              "examples": [
                {
                  "name": "value"
                }
              ]
            },
            "packageJsonName": {
              "type": "string",
              "examples": [
                "sdfsa"
              ]
            },
            "projectPath": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            }
          },
          "required": [
            "_id",
            "mrBranchName",
            "commitMessage",
            "url",
            "targetBranch",
            "adapter_id",
            "repoName",
            "username",
            "artifact",
            "packageJsonName",
            "projectPath"
          ]
        },
        "lastUpdatedVersion": "4.69.3-2023.2.129",
        "last_updated": "2025-02-06T18:32:42.370Z",
        "last_updated_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {}
        },
        "name": "Prebuilt Promotion Bitbucket Create Link",
        "outputSchema": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "mrBranchName": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "commitMessage": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "url": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "targetBranch": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "adapter_id": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "repoName": {
              "title": "str",
              "type": "string",
              "examples": [
                "Hello World"
              ]
            },
            "username": {
              "title": "stringN",
              "type": [
                "array",
                "string",
                "boolean",
                "number"
              ],
              "items": {
                "type": "string"
              },
              "examples": [
                [
                  " World"
                ]
              ]
            },
            "artifact": {
              "title": "combinedArray",
              "type": "array",
              "items": [
                {
                  "type": [
                    "string",
                    "number",
                    "integer",
                    "object",
                    "array",
                    "boolean"
                  ]
                }
              ],
              "examples": [
                [
                  "a",
                  "b",
                  "c",
                  "d"
                ]
              ]
            },
            "packageJsonName": {
              "type": "string",
              "examples": [
                "sdfsa"
              ]
            },
            "projectPath": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "initiator": {
              "type": "string"
            },
            "deleteArray": {
              "title": "combinedArray",
              "type": "array",
              "items": [
                {
                  "type": [
                    "string",
                    "number",
                    "integer",
                    "object",
                    "array",
                    "boolean"
                  ]
                }
              ],
              "examples": [
                [
                  "a",
                  "b",
                  "c",
                  "d"
                ]
              ]
            },
            "repoSlug": {
              "title": "lowercaseString",
              "type": "string",
              "examples": [
                "hello world"
              ]
            }
          }
        },
        "preAutomationTime": 0,
        "sla": 0,
        "tasks": {
          "1364": {
            "name": "forEach",
            "canvasName": "forEach",
            "summary": "For Each Loop",
            "description": "Iterate over each item in an array",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_array": "$var.ca48.return_data"
              },
              "outgoing": {
                "current_item": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 7200,
              "y": 1500
            }
          },
          "1801": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query Data Using 'json-query' Format",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "time",
                "obj": "$var.da92.time"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 9900,
              "y": 900
            }
          },
          "5168": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query repo id",
            "description": "Query repo id",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response.uuid",
                "obj": "$var.b247.result"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 3600,
              "y": 1200
            }
          },
          "6114": {
            "name": "reattempt",
            "canvasName": "reattempt",
            "summary": "Re-attempt",
            "description": "Re-attempt after n minutes",
            "location": "Application",
            "locationType": null,
            "app": "MOP",
            "type": "automatic",
            "displayName": "MOP",
            "variables": {
              "incoming": {
                "job_id": "$var.job._id",
                "attemptID": "$var.1801.return_data",
                "minutes": 0,
                "attempts": 3
              },
              "outgoing": {
                "response": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 10800,
              "y": 500
            }
          },
          "7885": {
            "name": "renderJinjaTemplate",
            "canvasName": "renderJinjaTemplate",
            "summary": "Render Jinja Template",
            "description": "Renders jinja template output.",
            "location": "Application",
            "locationType": null,
            "app": "TemplateBuilder",
            "type": "automatic",
            "displayName": "TemplateBuilder",
            "variables": {
              "incoming": {
                "name": "BitbucketFilesToAddAndDelete",
                "context": "$var.5bbc.merged_object"
              },
              "outgoing": {
                "renderedTemplate": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 7200,
              "y": 900
            }
          },
          "8128": {
            "name": "makeData",
            "canvasName": "makeData",
            "summary": "New branch body",
            "description": "This task takes an input and converts it to a different data type. For example, converting a number into a string.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "input": {
                  "name": "<!newBranch!>",
                  "target": {
                    "hash": "<!hash!>"
                  }
                },
                "outputType": "json",
                "variables": "$var.64cf.merged_object"
              },
              "outgoing": {
                "output": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 2100,
              "y": 1500
            }
          },
          "8804": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Jinja Input",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "artifact",
                    "value": {
                      "task": "5fbd",
                      "variable": "fixedArray"
                    }
                  },
                  {
                    "key": "branch",
                    "value": {
                      "task": "job",
                      "variable": "mrBranchName",
                      "editable": true
                    }
                  },
                  {
                    "key": "commitMessage",
                    "value": {
                      "task": "job",
                      "variable": "commitMessage",
                      "editable": true
                    }
                  },
                  {
                    "key": "deleteFiles",
                    "value": {
                      "task": "job",
                      "variable": "deleteArray"
                    }
                  },
                  {
                    "key": "scripts",
                    "value": {
                      "task": "static",
                      "variable": {}
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": 5100,
              "y": 1500
            }
          },
          "8941": {
            "name": "ViewData",
            "canvasName": "ViewData",
            "summary": "Failed to update MR branch",
            "description": "Displays a message and runtime data to an operator. This can be used to request a decision, or used for acknowledgement only.",
            "location": "Application",
            "app": "WorkFlowEngine",
            "displayName": "Tools",
            "type": "manual",
            "variables": {
              "incoming": {
                "header": "Failed",
                "message": "Failed to update MR branch",
                "body": "Try again?",
                "variables": {},
                "btn_success": "Try again",
                "btn_failure": "Cancel job"
              },
              "outgoing": {},
              "error": "",
              "decorators": []
            },
            "view": "/workflow_engine/task/ViewData",
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 8400,
              "y": 2000
            }
          },
          "9952": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge All Data Branch ID",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "hash",
                    "value": {
                      "task": "d648",
                      "variable": "return_data"
                    }
                  },
                  {
                    "key": "newBranch",
                    "value": {
                      "task": "job",
                      "variable": "mrBranchName",
                      "editable": true
                    }
                  },
                  {
                    "key": "url",
                    "value": {
                      "task": "job",
                      "variable": "url"
                    }
                  },
                  {
                    "key": "branch",
                    "value": {
                      "task": "job",
                      "variable": "targetBranch"
                    }
                  },
                  {
                    "key": "repoName",
                    "value": {
                      "task": "job",
                      "variable": "repoSlug"
                    }
                  },
                  {
                    "key": "newBranchHash",
                    "value": {
                      "task": "e48f",
                      "variable": "return_data"
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": 3000,
              "y": 1800
            }
          },
          "9956": {
            "name": "postRepositoriesUsernameRepoSlugSrc",
            "canvasName": "postRepositoriesUsernameRepoSlugSrc",
            "summary": "Updates repository",
            "description": "Creates a new repository.\nNote: In order to set the project for the newly created repository,\npass in either the project key or the project UUID as part of the\nrequest body as shown in the examples below:\n```\n$ curl -X POST -H \"Content-Type: application/json\" -d '{\n    \"scm\": \"git\",\n    \"project\": {\n        \"key\": \"MARS\"\n    }\n}' https://api.bitbucket.org/2.0/repositories/teamsinspace/hablanding\n```\nor\n```\n$ curl -X POST -H \"Content-Type: application/json\" -d '{\n    \"scm\": \"git\",\n    \"project\": ...(description truncated)",
            "location": "Adapter",
            "locationType": "Bitbucket",
            "app": "Bitbucket",
            "type": "automatic",
            "displayName": "Bitbucket",
            "variables": {
              "incoming": {
                "username": "$var.job.url",
                "repoSlug": "$var.job.repoSlug",
                "body": "$var.e7b7.return_data",
                "filename": "",
                "attribute": "",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 10800,
              "y": 900
            }
          },
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "nodeLocation": {
              "x": -4200,
              "y": 1200
            }
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "nodeLocation": {
              "x": 11700,
              "y": 900
            }
          },
          "190d": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query homepage",
            "description": "Query homepage",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response.links.html.href",
                "obj": "$var.b247.result"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 3600,
              "y": 900
            }
          },
          "cfa6": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query ssh url",
            "description": "Query ssh url",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response.links.clone[name=ssh].href",
                "obj": "$var.b247.result"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 3600,
              "y": 700
            }
          },
          "5a9c": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge Data",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "git",
                    "value": {
                      "task": "cfa6",
                      "variable": "return_data"
                    }
                  },
                  {
                    "key": "homepage",
                    "value": {
                      "task": "190d",
                      "variable": "return_data"
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": 4200,
              "y": 1000
            }
          },
          "3b3e": {
            "name": "ViewData",
            "canvasName": "ViewData",
            "summary": "View Data",
            "description": "View data in a pretty format",
            "location": "Application",
            "app": "WorkFlowEngine",
            "displayName": "Tools",
            "type": "manual",
            "variables": {
              "incoming": {
                "header": "Error",
                "message": "Error making commit to repository on GitLab. ",
                "body": "Try again?",
                "variables": {},
                "btn_success": "Try Again",
                "btn_failure": "Cancel Job"
              },
              "outgoing": {},
              "error": "",
              "decorators": []
            },
            "view": "/workflow_engine/task/ViewData",
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 11400,
              "y": 500
            }
          },
          "38fc": {
            "name": "ViewData",
            "canvasName": "ViewData",
            "summary": "Failed to create project",
            "description": "View data in a pretty format",
            "location": "Application",
            "app": "WorkFlowEngine",
            "displayName": "Tools",
            "type": "manual",
            "variables": {
              "incoming": {
                "header": "Failed",
                "message": "Failed to create project repository.  Check that workspace and project path exist and try again.Try again?",
                "body": "",
                "variables": {},
                "btn_success": "Try again",
                "btn_failure": "Cancel job"
              },
              "outgoing": {},
              "error": "",
              "decorators": []
            },
            "view": "/workflow_engine/task/ViewData",
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 1500,
              "y": 600
            }
          },
          "a33f": {
            "name": "delay",
            "canvasName": "delay",
            "summary": "Delay a Job",
            "description": "Delay a Job for a duration by Job ID and number of seconds.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "time": 10
              },
              "outgoing": {
                "time_in_milliseconds": null
              },
              "error": ""
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 9900,
              "y": 500
            }
          },
          "da5e": {
            "name": "ViewData",
            "canvasName": "ViewData",
            "summary": "Target Branch Not Found",
            "description": "View data in a pretty format",
            "location": "Application",
            "app": "WorkFlowEngine",
            "displayName": "Tools",
            "type": "manual",
            "variables": {
              "incoming": {
                "header": "Target Branch Not Found",
                "message": "Failed to get Target Branch. Check that the inputted Target Branch exists.",
                "body": "",
                "variables": {},
                "btn_success": "Cancel Job",
                "btn_failure": ""
              },
              "outgoing": {},
              "error": "",
              "decorators": []
            },
            "view": "/workflow_engine/task/ViewData",
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 900,
              "y": 1900
            }
          },
          "1f81": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Run Healthcheck Evaluation Task",
            "description": "Evaluates if adapter healthcheck succeeded or not",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "result",
                          "task": "b645"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": true,
                          "task": "static"
                        }
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": -2700,
              "y": 1200
            }
          },
          "3fa0": {
            "name": "ViewData",
            "canvasName": "ViewData",
            "summary": "View Data",
            "description": "Displays a message and runtime data to an operator. This can be used to request a decision, or used for acknowledgement only.",
            "location": "Application",
            "app": "WorkFlowEngine",
            "displayName": "Tools",
            "type": "manual",
            "variables": {
              "incoming": {
                "header": "Adapter Healthcheck Failed",
                "message": "Failed to connect to Bitbucket adapter. Make sure your adapter is online. ",
                "body": "Try again?",
                "variables": {},
                "btn_success": "Try Again",
                "btn_failure": "Cancel Job"
              },
              "outgoing": {},
              "error": "",
              "decorators": []
            },
            "view": "/workflow_engine/task/ViewData",
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": -2700,
              "y": 1500
            }
          },
          "a7fe": {
            "name": "getRepositoriesUsernameRepoSlug",
            "canvasName": "getRepositoriesUsernameRepoSlug",
            "summary": "Returns the object describing this repository.",
            "description": "Returns the object describing this repository.",
            "location": "Adapter",
            "locationType": "Bitbucket",
            "app": "Bitbucket",
            "type": "automatic",
            "displayName": "Bitbucket",
            "variables": {
              "incoming": {
                "username": "$var.job.url",
                "repoSlug": "$var.job.repoSlug",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 0,
              "y": 1200
            }
          },
          "cf1d": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query Data Using 'json-query' Format",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "renderedTemplate",
                "obj": "$var.7885.renderedTemplate"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 7500,
              "y": 900
            }
          },
          "b0e": {
            "name": "makeData",
            "canvasName": "makeData",
            "summary": "Convert input into a different data type",
            "description": "This task takes an input and converts it to a different data type. For example, converting a number into a string.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "input": "$var.cf1d.return_data",
                "outputType": "json",
                "variables": ""
              },
              "outgoing": {
                "output": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 8100,
              "y": 900
            }
          },
          "b247": {
            "name": "postRepositoriesUsernameRepoSlug",
            "canvasName": "postRepositoriesUsernameRepoSlug",
            "summary": "Creates a new repository",
            "description": "Creates a new repository.\nNote: In order to set the project for the newly created repository,\npass in either the project key or the project UUID as part of the\nrequest body as shown in the examples below:\n```\n$ curl -X POST -H \"Content-Type: application/json\" -d '{\n    \"scm\": \"git\",\n    \"project\": {\n        \"key\": \"MARS\"\n    }\n}' https://api.bitbucket.org/2.0/repositories/teamsinspace/hablanding\n```\nor\n```\n$ curl -X POST -H \"Content-Type: application/json\" -d '{\n    \"scm\": \"git\",\n    \"project\": ...(description truncated)",
            "location": "Adapter",
            "locationType": "Bitbucket",
            "app": "Bitbucket",
            "type": "automatic",
            "displayName": "Bitbucket",
            "variables": {
              "incoming": {
                "username": "$var.job.url",
                "repoSlug": "$var.job.repoSlug",
                "body": "$var.ca57.merged_object",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 1500,
              "y": 1000
            }
          },
          "5bbc": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Jinja Input",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "artifact",
                    "value": {
                      "task": "7ccf",
                      "variable": "fixedArray"
                    }
                  },
                  {
                    "key": "branch",
                    "value": {
                      "task": "job",
                      "variable": "targetBranch"
                    }
                  },
                  {
                    "key": "commitMessage",
                    "value": {
                      "task": "job",
                      "variable": "commitMessage",
                      "editable": true
                    }
                  },
                  {
                    "key": "scripts",
                    "value": {
                      "task": "4fff",
                      "variable": "job_details"
                    }
                  },
                  {
                    "key": "deleteFiles",
                    "value": {
                      "task": "static",
                      "variable": []
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": 6600,
              "y": 1000
            }
          },
          "da92": {
            "name": "getTime",
            "canvasName": "getTime",
            "summary": "Get time",
            "description": "Gets the current time with an optional offset, timezone shift, and format string",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Time",
            "variables": {
              "incoming": {
                "timezone": "-05:00",
                "offsetDuration": "",
                "format": ""
              },
              "outgoing": {
                "time": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 9300,
              "y": 900
            }
          },
          "a332": {
            "name": "updateRepositoryPipelineConfig",
            "canvasName": "updateRepositoryPipelineConfig",
            "summary": "Update the pipelines configuration for a repository.",
            "description": "Update the pipelines configuration for a repository.",
            "location": "Adapter",
            "locationType": "Bitbucket",
            "app": "Bitbucket",
            "type": "automatic",
            "displayName": "Bitbucket",
            "variables": {
              "incoming": {
                "username": "$var.job.url",
                "repoSlug": "$var.job.repoSlug",
                "body": {
                  "enabled": "true"
                },
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 2700,
              "y": 1000
            }
          },
          "f6ae": {
            "name": "getRepositoriesUsernameRepoSlugRefsBranchesName",
            "canvasName": "getRepositoriesUsernameRepoSlugRefsBranchesName",
            "summary": "Get target branch",
            "description": "",
            "location": "Adapter",
            "locationType": "Bitbucket",
            "app": "Bitbucket",
            "type": "automatic",
            "displayName": "Bitbucket",
            "variables": {
              "incoming": {
                "username": "$var.job.url",
                "name": "$var.job.targetBranch",
                "repoSlug": "$var.job.repoSlug",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 900,
              "y": 1500
            }
          },
          "4abc": {
            "name": "genericAdapterRequest",
            "canvasName": "genericAdapterRequest",
            "summary": "Get package.json",
            "description": "Makes the requested generic call",
            "location": "Adapter",
            "locationType": "Bitbucket",
            "app": "Bitbucket",
            "type": "automatic",
            "displayName": "Bitbucket",
            "variables": {
              "incoming": {
                "uriPath": "$var.966d.output",
                "restMethod": "GET",
                "queryData": "",
                "requestBody": "",
                "addlHeaders": "",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 1800,
              "y": 2100
            }
          },
          "966d": {
            "name": "makeData",
            "canvasName": "makeData",
            "summary": "create package.json URL",
            "description": "This task takes an input and converts it to a different data type. For example, converting a number into a string.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "input": "repositories/<!url!>/<!repoName!>/src/<!newBranchHash!>/package.json",
                "outputType": "string",
                "variables": "$var.9952.merged_object"
              },
              "outgoing": {
                "output": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 1800,
              "y": 1800
            }
          },
          "fa3f": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query version",
            "description": "Query version",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response.version",
                "obj": "$var.4abc.result"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 2400,
              "y": 2100
            }
          },
          "34e0": {
            "name": "renderJinjaTemplate",
            "canvasName": "renderJinjaTemplate",
            "summary": "Render Jinja Template",
            "description": "Renders jinja template output.",
            "location": "Application",
            "locationType": null,
            "app": "TemplateBuilder",
            "type": "automatic",
            "displayName": "TemplateBuilder",
            "variables": {
              "incoming": {
                "name": "BitbucketFilesToAddAndDelete",
                "context": "$var.8804.merged_object"
              },
              "outgoing": {
                "renderedTemplate": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 5400,
              "y": 1400
            }
          },
          "849f": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query Data Using 'json-query' Format",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "renderedTemplate",
                "obj": "$var.34e0.renderedTemplate"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 6000,
              "y": 1500
            }
          },
          "d648": {
            "name": "query",
            "canvasName": "query",
            "summary": "Get target branch hash",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response.target.hash",
                "obj": "$var.f6ae.result"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 1500,
              "y": 1500
            }
          },
          "64cf": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge All Data",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "hash",
                    "value": {
                      "task": "d648",
                      "variable": "return_data"
                    }
                  },
                  {
                    "key": "url",
                    "value": {
                      "task": "job",
                      "variable": "url"
                    }
                  },
                  {
                    "key": "branch",
                    "value": {
                      "task": "job",
                      "variable": "targetBranch"
                    }
                  },
                  {
                    "key": "repoName",
                    "value": {
                      "task": "job",
                      "variable": "repoSlug"
                    }
                  },
                  {
                    "key": "newBranch",
                    "value": {
                      "task": "job",
                      "variable": "mrBranchName",
                      "editable": true
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": 1800,
              "y": 1500
            }
          },
          "c447": {
            "name": "makeData",
            "canvasName": "makeData",
            "summary": "create refs/branches URL",
            "description": "This task takes an input and converts it to a different data type. For example, converting a number into a string.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "input": "repositories/<!url!>/<!repoName!>/refs/branches",
                "outputType": "string",
                "variables": "$var.64cf.merged_object"
              },
              "outgoing": {
                "output": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 2700,
              "y": 1500
            }
          },
          "ad01": {
            "name": "genericAdapterRequest",
            "canvasName": "genericAdapterRequest",
            "summary": "Create New Branch",
            "description": "Makes the requested generic call",
            "location": "Adapter",
            "locationType": "Bitbucket",
            "app": "Bitbucket",
            "type": "automatic",
            "displayName": "Bitbucket",
            "variables": {
              "incoming": {
                "uriPath": "$var.c447.output",
                "restMethod": "POST",
                "queryData": "",
                "requestBody": "$var.8128.output",
                "addlHeaders": "",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 3300,
              "y": 1500
            }
          },
          "21c9": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "deleteArray",
                "value": [
                  "manifest.json"
                ]
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": 3300,
              "y": 2100
            }
          },
          "bac1": {
            "name": "makeData",
            "canvasName": "makeData",
            "summary": "create branch/bundles URL",
            "description": "This task takes an input and converts it to a different data type. For example, converting a number into a string.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "input": "repositories/<!url!>/<!repoName!>/src/<!newBranchHash!>/bundles",
                "outputType": "string",
                "variables": "$var.9952.merged_object"
              },
              "outgoing": {
                "output": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 2700,
              "y": 1700
            }
          },
          "dbdf": {
            "name": "genericAdapterRequest",
            "canvasName": "genericAdapterRequest",
            "summary": "Get bundles file",
            "description": "Makes the requested generic call",
            "location": "Adapter",
            "locationType": "Bitbucket",
            "app": "Bitbucket",
            "type": "automatic",
            "displayName": "Bitbucket",
            "variables": {
              "incoming": {
                "uriPath": "$var.bac1.output",
                "restMethod": "GET",
                "queryData": "",
                "requestBody": "",
                "addlHeaders": "",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 3900,
              "y": 1500
            }
          },
          "df4d": {
            "name": "forEach",
            "canvasName": "forEach",
            "summary": "For Each Loop",
            "description": "Iterate over each item in an array",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_array": "$var.ad.return_data"
              },
              "outgoing": {
                "current_item": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 4800,
              "y": 1400
            }
          },
          "ad": {
            "name": "query",
            "canvasName": "query",
            "summary": "Get bundles paths",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response.values",
                "obj": "$var.dbdf.result"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 4500,
              "y": 1400
            }
          },
          "9b26": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query Data Using 'json-query' Format",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "path",
                "obj": "$var.df4d.current_item"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 4800,
              "y": 1700
            }
          },
          "5e8c": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge All Data",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "newBranchHash",
                    "value": {
                      "task": "e48f",
                      "variable": "return_data"
                    }
                  },
                  {
                    "key": "url",
                    "value": {
                      "task": "job",
                      "variable": "url"
                    }
                  },
                  {
                    "key": "repoName",
                    "value": {
                      "task": "job",
                      "variable": "repoSlug"
                    }
                  },
                  {
                    "key": "path",
                    "value": {
                      "task": "9b26",
                      "variable": "return_data"
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": 4800,
              "y": 1900
            }
          },
          "8e52": {
            "name": "makeData",
            "canvasName": "makeData",
            "summary": "create branch/path URL",
            "description": "This task takes an input and converts it to a different data type. For example, converting a number into a string.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "input": "repositories/<!url!>/<!repoName!>/src/<!newBranchHash!>/<!path!>",
                "outputType": "string",
                "variables": "$var.5e8c.merged_object"
              },
              "outgoing": {
                "output": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 4800,
              "y": 2200
            }
          },
          "1b2c": {
            "name": "genericAdapterRequest",
            "canvasName": "genericAdapterRequest",
            "summary": "Get sub file paths",
            "description": "Makes the requested generic call",
            "location": "Adapter",
            "locationType": "Bitbucket",
            "app": "Bitbucket",
            "type": "automatic",
            "displayName": "Bitbucket",
            "variables": {
              "incoming": {
                "uriPath": "$var.8e52.output",
                "restMethod": "GET",
                "queryData": "",
                "requestBody": "",
                "addlHeaders": "",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 4800,
              "y": 2600
            }
          },
          "162e": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query Data Using 'json-query' Format",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response.values[*].path",
                "obj": "$var.1b2c.result"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 4800,
              "y": 2800
            }
          },
          "e48f": {
            "name": "query",
            "canvasName": "query",
            "summary": "MR Branch ID",
            "description": "MR Branch ID",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response.target.hash",
                "obj": "$var.ad01.result"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 3300,
              "y": 1700
            }
          },
          "740d": {
            "name": "arrayConcat",
            "canvasName": "concat",
            "summary": "Concatenates arrays together.",
            "description": "Used to merge two arrays",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.job.deleteArray",
                "arrayN": "$var.162e.return_data"
              },
              "outgoing": {
                "combinedArray": "$var.job.deleteArray"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 4800,
              "y": 3100
            }
          },
          "4fff": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "Run Child Job",
            "description": "Runs a child job inside a workflow.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "Prebuilt Promotion Bitbucket Add Files",
                "variables": {},
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "deprecated": false,
            "groups": [],
            "actor": "job",
            "nodeLocation": {
              "x": 5100,
              "y": 1000
            }
          },
          "e7b7": {
            "name": "query",
            "canvasName": "query",
            "summary": "Get files to add",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "add",
                "obj": "$var.b0e.output"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 8700,
              "y": 1000
            }
          },
          "2f26": {
            "name": "makeData",
            "canvasName": "makeData",
            "summary": "Convert input into a different data type",
            "description": "This task takes an input and converts it to a different data type. For example, converting a number into a string.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "input": "$var.849f.return_data",
                "outputType": "json",
                "variables": ""
              },
              "outgoing": {
                "output": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 6300,
              "y": 1500
            }
          },
          "ca48": {
            "name": "query",
            "canvasName": "query",
            "summary": "Files to Delete",
            "description": "Files to Delete",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "delete",
                "obj": "$var.2f26.output"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 6900,
              "y": 1500
            }
          },
          "f5a9": {
            "name": "postRepositoriesUsernameRepoSlugSrc",
            "canvasName": "postRepositoriesUsernameRepoSlugSrc",
            "summary": "Updates repository",
            "description": "Creates a new repository.\nNote: In order to set the project for the newly created repository,\npass in either the project key or the project UUID as part of the\nrequest body as shown in the examples below:\n```\n$ curl -X POST -H \"Content-Type: application/json\" -d '{\n    \"scm\": \"git\",\n    \"project\": {\n        \"key\": \"MARS\"\n    }\n}' https://api.bitbucket.org/2.0/repositories/teamsinspace/hablanding\n```\nor\n```\n$ curl -X POST -H \"Content-Type: application/json\" -d '{\n    \"scm\": \"git\",\n    \"project\": ...(description truncated)",
            "location": "Adapter",
            "locationType": "Bitbucket",
            "app": "Bitbucket",
            "type": "automatic",
            "displayName": "Bitbucket",
            "variables": {
              "incoming": {
                "username": "$var.job.url",
                "repoSlug": "$var.job.repoSlug",
                "body": "$var.ca7.merged_object",
                "filename": "",
                "attribute": "",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 7200,
              "y": 2100
            }
          },
          "ca7": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge Data",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "files",
                    "value": {
                      "task": "1364",
                      "variable": "current_item"
                    }
                  },
                  {
                    "key": "branch",
                    "value": {
                      "task": "job",
                      "variable": "mrBranchName",
                      "editable": true
                    }
                  },
                  {
                    "key": "message",
                    "value": {
                      "task": "static",
                      "variable": "[skip ci]",
                      "editable": true
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": 7200,
              "y": 1800
            }
          },
          "d0d9": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query Data Using 'json-query' Format",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "add",
                "obj": "$var.2f26.output"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 7500,
              "y": 1500
            }
          },
          "3a0e": {
            "name": "postRepositoriesUsernameRepoSlugSrc",
            "canvasName": "postRepositoriesUsernameRepoSlugSrc",
            "summary": "Updates repository",
            "description": "Creates a new repository.\nNote: In order to set the project for the newly created repository,\npass in either the project key or the project UUID as part of the\nrequest body as shown in the examples below:\n```\n$ curl -X POST -H \"Content-Type: application/json\" -d '{\n    \"scm\": \"git\",\n    \"project\": {\n        \"key\": \"MARS\"\n    }\n}' https://api.bitbucket.org/2.0/repositories/teamsinspace/hablanding\n```\nor\n```\n$ curl -X POST -H \"Content-Type: application/json\" -d '{\n    \"scm\": \"git\",\n    \"project\": ...(description truncated)",
            "location": "Adapter",
            "locationType": "Bitbucket",
            "app": "Bitbucket",
            "type": "automatic",
            "displayName": "Bitbucket",
            "variables": {
              "incoming": {
                "username": "$var.job.url",
                "repoSlug": "$var.job.repoSlug",
                "body": "$var.d0d9.return_data",
                "filename": "",
                "attribute": "",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 8400,
              "y": 1500
            }
          },
          "958b": {
            "name": "toLowerCase",
            "canvasName": "toLowerCase",
            "summary": "Converts a string to lower case.",
            "description": "Returns the calling string value converted to lower case.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "String",
            "variables": {
              "incoming": {
                "str": "$var.job.repoName"
              },
              "outgoing": {
                "lowercaseString": "$var.job.repoSlug"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": -2100,
              "y": 1200
            }
          },
          "ca57": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge Data",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "project",
                    "value": {
                      "task": "92e1",
                      "variable": "merged_object"
                    }
                  },
                  {
                    "key": "is_private",
                    "value": {
                      "task": "static",
                      "variable": true
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "task": "job",
                      "variable": "repoName"
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": 900,
              "y": 1100
            }
          },
          "78f": {
            "name": "postRepositoriesUsernameRepoSlugPullrequests",
            "canvasName": "postRepositoriesUsernameRepoSlugPullrequests",
            "summary": "Creates a new pull request.",
            "description": "Creates a new pull request.",
            "location": "Adapter",
            "locationType": "Bitbucket",
            "app": "Bitbucket",
            "type": "automatic",
            "displayName": "Bitbucket",
            "variables": {
              "incoming": {
                "username": "$var.job.url",
                "repoSlug": "$var.job.repoSlug",
                "body": "$var.99d2.output",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 11700,
              "y": 1500
            }
          },
          "efef": {
            "name": "stringConcat",
            "canvasName": "concat",
            "summary": "Merge request description",
            "description": "Merge request description",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "String",
            "variables": {
              "incoming": {
                "str": "Merge request created by:",
                "stringN": "$var.job.username"
              },
              "outgoing": {
                "combinedStrings": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 9300,
              "y": 1500
            }
          },
          "d335": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge Data",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "description",
                    "value": {
                      "task": "efef",
                      "variable": "combinedStrings"
                    }
                  },
                  {
                    "key": "targetBranch",
                    "value": {
                      "task": "job",
                      "variable": "targetBranch"
                    }
                  },
                  {
                    "key": "branchName",
                    "value": {
                      "task": "job",
                      "variable": "mrBranchName",
                      "editable": true
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": 9600,
              "y": 1500
            }
          },
          "d1f9": {
            "name": "makeData",
            "canvasName": "makeData",
            "summary": "Convert input into a different data type",
            "description": "This task takes an input and converts it to a different data type. For example, converting a number into a string.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "input": {
                  "title": "<!branchName!>",
                  "description": "<!description!>",
                  "source": {
                    "branch": {
                      "name": "<!branchName!>"
                    }
                  },
                  "destination": {
                    "branch": {
                      "name": "<!targetBranch!>"
                    }
                  }
                },
                "outputType": "string",
                "variables": "$var.d335.merged_object"
              },
              "outgoing": {
                "output": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 10200,
              "y": 1600
            }
          },
          "5fbd": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "updatePackageJSONGitlab",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "6075bc6c8c016f0098c7283f",
                "variableMap": {
                  "filesArray": "$var.job.artifact",
                  "packageJsonName": "$var.job.packageJsonName",
                  "packageJsonVersion": "$var.fa3f.return_data"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "fixedArray": null
              }
            },
            "deprecated": false,
            "groups": [],
            "task_name": "updatePackageJSONGitlab",
            "retrySettings": null,
            "nodeLocation": {
              "x": 2700,
              "y": 2100
            }
          },
          "7f3a": {
            "name": "query",
            "canvasName": "query",
            "summary": "Get Update",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "update",
                "obj": "$var.job.artifact"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": -1500,
              "y": 1200
            }
          },
          "b3c1": {
            "name": "arrayConcat",
            "canvasName": "concat",
            "summary": "Concatenates arrays together.",
            "description": "Used to merge two arrays",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.7f3a.return_data",
                "arrayN": "$var.b561.return_data"
              },
              "outgoing": {
                "combinedArray": "$var.job.artifact"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": -900,
              "y": 1200
            }
          },
          "b561": {
            "name": "query",
            "canvasName": "query",
            "summary": "Get Create",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "create",
                "obj": "$var.job.artifact"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": -1500,
              "y": 1200
            }
          },
          "7ccf": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "updatePackageJSONGitlab",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "6075bc6c8c016f0098c7283f",
                "variableMap": {
                  "filesArray": "$var.job.artifact",
                  "packageJsonName": "$var.job.packageJsonName",
                  "packageJsonVersion": "0.0.1"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "fixedArray": null
              }
            },
            "deprecated": false,
            "groups": [],
            "task_name": "updatePackageJSONGitlab",
            "retrySettings": null,
            "nodeLocation": {
              "x": 6000,
              "y": 1000
            }
          },
          "99d2": {
            "name": "makeData",
            "canvasName": "makeData",
            "summary": "Convert MR body to JSON",
            "description": "This task takes an input and converts it to a different data type. For example, converting a number into a string.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "input": "$var.d1f9.output",
                "outputType": "json",
                "variables": ""
              },
              "outgoing": {
                "output": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 10800,
              "y": 1600
            }
          },
          "99b7": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Run Evaluation Task",
            "description": "Run an evaluation",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "projectPath",
                          "task": "job",
                          "editable": true
                        },
                        "operator": "contains",
                        "operand_2": {
                          "variable": "none",
                          "task": "static"
                        }
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": 600,
              "y": 900
            }
          },
          "92e1": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge Data",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "key",
                    "value": {
                      "task": "job",
                      "variable": "projectPath",
                      "editable": true
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": 900,
              "y": 800
            }
          },
          "3bbf": {
            "name": "ViewData",
            "canvasName": "ViewData",
            "summary": "Failed to create merge request",
            "description": "Displays a message and runtime data to an operator. This can be used to request a decision, or used for acknowledgement only.",
            "location": "Application",
            "app": "WorkFlowEngine",
            "displayName": "Tools",
            "type": "manual",
            "variables": {
              "incoming": {
                "header": "Failed",
                "message": "Failed to create merge request",
                "body": "Try again?",
                "variables": {},
                "btn_success": "Try again",
                "btn_failure": "Cancel job"
              },
              "outgoing": {},
              "error": "",
              "decorators": []
            },
            "view": "/workflow_engine/task/ViewData",
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 12000,
              "y": 2000
            }
          },
          "b645": {
            "name": "iapRunAdapterHealthcheck",
            "canvasName": "iapRunAdapterHealthcheck",
            "summary": "Runs healthcheck script for adapter",
            "description": "Runs healthcheck script for adapter",
            "location": "Adapter",
            "locationType": "Bitbucket",
            "app": "Bitbucket",
            "type": "automatic",
            "displayName": "Bitbucket",
            "variables": {
              "incoming": {
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": -3300,
              "y": 1200
            }
          }
        },
        "transitions": {
          "592": {},
          "985": {},
          "1364": {
            "ca7": {
              "type": "standard",
              "state": "loop"
            },
            "d0d9": {
              "type": "standard",
              "state": "success"
            }
          },
          "1801": {
            "9956": {
              "type": "standard",
              "state": "success"
            }
          },
          "2890": {},
          "5168": {
            "5a9c": {
              "type": "standard",
              "state": "success"
            }
          },
          "6114": {
            "3b3e": {
              "type": "standard",
              "state": "failure"
            },
            "a33f": {
              "type": "standard",
              "state": "success"
            }
          },
          "7385": {},
          "7885": {
            "cf1d": {
              "type": "standard",
              "state": "success"
            }
          },
          "8128": {
            "c447": {
              "type": "standard",
              "state": "success"
            }
          },
          "8804": {
            "34e0": {
              "type": "standard",
              "state": "success"
            }
          },
          "8941": {
            "3a0e": {
              "type": "revert",
              "state": "success"
            },
            "workflow_end": {
              "type": "standard",
              "state": "failure"
            }
          },
          "9556": {},
          "9952": {
            "bac1": {
              "type": "standard",
              "state": "success"
            }
          },
          "9956": {
            "6114": {
              "type": "standard",
              "state": "error"
            },
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_start": {
            "b645": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "fa4d": {},
          "190d": {
            "5a9c": {
              "type": "standard",
              "state": "success"
            }
          },
          "cfa6": {
            "5a9c": {
              "type": "standard",
              "state": "success"
            }
          },
          "5a9c": {
            "4fff": {
              "type": "standard",
              "state": "success"
            }
          },
          "3b3e": {
            "workflow_end": {
              "type": "standard",
              "state": "failure"
            },
            "e7b7": {
              "type": "revert",
              "state": "success"
            }
          },
          "583c": {},
          "ba52": {},
          "38fc": {
            "workflow_end": {
              "type": "standard",
              "state": "failure"
            },
            "b247": {
              "type": "revert",
              "state": "success"
            }
          },
          "c60": {},
          "af69": {},
          "683e": {},
          "2c42": {},
          "33ba": {},
          "1fc1": {},
          "40bf": {},
          "80b1": {},
          "ae5b": {},
          "5a0d": {},
          "a613": {},
          "a161": {},
          "a33f": {
            "1801": {
              "type": "revert",
              "state": "success"
            }
          },
          "36fe": {},
          "da5e": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "1f81": {
            "3fa0": {
              "type": "standard",
              "state": "failure"
            },
            "958b": {
              "type": "standard",
              "state": "success"
            }
          },
          "3fa0": {
            "workflow_end": {
              "type": "standard",
              "state": "failure"
            },
            "b645": {
              "type": "revert",
              "state": "success"
            }
          },
          "a7fe": {
            "f6ae": {
              "type": "standard",
              "state": "success"
            },
            "99b7": {
              "type": "standard",
              "state": "error"
            }
          },
          "cf1d": {
            "b0e": {
              "type": "standard",
              "state": "success"
            }
          },
          "b0e": {
            "e7b7": {
              "type": "standard",
              "state": "success"
            }
          },
          "b247": {
            "38fc": {
              "type": "standard",
              "state": "error"
            },
            "a332": {
              "type": "standard",
              "state": "success"
            }
          },
          "5bbc": {
            "7885": {
              "type": "standard",
              "state": "success"
            }
          },
          "da92": {
            "1801": {
              "type": "standard",
              "state": "success"
            }
          },
          "a332": {
            "5168": {
              "type": "standard",
              "state": "success"
            },
            "190d": {
              "type": "standard",
              "state": "success"
            },
            "cfa6": {
              "type": "standard",
              "state": "success"
            }
          },
          "f6ae": {
            "da5e": {
              "type": "standard",
              "state": "error"
            },
            "d648": {
              "type": "standard",
              "state": "success"
            }
          },
          "503c": {},
          "974d": {},
          "c3a": {},
          "4abc": {
            "fa3f": {
              "type": "standard",
              "state": "success"
            }
          },
          "966d": {
            "4abc": {
              "type": "standard",
              "state": "success"
            }
          },
          "fa3f": {
            "5fbd": {
              "type": "standard",
              "state": "success"
            }
          },
          "34e0": {
            "849f": {
              "type": "standard",
              "state": "success"
            }
          },
          "849f": {
            "2f26": {
              "type": "standard",
              "state": "success"
            }
          },
          "22ec": {},
          "d648": {
            "64cf": {
              "type": "standard",
              "state": "success"
            }
          },
          "64cf": {
            "8128": {
              "type": "standard",
              "state": "success"
            }
          },
          "c447": {
            "ad01": {
              "type": "standard",
              "state": "success"
            }
          },
          "ad01": {
            "e48f": {
              "type": "standard",
              "state": "success"
            }
          },
          "21c9": {
            "dbdf": {
              "type": "standard",
              "state": "success"
            }
          },
          "bac1": {
            "966d": {
              "type": "standard",
              "state": "success"
            }
          },
          "dbdf": {
            "ad": {
              "type": "standard",
              "state": "success"
            }
          },
          "df4d": {
            "8804": {
              "type": "standard",
              "state": "success"
            },
            "9b26": {
              "type": "standard",
              "state": "loop"
            }
          },
          "ad": {
            "df4d": {
              "type": "standard",
              "state": "success"
            }
          },
          "9b26": {
            "5e8c": {
              "type": "standard",
              "state": "success"
            }
          },
          "5e8c": {
            "8e52": {
              "type": "standard",
              "state": "success"
            }
          },
          "8e52": {
            "1b2c": {
              "type": "standard",
              "state": "success"
            }
          },
          "1b2c": {
            "162e": {
              "type": "standard",
              "state": "success"
            }
          },
          "162e": {
            "740d": {
              "type": "standard",
              "state": "success"
            }
          },
          "e48f": {
            "9952": {
              "type": "standard",
              "state": "success"
            }
          },
          "740d": {},
          "4fff": {
            "7ccf": {
              "type": "standard",
              "state": "success"
            }
          },
          "e7b7": {
            "da92": {
              "type": "standard",
              "state": "success"
            }
          },
          "2f26": {
            "ca48": {
              "type": "standard",
              "state": "success"
            }
          },
          "ca48": {
            "1364": {
              "type": "standard",
              "state": "success"
            }
          },
          "f5a9": {},
          "ca7": {
            "f5a9": {
              "type": "standard",
              "state": "success"
            }
          },
          "d0d9": {
            "3a0e": {
              "type": "standard",
              "state": "success"
            }
          },
          "3a0e": {
            "8941": {
              "type": "standard",
              "state": "error"
            },
            "efef": {
              "type": "standard",
              "state": "success"
            }
          },
          "958b": {
            "7f3a": {
              "type": "standard",
              "state": "success"
            }
          },
          "ca57": {
            "b247": {
              "type": "standard",
              "state": "success"
            }
          },
          "78f": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            },
            "3bbf": {
              "type": "standard",
              "state": "error"
            }
          },
          "efef": {
            "d335": {
              "type": "standard",
              "state": "success"
            }
          },
          "d335": {
            "d1f9": {
              "type": "standard",
              "state": "success"
            }
          },
          "d1f9": {
            "99d2": {
              "type": "standard",
              "state": "success"
            }
          },
          "5fbd": {
            "21c9": {
              "type": "standard",
              "state": "success"
            }
          },
          "7f3a": {
            "b561": {
              "type": "standard",
              "state": "success"
            }
          },
          "b3c1": {
            "a7fe": {
              "type": "standard",
              "state": "success"
            }
          },
          "b561": {
            "b3c1": {
              "type": "standard",
              "state": "success"
            }
          },
          "7ccf": {
            "5bbc": {
              "type": "standard",
              "state": "success"
            }
          },
          "99d2": {
            "78f": {
              "type": "standard",
              "state": "success"
            }
          },
          "99b7": {
            "ca57": {
              "type": "standard",
              "state": "success"
            },
            "92e1": {
              "type": "standard",
              "state": "failure"
            }
          },
          "990c": {},
          "8d21": {},
          "92e1": {
            "ca57": {
              "type": "standard",
              "state": "success"
            }
          },
          "3bbf": {
            "78f": {
              "type": "revert",
              "state": "success"
            },
            "workflow_end": {
              "type": "standard",
              "state": "failure"
            }
          },
          "b645": {
            "1f81": {
              "type": "standard",
              "state": "success"
            }
          }
        },
        "type": "automation",
        "canvasVersion": 3,
        "tags": [],
        "groups": [],
        "migrationVersion": 4
      }
    },
    {
      "type": "workflow",
      "data": {
        "name": "Prebuilt Promotion Github Create Link",
        "tasks": {
          "3353": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "Create new Branch",
            "description": "Runs a child job inside a workflow.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "Prebuilt Promotion Github Create Branch",
                "variables": {
                  "owner": {
                    "editable": true,
                    "task": "job",
                    "value": "OrganizationName"
                  },
                  "repo": {
                    "editable": true,
                    "task": "job",
                    "value": "ProjectName"
                  },
                  "Targetbranch": {
                    "editable": true,
                    "task": "job",
                    "value": "TargetBranch"
                  },
                  "adapter_id": {
                    "editable": true,
                    "task": "job",
                    "value": "adapter_id"
                  },
                  "MRType": {
                    "editable": true,
                    "task": "job",
                    "value": "MRType"
                  }
                },
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "groups": [],
            "actor": "job",
            "nodeLocation": {
              "x": 5400,
              "y": 1100
            }
          },
          "5153": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Check if organization and project exist in GitHub",
            "description": "Check if organization and project exist in GitHub",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "repo",
                        "operand_1": {
                          "variable": "job_details",
                          "task": "ac6c"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": true,
                          "task": "static"
                        }
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 5400,
              "y": 1500
            }
          },
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "nodeLocation": {
              "x": 600,
              "y": 1800
            }
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "nodeLocation": {
              "x": 8700,
              "y": 1900
            }
          },
          "fb6e": {
            "name": "postOrgsOrgRepos",
            "canvasName": "postOrgsOrgRepos",
            "summary": "Create a new repository for the authenticated user. OAuth users must supply\nrepo scope.",
            "description": "Create a new repository for the authenticated user. OAuth users must supply\nrepo scope.",
            "location": "Adapter",
            "locationType": "GitHub",
            "app": "GitHub",
            "type": "automatic",
            "displayName": "GitHub",
            "variables": {
              "incoming": {
                "org": "$var.job.OrganizationName",
                "body": "$var.b761.merged_object",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 6600,
              "y": 1500
            }
          },
          "fb27": {
            "name": "query",
            "canvasName": "query",
            "summary": "get new Branch name",
            "description": "Get newly created branch name",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "MRPayload.head",
                "obj": "$var.3353.job_details"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 6000,
              "y": 1100
            }
          },
          "6a7d": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "Creates commit in GitHub",
            "description": "Creates commit and updates head pointer to reference latest commit",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "Prebuilt Promotion Github New Commit",
                "variables": {
                  "artifact_array": {
                    "editable": true,
                    "task": "5d82",
                    "value": "createFiles"
                  },
                  "owner": {
                    "editable": true,
                    "task": "job",
                    "value": "OrganizationName"
                  },
                  "repo": {
                    "editable": true,
                    "task": "job",
                    "value": "ProjectName"
                  },
                  "adapter_id": {
                    "editable": true,
                    "task": "job",
                    "value": "adapter_id"
                  },
                  "commitMessage": {
                    "editable": true,
                    "task": "job",
                    "value": "commitMessage"
                  },
                  "branch": {
                    "editable": true,
                    "task": "fb27",
                    "value": "return_data"
                  }
                },
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "groups": [],
            "actor": "job",
            "nodeLocation": {
              "x": 7200,
              "y": 1100
            }
          },
          "870c": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Check if organization or project do not exist in GitHub",
            "description": "Check if organization or project do not exist in GitHub",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "failed",
                        "operand_1": {
                          "variable": "job_details",
                          "task": "ac6c"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": false,
                          "task": "static"
                        }
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 5400,
              "y": 1900
            }
          },
          "ac6c": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "Check if organization and repository exist in GitHub",
            "description": "Check if organization and repository exist in GitHub",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "Prebuilt Promotion Github Check OrgRepo",
                "variables": {
                  "org": {
                    "editable": true,
                    "task": "job",
                    "value": "OrganizationName"
                  },
                  "adapter_id": {
                    "editable": true,
                    "task": "job",
                    "value": "adapter_id"
                  },
                  "repoName": {
                    "editable": true,
                    "task": "job",
                    "value": "ProjectName"
                  }
                },
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "groups": [],
            "actor": "job",
            "nodeLocation": {
              "x": 4500,
              "y": 1900
            }
          },
          "c9a5": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "Github Add Files",
            "description": "Runs a child job inside a workflow.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "Prebuilt Promotion Github Add Files",
                "variables": {
                  "packageJsonName": {
                    "editable": true,
                    "task": "job",
                    "value": "packageJsonName"
                  },
                  "artifact": {
                    "editable": true,
                    "task": "job",
                    "value": "artifact"
                  }
                },
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "groups": [],
            "actor": "job",
            "nodeLocation": {
              "x": 3000,
              "y": 1800
            }
          },
          "b64f": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query pushedArray",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "pushedArray",
                "obj": "$var.c9a5.job_details"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 3900,
              "y": 1800
            }
          },
          "b761": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge new Repo body",
            "description": "Merge new Repo body",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "name",
                    "value": {
                      "task": "job",
                      "variable": "ProjectName",
                      "editable": true
                    }
                  },
                  {
                    "key": "auto_init",
                    "value": {
                      "task": "static",
                      "variable": true
                    }
                  },
                  {
                    "key": "private",
                    "value": {
                      "task": "job",
                      "variable": "privateRepo",
                      "editable": true
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 5700,
              "y": 1500
            }
          },
          "5b2f": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "Create New Repo",
            "description": "Runs a child job inside a workflow.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "Prebuilt Promotion Github New Commit",
                "variables": {
                  "artifact_array": {
                    "editable": true,
                    "task": "b64f",
                    "value": "return_data"
                  },
                  "owner": {
                    "editable": true,
                    "task": "job",
                    "value": "OrganizationName"
                  },
                  "repo": {
                    "editable": true,
                    "task": "job",
                    "value": "ProjectName"
                  },
                  "adapter_id": {
                    "editable": true,
                    "task": "job",
                    "value": "adapter_id"
                  },
                  "commitMessage": {
                    "editable": true,
                    "task": "job",
                    "value": "commitMessage"
                  },
                  "branch": {
                    "editable": true,
                    "task": "static",
                    "value": "main"
                  }
                },
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "groups": [],
            "actor": "job",
            "nodeLocation": {
              "x": 8100,
              "y": 1500
            }
          },
          "41f6": {
            "name": "postReposOwnerRepoPulls",
            "canvasName": "postReposOwnerRepoPulls",
            "summary": "Create a pull request.",
            "description": "Create a pull request.",
            "location": "Adapter",
            "locationType": "GitHub",
            "app": "GitHub",
            "type": "automatic",
            "displayName": "GitHub",
            "variables": {
              "incoming": {
                "owner": "$var.job.OrganizationName",
                "repo": "$var.job.ProjectName",
                "body": "$var.504d.return_data",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 8700,
              "y": 1200
            }
          },
          "504d": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query MR payload",
            "description": "Query the MR payload",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "MRPayload",
                "obj": "$var.3353.job_details"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 7800,
              "y": 1100
            }
          },
          "5d82": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "Filters files to commit to GitHub to only be of method \"create\"",
            "description": "Filters files to commit to GitHub to only be of method \"create\"",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "6287f3480f8090010e7a4b89",
                "variableMap": {
                  "artifactArray": "$var.b64f.return_data",
                  "addRepositoryDependencyFiles": "$var.job.addRepositoryDependencyFiles"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "createFiles": null
              },
              "decorators": []
            },
            "groups": [],
            "task_name": "filterArtifactArrayToOnlyCreateFiles",
            "retrySettings": null,
            "nodeLocation": {
              "x": 6300,
              "y": 1100
            }
          },
          "a67d": {
            "name": "iapRunAdapterHealthcheck",
            "canvasName": "iapRunAdapterHealthcheck",
            "summary": "Runs healthcheck script for adapter",
            "description": "Runs healthcheck script for adapter",
            "location": "Adapter",
            "locationType": "GitHub",
            "app": "GitHub",
            "type": "automatic",
            "displayName": "GitHub",
            "variables": {
              "incoming": {
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 1200,
              "y": 1956
            }
          },
          "30ed": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Run Evaluation Task",
            "description": "Run an evaluation",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "result",
                          "task": "a67d"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": true,
                          "task": "static"
                        }
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 2100,
              "y": 1800
            }
          },
          "9c71": {
            "name": "ViewData",
            "canvasName": "ViewData",
            "summary": "View Data",
            "description": "Displays a message and runtime data to an operator. This can be used to request a decision, or used for acknowledgement only.",
            "location": "Application",
            "app": "WorkFlowEngine",
            "displayName": "Tools",
            "type": "manual",
            "variables": {
              "incoming": {
                "header": "Adapter Healthcheck Failed",
                "message": "Failed to connect to Github adapter. Make sure your adapter is online.",
                "body": "Try again?",
                "variables": "",
                "btn_success": "Try Again",
                "btn_failure": "Cancel Job"
              },
              "outgoing": {},
              "error": "",
              "decorators": []
            },
            "view": "/workflow_engine/task/ViewData",
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 2100,
              "y": 2200
            }
          }
        },
        "transitions": {
          "3353": {
            "fb27": {
              "type": "standard",
              "state": "success"
            }
          },
          "5153": {
            "3353": {
              "type": "standard",
              "state": "success"
            },
            "b761": {
              "type": "standard",
              "state": "failure"
            }
          },
          "workflow_start": {
            "a67d": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "fb6e": {
            "5b2f": {
              "type": "standard",
              "state": "success"
            }
          },
          "fb27": {
            "5d82": {
              "type": "standard",
              "state": "success"
            }
          },
          "6a7d": {
            "504d": {
              "type": "standard",
              "state": "success"
            }
          },
          "870c": {
            "5153": {
              "type": "standard",
              "state": "success"
            },
            "workflow_end": {
              "type": "standard",
              "state": "failure"
            }
          },
          "ac6c": {
            "870c": {
              "type": "standard",
              "state": "success"
            }
          },
          "c9a5": {
            "b64f": {
              "type": "standard",
              "state": "success"
            }
          },
          "b64f": {
            "ac6c": {
              "type": "standard",
              "state": "success"
            }
          },
          "b761": {
            "fb6e": {
              "type": "standard",
              "state": "success"
            }
          },
          "5b2f": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "41f6": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "504d": {
            "41f6": {
              "type": "standard",
              "state": "success"
            }
          },
          "5d82": {
            "6a7d": {
              "type": "standard",
              "state": "success"
            }
          },
          "a67d": {
            "30ed": {
              "type": "standard",
              "state": "success"
            }
          },
          "30ed": {
            "c9a5": {
              "type": "standard",
              "state": "success"
            },
            "9c71": {
              "type": "standard",
              "state": "failure"
            }
          },
          "9c71": {
            "a67d": {
              "type": "revert",
              "state": "success"
            },
            "workflow_end": {
              "type": "standard",
              "state": "failure"
            }
          },
          "72a1": {},
          "146c": {},
          "b67f": {},
          "feed": {},
          "8c95": {}
        },
        "inputSchema": {
          "type": "object",
          "properties": {
            "OrganizationName": {
              "title": "owner",
              "type": "string"
            },
            "ProjectName": {
              "title": "repo",
              "type": "string"
            },
            "TargetBranch": {
              "title": "branch",
              "type": "string"
            },
            "adapter_id": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "MRType": {
              "title": "str",
              "type": "string",
              "examples": [
                "Hello"
              ]
            },
            "commitMessage": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "packageJsonName": {
              "type": "string",
              "examples": [
                "sdfsa"
              ]
            },
            "artifact": {
              "title": "obj",
              "type": "object",
              "properties": {},
              "examples": [
                {
                  "name": "value"
                }
              ]
            },
            "privateRepo": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "addRepositoryDependencyFiles": {
              "type": "string",
              "examples": []
            }
          },
          "required": [
            "OrganizationName",
            "ProjectName",
            "TargetBranch",
            "adapter_id",
            "MRType",
            "commitMessage",
            "packageJsonName",
            "artifact",
            "privateRepo",
            "addRepositoryDependencyFiles"
          ]
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "OrganizationName": {
              "title": "owner",
              "type": "string"
            },
            "ProjectName": {
              "title": "repo",
              "type": "string"
            },
            "TargetBranch": {
              "title": "branch",
              "type": "string"
            },
            "adapter_id": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "MRType": {
              "title": "str",
              "type": "string",
              "examples": [
                "Hello"
              ]
            },
            "commitMessage": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "packageJsonName": {
              "type": "string",
              "examples": [
                "sdfsa"
              ]
            },
            "artifact": {
              "title": "obj",
              "type": "object",
              "properties": {},
              "examples": [
                {
                  "name": "value"
                }
              ]
            },
            "privateRepo": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "addRepositoryDependencyFiles": {
              "type": "string",
              "examples": []
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            }
          }
        },
        "created": "2022-04-27T20:22:06.363Z",
        "createdVersion": "5.40.5-2021.1.72.0",
        "created_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {}
        },
        "font_size": 12,
        "lastUpdatedVersion": "5.55.2-2023.2.14",
        "last_updated": "2025-02-07T18:10:23.174Z",
        "last_updated_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {}
        },
        "type": "automation",
        "canvasVersion": 3,
        "tags": [],
        "groups": [],
        "migrationVersion": 4
      }
    },
    {
      "type": "workflow",
      "data": {
        "created": "2022-02-24T19:17:05.462Z",
        "createdVersion": "5.40.5-2021.1.52.0",
        "created_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {}
        },
        "description": "",
        "font_size": 12,
        "inputSchema": {
          "type": "object",
          "properties": {}
        },
        "lastUpdatedVersion": "4.69.3-2023.2.129",
        "last_updated": "2025-02-06T18:32:42.414Z",
        "last_updated_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {}
        },
        "name": "Prebuilt Promotion Gitlab Add Files",
        "outputSchema": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            },
            "scriptFiles": {
              "title": "pushedArray",
              "type": "array",
              "items": [
                {
                  "type": [
                    "string",
                    "number",
                    "integer",
                    "object",
                    "array",
                    "boolean",
                    "null"
                  ]
                }
              ],
              "examples": [
                [
                  "Device1",
                  "Device2",
                  "Device3"
                ]
              ]
            },
            "testFiles": {
              "title": "pushedArray",
              "type": "array",
              "items": [
                {
                  "type": [
                    "string",
                    "number",
                    "integer",
                    "object",
                    "array",
                    "boolean",
                    "null"
                  ]
                }
              ],
              "examples": [
                [
                  "Device1",
                  "Device2",
                  "Device3"
                ]
              ]
            }
          }
        },
        "preAutomationTime": 0,
        "sla": 0,
        "tasks": {
          "866": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "Set commit.sh file content",
            "description": "Set commit.sh file content",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "name": "commit.sh"
                },
                "path": [
                  "content"
                ],
                "value": "if ! sh ./scripts/git_setup.sh; then\n  exit 1\nfi\necho \"GITLAB PROJECT ID IS - $CI_PROJECT_ID\"\ncd scripts\nGENERATE=`node generate $CI_PROJECT_ID $CI_PROJECT_URL $CI_COMMIT_REF_NAME`\nif [ $? -ne 0 ]\nthen \n  echo $GENERATE\n  exit 1\nfi\ncd ..\ngit add artifact.json\ngit diff --cached --name-only | if grep artifact.json\nthen\n    git commit -m \"AUTO-GENERATED FILE [skip ci]\"\n    if ! git push origin \"$CI_COMMIT_REF_NAME\"; then\n      echo -e \"\\033[0;31mERROR: ***********************************************************************************\"\n      echo \"ERROR: There was an issue pushing artifact.json.\"\n      echo -e \"ERROR: ***********************************************************************************\\033[0m\"\n      exit 1\n    else\n      echo \"A new generated artifact.json file has been checked in to current branch\"\n    fi   \nelse\n    echo \"artifact.json file hasn't changed\"\nfi\n"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 2400,
              "y": 400
            }
          },
          "1649": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Append generate.js",
            "description": "Append generate.js",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": [],
                "elementN": "$var.e474.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 1800,
              "y": 800
            }
          },
          "2331": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Append deploy_artifact.sh",
            "description": "Append deploy_artifact.sh",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.3d5d.pushedArray",
                "elementN": "$var.6194.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 4500,
              "y": 800
            }
          },
          "3853": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "Set create_release_script.sh file content",
            "description": "Set create_release_script.sh file content",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "name": "create_release_script.sh"
                },
                "path": [
                  "content"
                ],
                "value": "#!/bin/bash\n#---------------------#\n# Create release note #\n#---------------------#\n\nNEW_VERSION=$1\n\ncreate_release_note() {\n    # Create a changelog file if there isn't one\n    if [ ! -e CHANGELOG.md ]; then\n        touch CHANGELOG.md\n    fi\n    echo \"Creating release note...\"\n\n    #----------------#\n    # Changelog Body #\n    #----------------#\n    # Get the merge request info\n    CHANGELOG_BODY=\"$(git log --merges -1 --format=%b)\"\n    if [ -z \"$CHANGELOG_BODY\" ]; then\n        CHANGELOG_BODY=\"$(git log -1 --format='Bug fixes and performance improvements'%n%n'See commit '%h)\"\n    fi\n    #--------------------#\n    # Write Release Note #\n    #--------------------#\n\n    # get the current date\n    DATE=$(date +%m-%d-%Y)\n    # create the release note\n    RELEASE_NOTE=\"\\\\n## $NEW_VERSION [$DATE]\\\\n\\\\n* $CHANGELOG_BODY\\\\n\\\\n---\\\\n\"\n    # append Release Note to Top of CHANGELOG\n    if ! echo -e \"$RELEASE_NOTE$(cat CHANGELOG.md)\" > CHANGELOG.md; then\n        echo -e \"\\033[0;31mERROR: ***********************************************************************************\"\n        echo \"ERROR: Unable to append release note information to changelog.\"\n        echo -e \"ERROR: ***********************************************************************************\\033[0m\"\n    else\n        echo \"Created release note:\"\n        echo \"$RELEASE_NOTE\"\n    fi\n}\n\ncreate_release_note \"$NEW_VERSION\""
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 3300,
              "y": 400
            }
          },
          "5820": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Append manifest-schema.json",
            "description": "Append manifest-schema.json",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": [],
                "elementN": "$var.7019.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 9600,
              "y": 800
            }
          },
          "6194": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "Set deploy_artifact.sh file content",
            "description": "Set deploy_artifact.sh file content",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "name": "deploy_artifact.sh"
                },
                "path": [
                  "content"
                ],
                "value": "#!/bin/bash\n\n# import the artifact\nARTIFACT=$(cat artifact.json)\n# echo $ARTIFACT\n\n# generate IAP token\nTOKEN=$(curl --silent --location --request POST 'http://localhost:3000/login' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"user\":{\n        \"username\" : \"admin@pronghorn\",\n        \"password\" : \"admin\"\n    }\n}')\n\nnode createPayload\n\nCREATE_RESP=$(curl --silent --location --request POST 'http://localhost:3000/prebuilts/import' \\\n--header 'Content-Type: application/json' \\\n--header \"Cookie: token=${TOKEN}\" \\\n--data-binary \"@payload.json\")\necho $CREATE_RESP\n\n# if prebuild already exists, update existing\nif [[ $CREATE_RESP == *\"already exists\"* ]]; then\n  PREBUILT=$(curl --silent --location --request GET 'http://localhost:3000/prebuilts?equals=@dsup/jennprebuilt&equalsField=name' \\\n  --header \"Cookie: token=${TOKEN}\" \\\n  --data-raw '')\n  # echo $PREBUILT\n  echo $(grep '(?<=\"name\": \")(.+)(?=\",)' artifact.json)\n  echo $(grep '/(\"name\": \".+\"){1}/' artifact.json)\n  # node extractName $PREBUILT\nfi\nrm payload.json\n# # # get prebuilts\n# # PREBUILTS=$(curl --silent --location --request GET 'http://localhost:3000/prebuilts?&equals=@dsup/jennprebuilt&equalsField=name' \\\n# # --header \"Cookie: token=${TOKEN}\")\n# # # echo $PREBUILTS\n"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 4200,
              "y": 400
            }
          },
          "6323": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "Set manifestTester.js file content",
            "description": "Set manifestTester.js file content",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "name": "manifestTester.js"
                },
                "path": [
                  "content"
                ],
                "value": "const AJV = require('ajv'),\n  path = require('path'),\n  fs = require('fs-extra'),\n  r2 = require('r2'),\n  betterAjvErrors = require('better-ajv-errors').default;\n\nconst ajv = new AJV({\n  jsonPointers: true,\n  allErrors: true\n});\n\nconst args = process.argv.filter((element, index) => {\n  return index >= 2;\n});\nif (args.length != 2) {\n  const usage = `\n  ==============================================================\n    Simplified manifest schema validator, using ajv,\n    that can be used for very quick schema validations.\n    This will validate a json file against the schema\n    found in manifest-schema.json\n\n    Examples:\n    Usage: node manifestTester.js someManifestFile.json PATH/TO/SCHEMA/FILE.json\n    Usage: node manifestTester.js someManifestFile.json http://www.PATH.TO/SCHEMA/FILE.json\n\n    NOTE: for a graphical JSON schema validator go to\n    https://www.jsonschemavalidator.net/\n\n  ==============================================================`;\n  console.log(usage);\n  process.exit(1);\n}\n\nasync function runValidation() {\n  let schema;\n  if (args[1].includes(\"http\")) {\n    schema = await r2(args[1]).json;\n  }\n  else {\n    schema = require(path.join(__dirname, args[1]));\n  }\n  // console.log(`the schema is : ${JSON.stringify(schema)}`)\n  const filePath = path.normalize(args[0]);\n  console.log(`Retrieving ${filePath}`);\n  try {\n    const manifest = await fs.readFile(filePath, 'utf8');\n    console.log('Converting to JSON object');\n    const data = JSON.parse(manifest);\n\n    console.log('Initializing AJV with schema');\n    ajv.addSchema(schema, 'manifestSchema');\n    console.log(`Validating ${filePath} against the schema`);\n    var valid = ajv.validate('manifestSchema', data);\n    if (!valid) {\n      console.error('❌  Validation Failed');\n      const output = betterAjvErrors(schema, data, ajv.errors, { format: 'js' });\n      console.log(output);\n      process.exit(1);\n\n    }\n    else {\n      console.log('✅  Validation passed');\n    }\n  }\n  catch (error) {\n    console.error(error);\n    process.exit(1);\n  }\n}\ntry {\n  runValidation();\n}\ncatch (error) {\n  console.error(`❌  Error occurred running the validator ${error}`);\n  process.exit(1);\n}\n"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 11400,
              "y": 400
            }
          },
          "7019": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "Set manifest-schema.json content",
            "description": "Set manifest-schema.json content",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "name": "manifest-schema.json"
                },
                "path": [
                  "content"
                ],
                "value": "$var.6f7b.stringified"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 9600,
              "y": 400
            }
          },
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "nodeLocation": {
              "x": 600,
              "y": 400
            }
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "nodeLocation": {
              "x": 12600,
              "y": 300
            }
          },
          "e474": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "Set generate.js file content",
            "description": "Set generate.js file content",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "name": "generate.js"
                },
                "path": [
                  "content"
                ],
                "value": "const path = require('path');\nconst fs = require('fs');\n\nconst files = ['package.json', 'manifest.json', 'README.md'];\nlet success = true;\n\n// Read in GitLab project ID, project URL, and branch name\nconst PID = process.argv[2];\nconst gitlabURL = process.argv[3];\nconst gitlabBranch = process.argv[4];\nif (PID === null || PID == undefined || Number.isNaN(parseInt(PID, 10))) {\n  console.error('Please run this script with Gitlab Project ID (integer) as an argument');\n  process.exit(2);\n}\nconsole.log(`Generating artifact.json file w/ ${PID} as GitLab Project ID`);\n\nconst filePath = __dirname.replace(\"/scripts\", \"\");\ntry {\n  const [packageJSON, manifest, readme] = files.map(entry => {\n    const result = fs.readFileSync(path.join(filePath, `./${entry}`), {\n      encoding: 'utf-8'\n    });\n\n    if (entry !== 'README.md') {\n        const parsedRes = JSON.parse(result);\n        if (entry === 'manifest.json' && Object.prototype.hasOwnProperty.call(parsedRes, 'version')) {\n          delete parsedRes.version;\n        }\n      return parsedRes;\n    } else {\n      // Update links to relative path of GitLab project in README\n      return result.replace(/\\.\\//gm, `${gitlabURL}/-/raw/${gitlabBranch}/`);\n    }\n  });\n\n  const bundles = [];\n\n  // Read IAP component locations from manifest and combine IAP component\n  // data into bundles field for artifact.json file\n  const components = manifest.artifacts;\n  components.forEach(file => {\n    try {\n      const data = fs.readFileSync(\n        path.join(filePath, `./${file.location}`),\n        { encoding: 'utf-8' }\n      );\n      bundles.push({ type: file.type, data: JSON.parse(data) });\n      console.log(`     ⚪ (${file.type})   -   ${file.location}   -   ✅`);\n    } catch (err) {\n      success = false;\n      console.log(`     ⚪  (${file.type})   -   ${file.location}   -   ❌  - ${err}`);\n    }\n  });\n\n  // Create metadata of artifact.json from package.json of project\n  const metadata = {\n    name: packageJSON.name,\n    version: packageJSON.version,\n    description: packageJSON.description,\n    license: packageJSON.license,\n    repository: packageJSON.repository,\n    keywords: packageJSON.keywords,\n    author: packageJSON.author,\n    IAPDependencies: packageJSON.IAPDependencies,\n    gitlabId: parseInt(PID, 10),\n  };\n\n  if (success) {\n    console.log(`\\n\\nFinished successfully`);\n  } else {\n    console.log(`\\n\\nFinished with error(s)`);\n    process.exit(1);\n  }\n\n  // Combine metadata, manifest, bundles, and README into artifact.json file\n  const artifact = { metadata, manifest, bundles, readme };\n  fs.writeFileSync(\n    path.join(filePath, './artifact.json'),\n    JSON.stringify(artifact, null, 2)\n  );\n} catch (err) {\n  console.error(`Failed to generate artifact.json file: ${err}`);\n  process.exit(1);\n}"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 1200,
              "y": 400
            }
          },
          "d42b": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "Set git_setup.sh file content",
            "description": "Set git_setup.sh file content",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "name": "git_setup.sh"
                },
                "path": [
                  "content"
                ],
                "value": "#!/bin/bash\n\n#-----------#\n# Git Setup #\n#-----------#\necho \"Setting up git credentials\"\nmkdir -p ~/.ssh\n\ngit config --global user.email \"$CI_GIT_EMAIL\"\ngit config --global user.name \"$CI_GIT_USERNAME\"\necho -e \"$ID_RSA\" > ~/.ssh/id_rsa\nchmod 0400 ~/.ssh/id_rsa\n\nif [ -n \"$CI_ORIGIN_SSH_PORT\" ]; then\n    echo -e \"Host $CI_SERVER_HOST\\\\n\\\\tHostName $CI_SERVER_HOST\\\\n\\\\tPort $CI_ORIGIN_SSH_PORT\\\\n\\\\tStrictHostKeyChecking no\\\\n\\\\tLogLevel ERROR\\\\n\" >> ~/.ssh/config\n    git remote set-url origin \"ssh://$CI_ORIGIN_HOSTNAME:$CI_ORIGIN_SSH_PORT/$CI_PROJECT_PATH\"\nelif [ -n \"$CI_ORIGIN_HOSTNAME\" ]; then\n    echo -e \"Host $CI_SERVER_HOST\\\\n\\\\tHostName $CI_SERVER_HOST\\\\n\\\\tStrictHostKeyChecking no\\\\n\\\\tLogLevel ERROR\\\\n\" >> ~/.ssh/config\n    git remote set-url origin \"$CI_ORIGIN_HOSTNAME\":\"$CI_PROJECT_PATH\"\nelse\n    # if host is not overridden use the original hostname\n    echo -e \"Host gitlab.com\\\\n\\\\tStrictHostKeyChecking no\\\\n\\\\tLogLevel ERROR\\\\n\" >> ~/.ssh/config\n    git remote set-url origin git@gitlab.com:\"$CI_PROJECT_PATH\"\nfi\ngit remote -v\necho \"Git credentials configured.\"\ngit stash\ngit checkout ${CI_COMMIT_REF_NAME}\nif ! git pull --rebase --tags; then \n    echo -e \"\\033[0;31mERROR: ***********************************************************************************\"\n    echo \"ERROR: There was an issue connecting to remote. Check your credentials.\"\n    echo -e \"ERROR: ***********************************************************************************\\033[0m\"\n    exit 1\nfi \ngit reset --hard origin/\"$CI_COMMIT_REF_NAME\"\n\necho \"$CI_COMMIT_REF_NAME checked out.\"\n"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 5100,
              "y": 400
            }
          },
          "8bdb": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "Set node_setup.sh file content",
            "description": "Set node_setup.sh file content",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "name": "node_setup.sh"
                },
                "path": [
                  "content"
                ],
                "value": "#!/bin/bash\n\n# check node version:\necho \"node version: $(node --version)\"\necho \"npm version: $(npm --version)\"\n\necho \"Installing dependencies...\"\nif [ ! -f package-lock.json ]; then\n    PRESENT='false'\n    echo 'package-lock does not exist - generating one now.'\n    npm i --package-lock-only\nelse \n    if ! npm ci -q --unsafe-perm; then\n        exit 1\n    fi\nfi\n\nif [ -n \"$PRESENT\" ]; then\n    git add package-lock.json\n    git commit -m 'initialized package-lock.json [ci skip]'\nfi\n\necho \"Dependencies installed.\"\n"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 6000,
              "y": 400
            }
          },
          "80ce": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "Set promote.py file content",
            "description": "Set promote.py file content",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "name": "promote.py"
                },
                "path": [
                  "content"
                ],
                "value": "import requests\nimport json\nimport sys\nimport os\n\nhostname = os.environ.get(\"IAP_HOSTNAME\")\niap_ssl_cert = os.environ.get(\"IAP_SSL_CERT\")\n\n# If SSL certificat provided, write value to local file system\nif iap_ssl_cert: \n  with open('./itential.cert', 'w') as f:\n    f.write(iap_ssl_cert)\n\n# Get path to artifact.json\nartifact_path = sys.argv[1]\npath = './itential.cert'\n\n# checking if IAP_PUSH_TO_LOCAL env var is set -> if not, default to True\nif not (os.environ.get(\"IAP_PUSH_TO_LOCAL\")):\n  push_to_local = True\nelse:\n  push_to_local = True if os.environ.get(\"IAP_PUSH_TO_LOCAL\").lower() == \"true\" else False\n\n# checking if IAP_TOKEN is set -> if not, use basic auth login\ntoken = os.environ.get(\"IAP_TOKEN\")\nbasic_auth = False\nif not token:\n  basic_auth = True\n  username = os.environ.get(\"IAP_USERNAME\")\n  pw = os.environ.get(\"IAP_PW\")\n\nif not (artifact_path and hostname and (token or (username and pw))):\n  print(\"Missing environmental variables.\\nMake sure your environmental variables are set properly.\\nExiting...\")\n  sys.exit(1)\n\nartifact = json.load(open(f\"{artifact_path}\"))\n# Function Definitions\n# Handles getting token to authenticate into IAP\ndef get_token():\n  print(\"Getting auth token\")\n  url = f\"{hostname}/login\"\n  payload = json.dumps({\n    \"user\": {\n      \"username\": username,\n      \"password\": pw\n    }\n  })\n\n  response = requests.request(\n    \"POST\", \n    url, \n    headers={'Content-Type': 'application/json'},\n    data=payload,\n    verify=path)\n  if not response.status_code // 100 == 2:\n    raise Exception(\"Error: Unexpected response {}: Failed to get auth token\".format(response.text))\n  else: \n    return response.text\n\n# Checks if prebuilt already exists\ndef get_prebuilt(name):\n  print(f\"Retrieving prebuilt: {name}\")\n  url = f\"{hostname}/prebuilts?equals={name}&equalsField=name\"\n  response = requests.request(\n    \"GET\", \n    url,\n    headers={'Cookie': f'token={token}'},\n    verify=path)\n  if not response.status_code // 100 == 2:\n    raise Exception(\"Error: Unexpected response {}: Failed to get prebuilt\".format(response.text))\n  else: \n    return response.text\n\ndef add_prebuilt(payload): \n  print(\"Prebuilt does not exist yet - adding to IAP\")\n  url = f\"{hostname}/prebuilts/import\"\n  headers = {\n    'Content-Type': 'application/json',\n    'Cookie': f'token={token}'\n  }\n  response = requests.request(\n    \"POST\",\n    url,\n    headers=headers,\n    data=payload,\n    verify=path)\n  if \"Invalid repository configuration\" in response.text:\n    print(\"Failed to promote to original repository, pushing to local scope.\")\n    updated_payload = json.loads(payload)\n    updated_payload[\"prebuilt\"][\"metadata\"][\"repository\"] = {\n      \"type\": \"local\",\n      \"hostname\": \"localhost\",\n      \"path\": \"/\"\n    }\n    response = requests.request(\n      \"POST\",\n      url,\n      headers=headers,\n      data=json.dumps(updated_payload),\n      verify=path)\n  if not response.status_code // 100 == 2:\n    raise Exception(\"Error: Unexpected response {}: Failed to add prebuilt\".format(response.text))\n  else: \n    print(\"Successfully added prebuilt\")\n    return response.text\n\ndef update_prebuilt(id, payload):\n  print(\"Updating existing prebuilt\")\n  url = f\"{hostname}/prebuilts/{id}\"\n  headers = {\n    'Content-Type': 'application/json',\n    'Cookie': f'token={token}'\n  }\n  response = requests.request(\n    \"PUT\",\n    url,\n    headers=headers,\n    data=payload,\n    verify=path)\n  if \"Invalid repository configuration\" in response.text:\n    print(\"Failed to promote to original repository, pushing to local scope.\")\n    updated_payload = json.loads(payload)\n    updated_payload[\"prebuilt\"][\"metadata\"][\"repository\"] = {\n      \"type\": \"local\",\n      \"hostname\": \"localhost\",\n      \"path\": \"/\"\n    }\n    response = requests.request(\n      \"PUT\",\n      url,\n      headers=headers,\n      data=json.dumps(updated_payload),\n      verify=path)\n  if not response.status_code // 100 == 2:\n      raise Exception(\"Error: Unexpected response {}: Failed to update prebuilt\".format(response.text))\n  else: \n    print(\"Successfully updated prebuilt\")\n    return response.text\n\ndef logout():\n  print(\"Logging out of IAP\")\n  url = f\"{hostname}/login?logout=true\"\n  headers = {\n    'Content-Type': 'application/json',\n    'Cookie': f'token={token}'\n  }\n  response = requests.request(\n    \"GET\",\n    url,\n    headers=headers,\n    verify=path)\n # response = requests.request(\"GET\", url, headers=headers)\n\n# Script starts here\ntry: \n  if (basic_auth):\n    token = get_token()\n\n  # Set name of prebuilt\n  name = artifact[\"metadata\"][\"name\"]\n\n  results = get_prebuilt(name)\n  if push_to_local:\n    print(\"Setting artifact.json repository configuration to local\")\n    artifact[\"metadata\"][\"repository\"] = {\n      \"type\": \"local\",\n      \"hostname\": \"localhost\",\n      \"path\": \"/\"\n    }\n    print('Promoting to local scope in IAP')\n  payload = json.dumps({\n    \"prebuilt\": artifact,\n    \"options\": {\n      \"overwrite\": True \n    }\n  })\n  # if prebuilt doesn't exist, add it\n  if json.loads(results)[\"total\"] == 0:\n    response = add_prebuilt(payload)\n  else: # if prebuilt exists, update it\n      id = json.loads(results)[\"results\"][0][\"_id\"]\n      update_prebuilt(id, payload)\n\n  # logging out\n  logout()\nexcept requests.exceptions.RequestException as e: \n  # A serious problem happened, like an SSLError or InvalidURL\n  print(\"Error: {}\".format(e))\n  sys.exit(1)  \nexcept: # error handling to catch any errors that throw a non 200 code\n  e = sys.exc_info()[1]    \n  print(e)\n  sys.exit(1)\n"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 6900,
              "y": 400
            }
          },
          "ef03": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "Set ver_bump.sh file content",
            "description": "Set ver_bump.sh file content",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "name": "ver_bump.sh"
                },
                "path": [
                  "content"
                ],
                "value": "#!/bin/bash\n\n#-------------------#\n# Get Semver Prefix #\n#-------------------#\nVERSION=\"$(git log --format=%s --merges -1|awk -F\"'\" '{print $2}'|awk -F \"/\" '{print $1}')\"\ncase \"$VERSION\" in\n    # if PATCH transform to patch\n    patch|minor|major) SEMVER=\"$(echo \"$VERSION\" | awk '{print tolower($0)}')\";;\n    *) SEMVER=\"patch\";;\nesac\nif [ -z \"$VERSION\" ]; then\n    echo \"No branch prefix detected. Defaulting to patch.\"\nfi\n\necho \"Semver bump: $SEMVER\"\n\n#---------------------#\n# Get Current Version #\n#---------------------#\nCURRENT_VERSION=$(node -p \"require('./package.json').version\")\necho \"Last version: $CURRENT_VERSION\"\nCURRENT_MAJOR=$(echo \"$CURRENT_VERSION\"|awk -F'.' '{print $1}')\nCURRENT_MINOR=$(echo \"$CURRENT_VERSION\"|awk -F'.' '{print $2}')\nCURRENT_PATCH=$(echo \"$CURRENT_VERSION\"|awk -F'.' '{print $3}'|awk -F'-' '{print $1}')\nCURRENT_PRERELEASE=$(echo \"$CURRENT_VERSION\"|awk -F'-' '{print $2}')\n\n# if [[ $CURRENT_VERSION != *\"+\"* ]]; then\n#     CURRENT_PATCH=$(echo \"$CURRENT_VERSION\"|awk -F'.' '{print $3}'|awk -F'-' '{print $1}')\n#     CURRENT_PRERELEASE=$(echo \"$CURRENT_VERSION\"|awk -F'-' '{print $2}')\n# else\n#     CURRENT_PATCH=$(echo \"$CURRENT_VERSION\"|awk -F'.' '{print $3}'|awk -F'+' '{print $1}')\n#     CURRENT_PRERELEASE=$(echo \"$CURRENT_VERSION\"|awk -F'+' '{print $2}')\n# fi \n\n\n#---------------------------#\n# Version & Release Package #\n#---------------------------#\n\n# create release note before versioning the project\nsh ./scripts/create_release_script.sh \"$NEW_VERSION\"\n\n# explicitly add the change log to the version bump commit\ngit add CHANGELOG.md\necho \"Bumping version...\"\n\n# bump version, git tag, commit & then push changes\n# using -f to ignore the added release note\nnpm version -f \"$SEMVER\" -m \"Updating $SEMVER version to %s. [skip ci]\" --loglevel=error\necho \"Version bump successful\"\n\n# push to gitlab\n# no-verify is used to ignore any pre-push commits that may be used by the project\nif git push -f --tags origin \"$CI_COMMIT_REF_NAME\" --follow-tags --no-verify; then\n    echo \"Version bump pushed successfully.\"\nelse\n    echo -e \"\\033[0;31mERROR: ***********************************************************************************\"\n    echo \"ERROR: Failed to push.\"\n    echo -e \"ERROR: ***********************************************************************************\\033[0m\"\n    exit 1\nfi\n"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 7500,
              "y": 400
            }
          },
          "7c35": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Append commit.sh file content",
            "description": "Append commit.sh file content",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.1649.pushedArray",
                "elementN": "$var.866.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 2700,
              "y": 800
            }
          },
          "3d5d": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Append create_release_script.sh",
            "description": "Append create_release_script.sh",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.7c35.pushedArray",
                "elementN": "$var.3853.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 3600,
              "y": 800
            }
          },
          "4f62": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Append git_setup.sh",
            "description": "Append git_setup.sh",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.2331.pushedArray",
                "elementN": "$var.d42b.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 5400,
              "y": 800
            }
          },
          "40fd": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Append node_setup.sh",
            "description": "Append node_setup.sh",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.4f62.pushedArray",
                "elementN": "$var.8bdb.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 6300,
              "y": 800
            }
          },
          "d3e6": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Append promote.py",
            "description": "Append promote.py",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.40fd.pushedArray",
                "elementN": "$var.80ce.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 6900,
              "y": 800
            }
          },
          "62a1": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Append ver_bump.sh",
            "description": "Append ver_bump.sh",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.d3e6.pushedArray",
                "elementN": "$var.ef03.object"
              },
              "outgoing": {
                "pushedArray": "$var.job.scriptFiles"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 7800,
              "y": 800
            }
          },
          "9bcf": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "Set manifestLinkTester.js file content",
            "description": "Set manifestLinkTester.js file content",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "name": "manifestLinkTester.js"
                },
                "path": [
                  "content"
                ],
                "value": "const path = require('path'),\n      fs = require('fs-extra');\n\nconst args = process.argv.filter((element, index) => {\n  return index >=2;\n});\nif (args.length <= 0) {\n  const usage = `\n  ==============================================================\n    Simplified manifest schema validator, using ajv,\n    that can be used for very quick schema validations.\n    This will validate a json file against the schema\n    found in manifest-schema.json\n\n    Usage: node manifestTester.js someManifestFile.json\n\n    NOTE: for a graphical JSON schema validator go to\n    https://www.jsonschemavalidator.net/\n\n  ==============================================================`;\n  console.log(usage);\n  process.exit(1);\n}\n\nasync function runLinkValidation() {\n  const filePath = path.normalize(args[0]);\n\n  console.log(`Retrieving ${filePath}`);\n  // Read in manifest.json file for IAP components in this Pre-Built\n  const manifest = await fs.readFile(filePath, 'utf8');\n  console.log('Converting to JSON object');\n  const manifestData = JSON.parse(manifest);\n\n  console.log('Iterating through artifacts...');\n  // Initialize valid flag to true\n  let valid=true;\n  for (let i=0; i< manifestData.artifacts.length; i++){\n    const current = manifestData.artifacts[i].location;\n    if (current){\n      if (fs.existsSync(`./${current}`)){\n        // Read in IAP component as found in bundles folder or repository\n        const bundle = await fs.readFile(`./${current}`, 'utf8');\n        const bundleData = JSON.parse(bundle);\n        if (manifestData.artifacts[i].type == 'transformation') {\n          if (manifestData.artifacts[i].id == bundleData._id) {\n            console.log(`\\t✅  Validating ${current}`);\n          } else {\n            console.log(`\\t❌  Validating ${current}`);\n            console.log(`\\t\\t- Bundle ID (${bundleData._id}) is not equal to manifest artifact ID (${manifestData.artifacts[i].id}).`);\n            valid = false;\n          }\n        } else if (manifestData.artifacts[i].type == 'golden-config') {\n          if (manifestData.artifacts[i].name == bundleData.data[0].name) {\n            console.log(`\\t✅  Validating ${current}`);\n          } else {\n            console.log(`\\t❌  Validating ${current}`);\n            console.log(`\\t\\t- Bundle Name (${bundleData.data[0].name}) is not equal to manifest artifact ID (${manifestData.artifacts[i].id}).`);\n            valid = false;\n          }\n        } else if (manifestData.artifacts[i].id == bundleData.name) {\n          console.log(`\\t✅  Validating ${current}`);\n        } else {\n          console.log(`\\t❌  Validating ${current}`);\n          console.log(`\\t\\t- Bundle Name (${bundleData.name}) is not equal to manifest artifact ID (${manifestData.artifacts[i].id}).`);\n          valid = false;\n        }\n      }\n      else{\n        console.log(`\\t❌  Validating ${current}`);\n        console.log(`\\t\\t- File at path '${current}' does not exist.`);\n        valid = false;\n      }\n    }\n  }\n  if (!valid) {\n    // If not valid, force pipeline to error\n    console.error('Validation Failed  👎');\n    process.exit(1);\n  }\n  else {\n    console.log('Validation passed  👍');\n  }\n}\ntry {\n  runLinkValidation();\n}\ncatch(error) {\n  console.error(`Error occurred running the validator ${error}`);\n}\n"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 10200,
              "y": 400
            }
          },
          "84c3": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Append manifestLinkTester.js",
            "description": "Append manifestLinkTester.js",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.5820.pushedArray",
                "elementN": "$var.9bcf.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 10800,
              "y": 800
            }
          },
          "103d": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Append manifestTester.js",
            "description": "Append manifestTester.js",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.84c3.pushedArray",
                "elementN": "$var.6323.object"
              },
              "outgoing": {
                "pushedArray": "$var.job.testFiles"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 12000,
              "y": 800
            }
          },
          "f42b": {
            "name": "parse",
            "canvasName": "parse",
            "summary": "Parse manifest-schema.json to object",
            "description": "Parse manifest-schema.json to object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "String",
            "variables": {
              "incoming": {
                "text": "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"$id\":\"iap-artifact-bundle\",\"type\":\"object\",\"title\":\"Artifact Bundle Schema\",\"default\":null,\"additionalProperties\":false,\"definitions\":{\"tagged\":{\"$id\":\"#/properties/properties/properties/tagged\",\"type\":\"array\",\"title\":\"The Tagged Item\",\"description\":\"These are the items that need to be tagged\",\"uniqueItems\":true,\"items\":{\"$id\":\"#/properties/properties/properties/tagged/items\",\"type\":\"string\",\"title\":\"The Tagged Items\",\"default\":\"\",\"examples\":[\"mop-example-1\",\"mop-analytic-example-1\",\"workflow-example-1\"],\"pattern\":\"^(.*)$\"}}},\"required\":[\"bundleName\",\"version\",\"createdEpoch\",\"artifacts\"],\"properties\":{\"bundleName\":{\"$id\":\"#/properties/bundleName\",\"type\":\"string\",\"title\":\"The Bundle Name\",\"description\":\"Unique identifier for this bundle of artifacts.\",\"default\":\"\",\"examples\":[\"ExampleBundle\"],\"pattern\":\"^(.*)$\"},\"version\":{\"$id\":\"#/properties/version\",\"type\":\"string\",\"title\":\"The Version\",\"description\":\"The version of this bundle\",\"default\":\"\",\"examples\":[\"1.2.3\"],\"pattern\":\"^(.*)$\"},\"fingerprint\":{\"$id\":\"#/properties/fingerprint\",\"type\":\"string\",\"title\":\"The Fingerprint\",\"description\":\"For use in future implementations of  installable modules where additional security measures need to be implemented. \",\"default\":\"\",\"examples\":[\"Some verifiable token\"],\"pattern\":\"^(.*)$\"},\"createdEpoch\":{\"$id\":\"#/properties/createdEpoch\",\"type\":\"string\",\"title\":\"The Created Time\",\"description\":\"The date, in milliseconds since the unix epoch, for when this bundle was created/updated. Usually this is value of Date.now() or calling getTime() on a js Date object\",\"default\":\"\",\"examples\":[\"1554836984020\",\"result from Date.now()\"],\"pattern\":\"^(.*)$\"},\"artifacts\":{\"$id\":\"#/properties/artifacts\",\"type\":\"array\",\"title\":\"The Artifacts \",\"description\":\"List of artifacts in this bundle. Note that each item must be unique and duplicates will fail validation\",\"default\":null,\"uniqueItems\":true,\"items\":{\"$id\":\"#/properties/artifacts/items\",\"type\":\"object\",\"title\":\"Artifact items\",\"default\":null,\"additionalProperties\":false,\"properties\":{\"id\":{\"$id\":\"#/properties/artifacts/items/properties/id\",\"type\":\"string\",\"title\":\"The Artifact Id\",\"description\":\"Unique Id identifying this artifact. \",\"default\":\"\",\"examples\":[\"workflow-example-1\",\"mop-template-1\"],\"pattern\":\"^(.*)$\"},\"name\":{\"$id\":\"#/properties/artifacts/items/properties/name\",\"type\":\"string\",\"title\":\"The Artifact Name\",\"description\":\"The Name identifying this artifact\",\"default\":\"\",\"examples\":[\"My Worflow1\"],\"pattern\":\"^(.*)$\"},\"type\":{\"$id\":\"#/properties/artifacts/items/properties/type\",\"type\":\"string\",\"enum\":[\"mop-analytic-template\",\"mop-template\",\"workflow\",\"json-forms\",\"tag\",\"template\",\"forms\",\"golden-config\",\"service-catalog\",\"ac-agenda-job\",\"adapter\",\"app\",\"transformation\",\"automation\"],\"title\":\"The Artifact Type \",\"description\":\"The type of artifact(s) this entry encompasses. Must be one of the supported types listed in the enum\",\"default\":\"\",\"examples\":[\"mop-analytic-template\",\"mop-template\",\"workflow\",\"tag\",\"forms\",\"golden-config\"],\"pattern\":\"^(.*)$\"},\"location\":{\"$id\":\"#/properties/artifacts/items/properties/location\",\"type\":\"string\",\"title\":\"The Artifact Location\",\"description\":\"Path, relative to the root of this bundle, to either a specific artifact file or a directory of artifacts of a specific type. Future implementations may allow for URLs to external assets\",\"default\":\"\",\"examples\":[\"/bundles/ExampleBundle/workflow/myWorkflow1.json\",\"/bundles/workflows/\"],\"pattern\":\"^(.*)$\"},\"description\":{\"$id\":\"#/properties/artifacts/items/properties/description\",\"type\":\"string\",\"title\":\"The Description \",\"description\":\"The description of what this artifact is \",\"default\":\"\",\"examples\":[\"This artifact does things and stuff\"],\"pattern\":\"^(.*)$\"},\"properties\":{\"$id\":\"#/properties/artifacts/items/properties/properties\",\"type\":\"object\",\"title\":\"The Properties Schema\",\"description\":\"Additional properties that may be needed for a type during it's installations\",\"properties\":{\"tagged\":{\"$ref\":\"#/definitions/tagged\"}}}},\"if\":{\"properties\":{\"type\":{\"enum\":[\"tag\"]}}},\"then\":{\"required\":[\"id\",\"name\",\"type\",\"properties\"]},\"else\":{\"required\":[\"id\",\"name\",\"type\",\"location\"]}}}}}"
              },
              "outgoing": {
                "textObject": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 8700,
              "y": 800
            }
          },
          "6f7b": {
            "name": "objectToString",
            "canvasName": "toString",
            "summary": "Convert manifest-schema.json to string",
            "description": "Convert manifest-schema.json to string",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "value": "$var.f42b.textObject",
                "replacer": "",
                "space": 2
              },
              "outgoing": {
                "stringified": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 8700,
              "y": 400
            }
          }
        },
        "transitions": {
          "866": {
            "7c35": {
              "type": "standard",
              "state": "success"
            }
          },
          "1649": {
            "866": {
              "type": "standard",
              "state": "success"
            }
          },
          "2331": {
            "d42b": {
              "type": "standard",
              "state": "success"
            }
          },
          "3853": {
            "3d5d": {
              "type": "standard",
              "state": "success"
            }
          },
          "5820": {
            "9bcf": {
              "type": "standard",
              "state": "success"
            }
          },
          "6194": {
            "2331": {
              "type": "standard",
              "state": "success"
            }
          },
          "6323": {
            "103d": {
              "type": "standard",
              "state": "success"
            }
          },
          "7019": {
            "5820": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_start": {
            "e474": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "e474": {
            "1649": {
              "type": "standard",
              "state": "success"
            }
          },
          "d42b": {
            "4f62": {
              "type": "standard",
              "state": "success"
            }
          },
          "8bdb": {
            "40fd": {
              "type": "standard",
              "state": "success"
            }
          },
          "80ce": {
            "d3e6": {
              "type": "standard",
              "state": "success"
            }
          },
          "ef03": {
            "62a1": {
              "type": "standard",
              "state": "success"
            }
          },
          "4bac": {},
          "89f8": {},
          "ce98": {},
          "7c35": {
            "3853": {
              "type": "standard",
              "state": "success"
            }
          },
          "e93e": {},
          "3d5d": {
            "6194": {
              "type": "standard",
              "state": "success"
            }
          },
          "4f62": {
            "8bdb": {
              "type": "standard",
              "state": "success"
            }
          },
          "40fd": {
            "80ce": {
              "type": "standard",
              "state": "success"
            }
          },
          "d3e6": {
            "ef03": {
              "type": "standard",
              "state": "success"
            }
          },
          "62a1": {
            "f42b": {
              "type": "standard",
              "state": "success"
            }
          },
          "3e6c": {},
          "1f0b": {},
          "ed6d": {},
          "9bcf": {
            "84c3": {
              "type": "standard",
              "state": "success"
            }
          },
          "c42a": {},
          "84c3": {
            "6323": {
              "type": "standard",
              "state": "success"
            }
          },
          "103d": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "f42b": {
            "6f7b": {
              "type": "standard",
              "state": "success"
            }
          },
          "6f7b": {
            "7019": {
              "type": "standard",
              "state": "success"
            }
          }
        },
        "type": "automation",
        "canvasVersion": 3,
        "tags": [],
        "groups": [],
        "migrationVersion": 4
      }
    },
    {
      "type": "workflow",
      "data": {
        "created": "2022-05-10T13:50:59.783Z",
        "createdVersion": "5.40.5-2021.1.72.0",
        "created_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {}
        },
        "font_size": 12,
        "inputSchema": {
          "type": "object",
          "properties": {
            "packageJsonName": {
              "type": "string",
              "examples": [
                "sdfsa"
              ]
            },
            "artifact": {
              "title": "obj",
              "type": "object",
              "properties": {},
              "examples": [
                {
                  "name": "value"
                }
              ]
            }
          },
          "required": [
            "packageJsonName",
            "artifact"
          ]
        },
        "lastUpdatedVersion": "4.69.3-2023.2.129",
        "last_updated": "2025-02-06T18:32:42.445Z",
        "last_updated_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {}
        },
        "name": "Prebuilt Promotion Github Add Files",
        "outputSchema": {
          "type": "object",
          "properties": {
            "packageJsonName": {
              "type": "string",
              "examples": [
                "sdfsa"
              ]
            },
            "artifact": {
              "title": "obj",
              "type": "object",
              "properties": {},
              "examples": [
                {
                  "name": "value"
                }
              ]
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            },
            "pushedArray": {
              "title": "pushedArray",
              "type": "array",
              "items": [
                {
                  "type": [
                    "string",
                    "number",
                    "integer",
                    "object",
                    "array",
                    "boolean",
                    "null"
                  ]
                }
              ],
              "examples": [
                [
                  "Device1",
                  "Device2",
                  "Device3"
                ]
              ]
            }
          }
        },
        "tasks": {
          "3056": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "promote.py file content",
            "description": "Set an object key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "action": "update",
                  "file_path": "scripts/promote.py",
                  "content": ""
                },
                "path": [
                  "content"
                ],
                "value": "import requests\nimport json\nimport sys\nimport os\n\nhostname = os.environ.get(\"IAP_HOSTNAME\")\nartifact_path = sys.argv[1]\n\n# checking if IAP_PUSH_TO_LOCAL env var is set -> if not, default to True\nif not (os.environ.get(\"IAP_PUSH_TO_LOCAL\")):\n  push_to_local = True\nelse:\n  push_to_local = True if os.environ.get(\"IAP_PUSH_TO_LOCAL\").lower() == \"true\" else False\n\n# checking if IAP_TOKEN is set -> if not, use basic auth login\ntoken = os.environ.get(\"IAP_TOKEN\")\nbasic_auth = False\nif not token:\n  basic_auth = True\n  username = os.environ.get(\"IAP_USERNAME\")\n  pw = os.environ.get(\"IAP_PW\")\n\nif not (artifact_path and hostname and (token or (username and pw))):\n  print(\"Missing environmental variables.\\nMake sure your environmental variables are set properly.\\nExiting...\")\n  sys.exit(1)\n\nartifact = json.load(open(f\"{artifact_path}\"))\n# Function Definitions\n# Handles getting token to authenticate into IAP\ndef get_token():\n  print(\"Getting auth token\")\n  url = f\"{hostname}/login\"\n  payload = json.dumps({\n    \"user\": {\n      \"username\": username,\n      \"password\": pw\n    }\n  })\n\n  response = requests.request(\n    \"POST\", \n    url, \n    headers={'Content-Type': 'application/json'},\n    data=payload)\n  if not response.status_code // 100 == 2:\n    raise Exception(\"Error: Unexpected response {}: Failed to get auth token\".format(response.text))\n  else: \n    return response.text\n\n# Checks if prebuilt already exists\ndef get_prebuilt(name):\n  print(f\"Retrieving prebuilt: {name}\")\n  url = f\"{hostname}/prebuilts?equals={name}&equalsField=name\"\n  response = requests.request(\n    \"GET\", \n    url,\n    headers={'Cookie': f'token={token}'})\n  if not response.status_code // 100 == 2:\n    raise Exception(\"Error: Unexpected response {}: Failed to get prebuilt\".format(response.text))\n  else: \n    return response.text\n\ndef add_prebuilt(payload): \n  print(\"Prebuilt does not exist yet - adding to IAP\")\n  url = f\"{hostname}/prebuilts/import\"\n  headers = {\n    'Content-Type': 'application/json',\n    'Cookie': f'token={token}'\n  }\n  response = requests.request(\n    \"POST\",\n    url,\n    headers=headers,\n    data=payload)\n  if \"Invalid repository configuration\" in response.text:\n    print(\"Failed to promote to original repository, pushing to local scope.\")\n    updated_payload = json.loads(payload)\n    updated_payload[\"prebuilt\"][\"metadata\"][\"repository\"] = {\n      \"type\": \"local\",\n      \"hostname\": \"localhost\",\n      \"path\": \"/\"\n    }\n    response = requests.request(\n      \"POST\",\n      url,\n      headers=headers,\n      data=json.dumps(updated_payload))\n  if not response.status_code // 100 == 2:\n    raise Exception(\"Error: Unexpected response {}: Failed to add prebuilt\".format(response.text))\n  else: \n    print(\"Successfully added prebuilt\")\n    return response.text\n\ndef update_prebuilt(id, payload):\n  print(\"Updating existing prebuilt\")\n  url = f\"{hostname}/prebuilts/{id}\"\n  headers = {\n    'Content-Type': 'application/json',\n    'Cookie': f'token={token}'\n  }\n  response = requests.request(\n    \"PUT\",\n    url,\n    headers=headers,\n    data=payload)\n  if \"Invalid repository configuration\" in response.text:\n    print(\"Failed to promote to original repository, pushing to local scope.\")\n    updated_payload = json.loads(payload)\n    updated_payload[\"prebuilt\"][\"metadata\"][\"repository\"] = {\n      \"type\": \"local\",\n      \"hostname\": \"localhost\",\n      \"path\": \"/\"\n    }\n    response = requests.request(\n      \"PUT\",\n      url,\n      headers=headers,\n      data=json.dumps(updated_payload))\n  if not response.status_code // 100 == 2:\n      raise Exception(\"Error: Unexpected response {}: Failed to update prebuilt\".format(response.text))\n  else: \n    print(\"Successfully updated prebuilt\")\n    return response.text\n\ndef logout():\n  print(\"Logging out of IAP\")\n  url = f\"{hostname}/login?logout=true\"\n  headers = {\n    'Content-Type': 'application/json',\n    'Cookie': f'token={token}'\n  }\n  response = requests.request(\n    \"GET\",\n    url,\n    headers=headers)\n  response = requests.request(\"GET\", url, headers=headers)\n\n# Script starts here\ntry: \n  if (basic_auth):\n    token = get_token()\n\n  # Set name of prebuilt\n  name = artifact[\"metadata\"][\"name\"]\n\n  results = get_prebuilt(name)\n  if push_to_local:\n    print(\"Setting artifact.json repository configuration to local\")\n    artifact[\"metadata\"][\"repository\"] = {\n      \"type\": \"local\",\n      \"hostname\": \"localhost\",\n      \"path\": \"/\"\n    }\n    print('Promoting to local scope in IAP')\n  payload = json.dumps({\n    \"prebuilt\": artifact,\n    \"options\": {\n      \"overwrite\": True \n    }\n  })\n  # if prebuilt doesn't exist, add it\n  if json.loads(results)[\"total\"] == 0:\n    response = add_prebuilt(payload)\n  else: # if prebuilt exists, update it\n      id = json.loads(results)[\"results\"][0][\"_id\"]\n      update_prebuilt(id, payload)\n\n  # logging out\n  logout()\nexcept requests.exceptions.RequestException as e: \n  # A serious problem happened, like an SSLError or InvalidURL\n  print(\"Error: {}\".format(e))\n  sys.exit(1)  \nexcept: # error handling to catch any errors that throw a non 200 code\n  e = sys.exc_info()[1]    \n  print(e)\n  sys.exit(1)"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 8400,
              "y": 1200
            }
          },
          "8841": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "action.yml file content",
            "description": "Creates input to update action.yml file",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "action": "update",
                  "file_path": ".github/workflows/action.yml",
                  "content": ""
                },
                "path": [
                  "content"
                ],
                "value": "name: prebuilts-CI\n\npermissions:\n  contents: write\n\n# Controls when the action will run. \non:\n  # Triggers the workflow on push events for every branch except dev and prod\n  push:\n    branches-ignore:\n      - dev\n      - prod\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n\n  # Lint code, test code quality, and ensure that there are no insecure dependencies\n  security: \n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'Skip CI')\"\n    steps:\n      - uses: actions/checkout@v4\n      - name: Verifying security\n        continue-on-error: true\n        run: |\n          npm i \n          echo \"node version: $(node --version)\"\n          echo \"npm version: $(npm --version)\"\n          npm audit --registry=https://registry.npmjs.org\n  \n  # Validates schema of manifest.json\n  schema_validation: \n    needs: security\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'Skip CI')\"\n    steps:\n      - uses: actions/checkout@v4\n      - name: Validating schema of manifest.json\n        run: |\n          npm i\n          npm run validateSchema\n\n  # Validates links in manifest.json        \n  schemaLinks_validation: \n    needs: security\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'Skip CI')\"\n    steps:\n      - uses: actions/checkout@v4\n      - name: Validating schema links in manifest.json\n        run: |\n          npm i\n          npm run validateSchemaLinks\n  \n  # Version bump\n  version_bump: \n    needs: [schema_validation, schemaLinks_validation]\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'Skip CI')\"\n    steps:\n      - uses: actions/checkout@v4\n      - name: Version Bump\n        run: chmod +x ./scripts/ver_bump.sh && ./scripts/ver_bump.sh\n\n  # Generates artifact.json \n  generate:\n    needs: version_bump\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'Skip CI')\"\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n      - uses: actions/checkout@v4\n      - name: Generate Artifact.json file\n        run: chmod +x ./scripts/commit.sh && ./scripts/commit.sh\n      - name: Upload Artifact\n        uses: actions/upload-artifact@v4\n        with: \n          name: artifact\n          path: artifact.json\n"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 13200,
              "y": 1300
            }
          },
          "9943": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "push create_release_script.sh",
            "description": "Adds one element to the end of an array and returns the (newly modified) array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.6e7b.pushedArray",
                "elementN": "$var.361f.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 5400,
              "y": 900
            }
          },
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "nodeLocation": {
              "x": 0,
              "y": 1000
            }
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "nodeLocation": {
              "x": 16800,
              "y": 1200
            }
          },
          "f3ce": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "Child Job for Update",
            "description": "Runs a child job inside a workflow.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "Push Bundles to GitHub Commit Data",
                "variables": {
                  "artifact": {
                    "editable": true,
                    "task": "7bef",
                    "value": "fixedArray"
                  },
                  "action": {
                    "editable": true,
                    "task": "static",
                    "value": "update"
                  }
                },
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "deprecated": false,
            "groups": [],
            "actor": "job",
            "nodeLocation": {
              "x": 1800,
              "y": 700
            }
          },
          "7bef": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "updatePackageGitHubJSON",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "605d2b11d1976e009291a74d",
                "variableMap": {
                  "filesArray": "$var.d35d.return_data",
                  "packageJsonName": "$var.job.packageJsonName",
                  "packageJsonVersion": "0.0.1"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "fixedArray": null
              }
            },
            "deprecated": false,
            "groups": [],
            "task_name": "updatePackageGitHubJSON",
            "retrySettings": null,
            "nodeLocation": {
              "x": 900,
              "y": 700
            }
          },
          "d35d": {
            "name": "query",
            "canvasName": "query",
            "summary": "Get Update Files",
            "description": "Query artifact for update files",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "update",
                "obj": "$var.job.artifact"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 300,
              "y": 800
            }
          },
          "77b4": {
            "name": "query",
            "canvasName": "query",
            "summary": "Get Create Files",
            "description": "Query artifact for create files",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "create",
                "obj": "$var.job.artifact"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 300,
              "y": 1100
            }
          },
          "c586": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "Child Job for Create",
            "description": "Runs a child job inside a workflow.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "Push Bundles to GitHub Commit Data",
                "variables": {
                  "artifact": {
                    "editable": true,
                    "task": "77b4",
                    "value": "return_data"
                  },
                  "action": {
                    "editable": true,
                    "task": "static",
                    "value": "create"
                  }
                },
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "deprecated": false,
            "groups": [],
            "actor": "job",
            "nodeLocation": {
              "x": 1200,
              "y": 1200
            }
          },
          "a523": {
            "name": "query",
            "canvasName": "query",
            "summary": "update array",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "commitActions",
                "obj": "$var.f3ce.job_details"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 2400,
              "y": 700
            }
          },
          "2d37": {
            "name": "query",
            "canvasName": "query",
            "summary": "create array",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "commitActions",
                "obj": "$var.c586.job_details"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 2400,
              "y": 1200
            }
          },
          "ef4d": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "commit.sh file content",
            "description": "Set an object key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "action": "update",
                  "file_path": "scripts/commit.sh",
                  "content": ""
                },
                "path": [
                  "content"
                ],
                "value": "git checkout \"${GITHUB_REF:11}\"\necho \"Pulling changes\"\ngit stash\ngit pull --rebase --tags\ngit reset --hard origin/\"${GITHUB_REF:11}\"\ncd scripts\nGENERATE=`node generate $GITHUB_RUN_ID $GITHUB_REPOSITORY $GITHUB_REF`\ncd ..\ngit add artifact.json\ngit diff --cached --name-only | if grep artifact.json\nthen\n    echo \"A new generated artifact.json file has been checked in to current branch\"\n    git config --global user.name '$GITHUB_ACTOR'\n    git config --global user.email 'github-action@users.noreply.github.com'\n    git remote set-url origin https://x-access-token:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY\n    git add artifact.json\n    git commit -am \"Automated artifact json generation report [Skip CI]\"\n    git push\nelse\n    echo \"artifact.json file hasn't changed\"\nfi"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 3600,
              "y": 1100
            }
          },
          "6e7b": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "push commit.sh",
            "description": "Adds one element to the end of an array and returns the (newly modified) array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.f40b.combinedArray",
                "elementN": "$var.ef4d.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 4200,
              "y": 900
            }
          },
          "361f": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "create_release_script.sh file content",
            "description": "Set an object key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "action": "update",
                  "file_path": "scripts/create_release_script.sh",
                  "content": ""
                },
                "path": [
                  "content"
                ],
                "value": "git checkout \"${GITHUB_REF:11}\"\necho \"Pulling changes\"\ngit stash\ngit pull --rebase --tags\ngit reset --hard origin/\"${GITHUB_REF:11}\"\ncd scripts\nGENERATE=`node generate $GITHUB_RUN_ID $GITHUB_REPOSITORY $GITHUB_REF`\ncd ..\ngit add artifact.json\ngit diff --cached --name-only | if grep artifact.json\nthen\n    echo \"A new generated artifact.json file has been checked in to current branch\"\n    git config --global user.name '$GITHUB_ACTOR'\n    git config --global user.email 'github-action@users.noreply.github.com'\n    git remote set-url origin https://x-access-token:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY\n    git add artifact.json\n    git commit -am \"Automated artifact json generation report [Skip CI]\"\n    git push\nelse\n    echo \"artifact.json file hasn't changed\"\nfi"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 4800,
              "y": 1200
            }
          },
          "bea1": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "generate.js file content",
            "description": "Set an object key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "action": "update",
                  "file_path": "scripts/generate.js",
                  "content": ""
                },
                "path": [
                  "content"
                ],
                "value": "const path = require(\"path\");\nconst fs = require(\"fs\");\n\nconst files = [\"package.json\", \"manifest.json\", \"README.md\"];\nlet success = true;\n\nconst PID = process.argv[2];\nconst gitHubURL = process.argv[3];\nconst gitHubBranch = process.argv[4];\nif (PID === null || PID == undefined || Number.isNaN(parseInt(PID, 10))) {\n  console.error(\n    \"Please run this script with GitHub Project ID (integer) as an argument\"\n  );\n  process.exit(2);\n}\nconsole.log(`Generating artifact.json file w/ ${PID} as GitHub Project ID`);\n\nconst filePath = __dirname.replace(\"/scripts\", \"\");\ntry {\n  const [packageJSON, manifest, readme] = files.map((entry) => {\n    const result = fs.readFileSync(path.join(filePath, `./${entry}`), {\n      encoding: \"utf-8\",\n    });\n\n    if (entry !== \"README.md\") {\n      const parsedRes = JSON.parse(result);\n      if (\n        entry === \"manifest.json\" &&\n        Object.prototype.hasOwnProperty.call(parsedRes, \"version\")\n      ) {\n        delete parsedRes.version;\n      }\n      return parsedRes;\n    } else {\n      return result.replace(/\\.\\//gm, `${gitHubURL}/-/raw/${gitHubBranch}/`);\n    }\n  });\n    const bundles = [];\n  const components = manifest.artifacts;\n  components.forEach((file) => {\n    try {\n      const data = fs.readFileSync(path.join(filePath, `${file.location}`), {\n        encoding: \"utf-8\",\n      });\n      bundles.push({ type: file.type, data: JSON.parse(data) });\n      console.log(`     ⚪ (${file.type})   -   ${file.location}   -   ✅`);\n    } catch (err) {\n      success = false;\n      console.log(\n        `     ⚪  (${file.type})   -   ${file.location}   -   ❌  - ${err}`\n      );\n    }\n  });\n\n  const metadata = {\n    name: packageJSON.name,\n    version: packageJSON.version,\n    description: packageJSON.description,\n    license: packageJSON.license,\n    repository: packageJSON.repository,\n    keywords: packageJSON.keywords,\n    author: packageJSON.author,\n    IAPDependencies: packageJSON.IAPDependencies,\n  };\n\n  if (success) {\n    console.log(`\\n\\nFinished successfully`);\n  } else {\n    console.log(`\\n\\nFinished with error(s)`);\n    process.exit(1);\n  }\n  const artifact = { metadata, manifest, bundles, readme };\n  fs.writeFileSync(\n    path.join(filePath, \"./artifact.json\"),\n    JSON.stringify(artifact, null, 2)\n  );\n} catch (err) {\n  console.error(`Failed to generate artifact.json file: ${err}`);\n  process.exit(1);\n}"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 6300,
              "y": 1200
            }
          },
          "7ac1": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "push generate.js",
            "description": "Adds one element to the end of an array and returns the (newly modified) array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.9943.pushedArray",
                "elementN": "$var.bea1.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 6600,
              "y": 900
            }
          },
          "eb55": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "ver_bump.sh file content",
            "description": "Set an object key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "action": "update",
                  "file_path": "scripts/ver_bump.sh",
                  "content": ""
                },
                "path": [
                  "content"
                ],
                "value": "#!/bin/bash\n\n#-------------------#\n# Get Semver Prefix #\n#-------------------#\nVERSION=\"$(git log --format=%s --merges -1|awk -F\"'\" '{print $2}'|awk -F \"/\" '{print $1}')\"\ncase \"$VERSION\" in\n    # if PATCH transform to patch\n    patch|minor|major) SEMVER=\"$(echo \"$VERSION\" | awk '{print tolower($0)}')\";;\n    *) SEMVER=\"patch\";;\nesac\nif [ -z \"$VERSION\" ]; then\n    echo \"No branch prefix detected. Defaulting to patch.\"\nfi\n\necho \"Semver bump: $SEMVER\"\n\n#---------------------#\n# Get Current Version #\n#---------------------#\nCURRENT_VERSION=$(node -p \"require('./package.json').version\")\necho \"Last version: $CURRENT_VERSION\"\nCURRENT_MAJOR=$(echo \"$CURRENT_VERSION\"|awk -F'.' '{print $1}')\nCURRENT_MINOR=$(echo \"$CURRENT_VERSION\"|awk -F'.' '{print $2}')\nCURRENT_PATCH=$(echo \"$CURRENT_VERSION\"|awk -F'.' '{print $3}'|awk -F'-' '{print $1}')\nCURRENT_PRERELEASE=$(echo \"$CURRENT_VERSION\"|awk -F'-' '{print $2}')\n\n#---------------------------#\n# Version & Release Package #\n#---------------------------#\n\n# create release note before versioning the project\nsh ./scripts/create_release_script.sh \"$NEW_VERSION\"\n\n# explicitly add the change log to the version bump commit\ngit add CHANGELOG.md\n\necho \"Configuring Github credentials\"\ngit config --global user.name '$GITHUB_ACTOR'\ngit config --global user.email 'github-action@users.noreply.github.com'\ngit remote set-url origin https://x-access-token:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY\n\necho \"Bumping version...\"\n\n# bump version, git tag, commit & then push changes\n# using -f to ignore the added release note\nnpm version -f \"$SEMVER\" -m \"Updating $SEMVER version to %s. [skip ci]\" --loglevel=error\necho \"Version bump successful\"\n\n# push to gitlab\n# no-verify is used to ignore any pre-push commits that may be used by the project\nif git push -f --tags origin \"$GITHUB_REF\" --follow-tags --no-verify; then\n    echo \"Version bump pushed successfully.\"\nelse\n    echo -e \"\\033[0;31mERROR: ***********************************************************************************\"\n    echo \"ERROR: Failed to push.\"\n    echo -e \"ERROR: ***********************************************************************************\\033[0m\"\n    exit 1\nfi"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 7500,
              "y": 1200
            }
          },
          "a663": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "push ver_bump.sh",
            "description": "Adds one element to the end of an array and returns the (newly modified) array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.7ac1.pushedArray",
                "elementN": "$var.eb55.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 7800,
              "y": 900
            }
          },
          "3c7a": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "push promote.py",
            "description": "Adds one element to the end of an array and returns the (newly modified) array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.a663.pushedArray",
                "elementN": "$var.3056.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 9000,
              "y": 900
            }
          },
          "433d": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "push action.yml",
            "description": "Adds request to update action.yml",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.a2e1.pushedArray",
                "elementN": "$var.8841.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 13800,
              "y": 1000
            }
          },
          "66a5": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "dev_action.yml file content",
            "description": "Creates input to update dev_action.yml file",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "action": "update",
                  "file_path": ".github/workflows/dev_action.yml",
                  "content": ""
                },
                "path": [
                  "content"
                ],
                "value": "name: dev-prebuilts-CI\n\n# Controls when the action will run. \non:\n  # Triggers the workflow on push events for every branch except dev and prod\n  push:\n    branches: \n      - dev\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\njobs:\n  # Lint code, test code quality, and ensure that there are no insecure dependencies\n  security: \n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'Skip CI')\"\n    steps:\n      - uses: actions/checkout@v4\n      - name: Verifying security\n        continue-on-error: true\n        run: |\n          npm i \n          echo \"node version: $(node --version)\"\n          echo \"npm version: $(npm --version)\"\n          npm audit --registry=https://registry.npmjs.org\n  \n  # Validates schema of manifest.json\n  schema_validation: \n    needs: security\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'Skip CI')\"\n    steps:\n      - uses: actions/checkout@v4\n      - name: Validating schema of manifest.json\n        run: |\n          npm i\n          npm run validateSchema\n\n  # Validates links in manifest.json        \n  schemaLinks_validation: \n    needs: security\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'Skip CI')\"\n    steps:\n      - uses: actions/checkout@v4\n      - name: Validating schema links in manifest.json\n        run: |\n          npm i\n          npm run validateSchemaLinks\n    \n  test: \n    needs: [schema_validation, schemaLinks_validation]\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'Skip CI')\"\n    steps:\n      - uses: actions/checkout@v4\n      - name: Test automation\n        run: echo \"This is where you should run your scripts to test your workflows\""
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 14400,
              "y": 1300
            }
          },
          "c482": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "push dev_action.yml",
            "description": "Adds request to update dev_action.yml",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.433d.pushedArray",
                "elementN": "$var.66a5.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 15000,
              "y": 1000
            }
          },
          "dcd": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "push manifest-schema.json",
            "description": "Adds one element to the end of an array and returns the (newly modified) array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.3c7a.pushedArray",
                "elementN": "$var.f182.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 11100,
              "y": 900
            }
          },
          "6fe8": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "manifestLinkTester.js file content",
            "description": "Set an object key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "action": "update",
                  "file_path": "test/manifestLinkTester.js",
                  "content": ""
                },
                "path": [
                  "content"
                ],
                "value": "const path = require('path'),\n      fs = require('fs-extra');\n\nconst args = process.argv.filter((element, index) => {\n  return index >=2;\n});\nif (args.length <= 0) {\n  const usage = `\n  ==============================================================\n    Simplified manifest schema validator, using ajv,\n    that can be used for very quick schema validations.\n    This will validate a json file against the schema\n    found in manifest-schema.json\n\n    Usage: node manifestTester.js someManifestFile.json\n\n    NOTE: for a graphical JSON schema validator go to\n    https://www.jsonschemavalidator.net/\n\n  ==============================================================`;\n  console.log(usage);\n  process.exit(1);\n}\n\nasync function runLinkValidation() {\n  const filePath = path.normalize(args[0]);\n\n  console.log(`Retrieving ${filePath}`);\n  const manifest = await fs.readFile(filePath, 'utf8');\n  console.log('Converting to JSON object');\n  const data = JSON.parse(manifest);\n\n  console.log('Iterating through artifacts...');\n  let valid=true;\n  for (let i=0; i<data.artifacts.length; i++){\n    const current = data.artifacts[i].location;\n    if (current){\n      if (fs.existsSync(`./${current}`)){\n        console.log(`\\t✅  Validating ${current}`);\n      }\n      else{\n        console.log(`\\t❌  Validating ${current}`);\n        valid = false;\n      }\n    }\n  }\n  if (!valid) {\n    console.error('Validation Failed  👎');\n    process.exit(1);\n  }\n  else {\n    console.log('Validation passed  👍');\n  }\n}\ntry {\n  runLinkValidation();\n}\ncatch(error) {\n  console.error(`Error occurred running the validator ${error}`);\n}"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 11700,
              "y": 1300
            }
          },
          "480f": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "push manifestLinkTester.js",
            "description": "Adds one element to the end of an array and returns the (newly modified) array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.dcd.pushedArray",
                "elementN": "$var.6fe8.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 12000,
              "y": 900
            }
          },
          "65f": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "manifestTester.js file content",
            "description": "Set an object key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "action": "update",
                  "file_path": "test/manifestTester.js",
                  "content": ""
                },
                "path": [
                  "content"
                ],
                "value": "const AJV = require('ajv'),\n  path = require('path'),\n  fs = require('fs-extra'),\n  r2 = require('r2'),\n  betterAjvErrors = require('better-ajv-errors');\n\nconst ajv = new AJV({\n  jsonPointers: true,\n  allErrors: true\n});\n\nconst args = process.argv.filter((element, index) => {\n  return index >= 2;\n});\nif (args.length != 2) {\n  const usage = `\n  ==============================================================\n    Simplified manifest schema validator, using ajv,\n    that can be used for very quick schema validations.\n    This will validate a json file against the schema\n    found in manifest-schema.json\n\n    Examples:\n    Usage: node manifestTester.js someManifestFile.json PATH/TO/SCHEMA/FILE.json\n    Usage: node manifestTester.js someManifestFile.json http://www.PATH.TO/SCHEMA/FILE.json\n\n    NOTE: for a graphical JSON schema validator go to\n    https://www.jsonschemavalidator.net/\n\n  ==============================================================`;\n  console.log(usage);\n  process.exit(1);\n}\n\nasync function runValidation() {\n  let schema;\n  if (args[1].includes(\"http\")) {\n    schema = await r2(args[1]).json;\n  }\n  else {\n    schema = require(path.join(__dirname, args[1]));\n  }\n  // console.log(`the schema is : ${JSON.stringify(schema)}`)\n  const filePath = path.normalize(args[0]);\n  console.log(`Retrieving ${filePath}`);\n  try {\n    const manifest = await fs.readFile(filePath, 'utf8');\n    console.log('Converting to JSON object');\n    const data = JSON.parse(manifest);\n\n    console.log('Initializing AJV with schema');\n    ajv.addSchema(schema, 'manifestSchema');\n    console.log(`Validating ${filePath} against the schema`);\n    var valid = ajv.validate('manifestSchema', data);\n    if (!valid) {\n      console.error('❌  Validation Failed');\n      const output = betterAjvErrors(schema, data, ajv.errors, { format: 'js' });\n      console.log(output);\n      process.exit(1);\n\n    }\n    else {\n      console.log('✅  Validation passed');\n    }\n  }\n  catch (error) {\n    console.error(error);\n    process.exit(1);\n  }\n}\ntry {\n  runValidation();\n}\ncatch (error) {\n  console.error(`❌  Error occurred running the validator ${error}`);\n  process.exit(1);\n}"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 12600,
              "y": 1300
            }
          },
          "a2e1": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "push manifestTester.js",
            "description": "Adds one element to the end of an array and returns the (newly modified) array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.480f.pushedArray",
                "elementN": "$var.65f.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 12900,
              "y": 1000
            }
          },
          "f40b": {
            "name": "arrayConcat",
            "canvasName": "concat",
            "summary": "Concatenates arrays together.",
            "description": "Used to merge two arrays",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.a523.return_data",
                "arrayN": "$var.2d37.return_data"
              },
              "outgoing": {
                "combinedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 3000,
              "y": 900
            }
          },
          "f6cd": {
            "name": "objectToString",
            "canvasName": "toString",
            "summary": "Converts a valid JSON value to a string.",
            "description": "Converts a valid JSON value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "value": "$var.229a.textObject",
                "replacer": "",
                "space": 2
              },
              "outgoing": {
                "stringified": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 10200,
              "y": 900
            }
          },
          "f182": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "manifest-schema.json content",
            "description": "Set an object key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "action": "update",
                  "file_path": "test/manifest-schema.json",
                  "content": ""
                },
                "path": [
                  "content"
                ],
                "value": "$var.f6cd.stringified"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 10500,
              "y": 1300
            }
          },
          "229a": {
            "name": "parse",
            "canvasName": "parse",
            "summary": "manifest-schema.json String Content",
            "description": "manifest-schema.json String Content",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "String",
            "variables": {
              "incoming": {
                "text": "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"$id\":\"iap-artifact-bundle\",\"type\":\"object\",\"title\":\"Artifact Bundle Schema\",\"default\":null,\"additionalProperties\":false,\"definitions\":{\"tagged\":{\"$id\":\"#/properties/properties/properties/tagged\",\"type\":\"array\",\"title\":\"The Tagged Item\",\"description\":\"These are the items that need to be tagged\",\"uniqueItems\":true,\"items\":{\"$id\":\"#/properties/properties/properties/tagged/items\",\"type\":\"string\",\"title\":\"The Tagged Items\",\"default\":\"\",\"examples\":[\"mop-example-1\",\"mop-analytic-example-1\",\"workflow-example-1\"],\"pattern\":\"^(.*)$\"}}},\"required\":[\"bundleName\",\"version\",\"createdEpoch\",\"artifacts\"],\"properties\":{\"bundleName\":{\"$id\":\"#/properties/bundleName\",\"type\":\"string\",\"title\":\"The Bundle Name\",\"description\":\"Unique identifier for this bundle of artifacts.\",\"default\":\"\",\"examples\":[\"ExampleBundle\"],\"pattern\":\"^(.*)$\"},\"version\":{\"$id\":\"#/properties/version\",\"type\":\"string\",\"title\":\"The Version\",\"description\":\"The version of this bundle\",\"default\":\"\",\"examples\":[\"1.2.3\"],\"pattern\":\"^(.*)$\"},\"fingerprint\":{\"$id\":\"#/properties/fingerprint\",\"type\":\"string\",\"title\":\"The Fingerprint\",\"description\":\"For use in future implementations of  installable modules where additional security measures need to be implemented. \",\"default\":\"\",\"examples\":[\"Some verifiable token\"],\"pattern\":\"^(.*)$\"},\"createdEpoch\":{\"$id\":\"#/properties/createdEpoch\",\"type\":\"string\",\"title\":\"The Created Time\",\"description\":\"The date, in milliseconds since the unix epoch, for when this bundle was created/updated. Usually this is value of Date.now() or calling getTime() on a js Date object\",\"default\":\"\",\"examples\":[\"1554836984020\",\"result from Date.now()\"],\"pattern\":\"^(.*)$\"},\"artifacts\":{\"$id\":\"#/properties/artifacts\",\"type\":\"array\",\"title\":\"The Artifacts \",\"description\":\"List of artifacts in this bundle. Note that each item must be unique and duplicates will fail validation\",\"default\":null,\"uniqueItems\":true,\"items\":{\"$id\":\"#/properties/artifacts/items\",\"type\":\"object\",\"title\":\"Artifact items\",\"default\":null,\"additionalProperties\":false,\"properties\":{\"id\":{\"$id\":\"#/properties/artifacts/items/properties/id\",\"type\":\"string\",\"title\":\"The Artifact Id\",\"description\":\"Unique Id identifying this artifact. \",\"default\":\"\",\"examples\":[\"workflow-example-1\",\"mop-template-1\"],\"pattern\":\"^(.*)$\"},\"name\":{\"$id\":\"#/properties/artifacts/items/properties/name\",\"type\":\"string\",\"title\":\"The Artifact Name\",\"description\":\"The Name identifying this artifact\",\"default\":\"\",\"examples\":[\"My Worflow1\"],\"pattern\":\"^(.*)$\"},\"type\":{\"$id\":\"#/properties/artifacts/items/properties/type\",\"type\":\"string\",\"enum\":[\"mop-analytic-template\",\"mop-template\",\"workflow\",\"json-forms\",\"tag\",\"template\",\"forms\",\"golden-config\",\"service-catalog\",\"ac-agenda-job\",\"adapter\",\"app\",\"transformation\",\"automation\"],\"title\":\"The Artifact Type \",\"description\":\"The type of artifact(s) this entry encompasses. Must be one of the supported types listed in the enum\",\"default\":\"\",\"examples\":[\"mop-analytic-template\",\"mop-template\",\"workflow\",\"tag\",\"forms\",\"golden-config\"],\"pattern\":\"^(.*)$\"},\"location\":{\"$id\":\"#/properties/artifacts/items/properties/location\",\"type\":\"string\",\"title\":\"The Artifact Location\",\"description\":\"Path, relative to the root of this bundle, to either a specific artifact file or a directory of artifacts of a specific type. Future implementations may allow for URLs to external assets\",\"default\":\"\",\"examples\":[\"/bundles/ExampleBundle/workflow/myWorkflow1.json\",\"/bundles/workflows/\"],\"pattern\":\"^(.*)$\"},\"description\":{\"$id\":\"#/properties/artifacts/items/properties/description\",\"type\":\"string\",\"title\":\"The Description \",\"description\":\"The description of what this artifact is \",\"default\":\"\",\"examples\":[\"This artifact does things and stuff\"],\"pattern\":\"^(.*)$\"},\"properties\":{\"$id\":\"#/properties/artifacts/items/properties/properties\",\"type\":\"object\",\"title\":\"The Properties Schema\",\"description\":\"Additional properties that may be needed for a type during it's installations\",\"properties\":{\"tagged\":{\"$ref\":\"#/definitions/tagged\"}}}},\"if\":{\"properties\":{\"type\":{\"enum\":[\"tag\"]}}},\"then\":{\"required\":[\"id\",\"name\",\"type\",\"properties\"]},\"else\":{\"required\":[\"id\",\"name\",\"type\",\"location\"]}}}}}"
              },
              "outgoing": {
                "textObject": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 9600,
              "y": 1300
            }
          },
          "2deb": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "prod_action.yml file content",
            "description": "Creates input to update prod_action.yml file",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "action": "update",
                  "file_path": ".github/workflows/prod_action.yml",
                  "content": ""
                },
                "path": [
                  "content"
                ],
                "value": "name: prod-prebuilts-CI\n\npermissions:\n  contents: write\n\n# Controls when the action will run. \non:\n  # Triggers the workflow on push events but only for the dev branch\n  push:\n    branches: \n      - prod\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n\n  # Lint code, test code quality, and ensure that there are no insecure dependencies\n  security: \n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'Skip CI')\"\n    steps:\n      - uses: actions/checkout@v4\n      - name: Verifying security\n        continue-on-error: true\n        run: |\n          npm i \n          echo \"node version: $(node --version)\"\n          echo \"npm version: $(npm --version)\"\n          npm audit --registry=https://registry.npmjs.org\n  \n  # Validates schema of manifest.json\n  schema_validation: \n    needs: security\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'Skip CI')\"\n    steps:\n      - uses: actions/checkout@v4\n      - name: Validating schema of manifest.json\n        run: |\n          npm i\n          npm run validateSchema\n\n  # Validates links in manifest.json        \n  schemaLinks_validation: \n    needs: security\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'Skip CI')\"\n    steps:\n      - uses: actions/checkout@v4\n      - name: Validating schema links in manifest.json\n        run: |\n          npm i\n          npm run validateSchemaLinks\n  \n  # Generates artifact.json \n  generate:\n    needs: [schema_validation, schemaLinks_validation]\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'Skip CI')\"\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n      - uses: actions/checkout@v4\n      - name: Generate Artifact.json file\n        run: chmod +x ./scripts/commit.sh && ./scripts/commit.sh\n      - name: Upload Artifact\n        uses: actions/upload-artifact@v4\n        with: \n          name: artifact\n          path: artifact.json\n\n  # Promotes artifact.json to IAP prod environment\n  promote: \n    needs: [generate]\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'Skip CI')\"\n    steps:\n      - uses: actions/checkout@v4\n      - name: Download artifact.json from previous job \n        uses: actions/download-artifact@v4\n        with:\n          name: artifact\n      - name: Promote to IAP\n        env: \n          IAP_HOSTNAME: ${{ vars.IAP_HOSTNAME }}\n          IAP_USERNAME: ${{ vars.IAP_USERNAME}}\n          IAP_PW: ${{ secrets.IAP_PW }}\n          IAP_TOKEN: ${{ secrets.IAP_TOKEN }}\n          PROMOTE: ${{ vars.PROMOTE }}\n        run: |\n          if [[ $PROMOTE != \"False\" ]]; then\n            if ! python3 ./scripts/promote.py ./artifact.json; then\n              echo -e \"\\033[0;31mERROR: ***********************************************************************************\"\n              echo \"ERROR: There was an issue promoting artifact.json to IAP.\"\n              echo -e \"ERROR: ***********************************************************************************\\033[0m\"\n              exit 1\n            fi\n          else\n            echo \"PROMOTE set to False, skipping promoting to IAP.\"\n          fi\n"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 15900,
              "y": 1300
            }
          },
          "40d1": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "push prod_action.yml",
            "description": "Adds request to update prod_action.yml",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.c482.pushedArray",
                "elementN": "$var.2deb.object"
              },
              "outgoing": {
                "pushedArray": "$var.job.pushedArray"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 16500,
              "y": 1000
            }
          }
        },
        "transitions": {
          "3056": {
            "3c7a": {
              "type": "standard",
              "state": "success"
            }
          },
          "8841": {
            "433d": {
              "type": "standard",
              "state": "success"
            }
          },
          "9943": {
            "bea1": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_start": {
            "d35d": {
              "type": "standard",
              "state": "success"
            },
            "77b4": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "f3ce": {
            "a523": {
              "type": "standard",
              "state": "success"
            }
          },
          "7bef": {
            "f3ce": {
              "type": "standard",
              "state": "success"
            }
          },
          "d35d": {
            "7bef": {
              "type": "standard",
              "state": "success"
            }
          },
          "77b4": {
            "c586": {
              "type": "standard",
              "state": "success"
            }
          },
          "c586": {
            "2d37": {
              "type": "standard",
              "state": "success"
            }
          },
          "a523": {
            "f40b": {
              "type": "standard",
              "state": "success"
            }
          },
          "2d37": {
            "f40b": {
              "type": "standard",
              "state": "success"
            }
          },
          "ef4d": {
            "6e7b": {
              "type": "standard",
              "state": "success"
            }
          },
          "6e7b": {
            "361f": {
              "type": "standard",
              "state": "success"
            }
          },
          "361f": {
            "9943": {
              "type": "standard",
              "state": "success"
            }
          },
          "bea1": {
            "7ac1": {
              "type": "standard",
              "state": "success"
            }
          },
          "7e61": {},
          "7ac1": {
            "eb55": {
              "type": "standard",
              "state": "success"
            }
          },
          "eb55": {
            "a663": {
              "type": "standard",
              "state": "success"
            }
          },
          "a663": {
            "3056": {
              "type": "standard",
              "state": "success"
            }
          },
          "3c7a": {
            "229a": {
              "type": "standard",
              "state": "success"
            }
          },
          "433d": {
            "66a5": {
              "type": "standard",
              "state": "success"
            }
          },
          "66a5": {
            "c482": {
              "type": "standard",
              "state": "success"
            }
          },
          "c482": {
            "2deb": {
              "type": "standard",
              "state": "success"
            }
          },
          "dcd": {
            "6fe8": {
              "type": "standard",
              "state": "success"
            }
          },
          "6fe8": {
            "480f": {
              "type": "standard",
              "state": "success"
            }
          },
          "480f": {
            "65f": {
              "type": "standard",
              "state": "success"
            }
          },
          "65f": {
            "a2e1": {
              "type": "standard",
              "state": "success"
            }
          },
          "a2e1": {
            "8841": {
              "type": "standard",
              "state": "success"
            }
          },
          "f40b": {
            "ef4d": {
              "type": "standard",
              "state": "success"
            }
          },
          "f6cd": {
            "f182": {
              "type": "standard",
              "state": "success"
            }
          },
          "f182": {
            "dcd": {
              "type": "standard",
              "state": "success"
            }
          },
          "229a": {
            "f6cd": {
              "type": "standard",
              "state": "success"
            }
          },
          "2deb": {
            "40d1": {
              "type": "standard",
              "state": "success"
            }
          },
          "40d1": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          }
        },
        "type": "automation",
        "canvasVersion": 3,
        "tags": [],
        "groups": [],
        "migrationVersion": 4
      }
    },
    {
      "type": "workflow",
      "data": {
        "created": "2021-03-21T17:59:03.698Z",
        "createdVersion": "5.29.14-2020.2.13",
        "created_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {}
        },
        "description": null,
        "font_size": 12,
        "inputSchema": {
          "type": "object",
          "properties": {
            "artifact": {
              "title": "data_array",
              "type": "array",
              "items": [
                {
                  "type": [
                    "string",
                    "number",
                    "integer",
                    "object",
                    "array",
                    "boolean",
                    "null"
                  ]
                }
              ]
            },
            "action": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            }
          },
          "required": [
            "artifact",
            "action"
          ]
        },
        "lastUpdatedVersion": "4.69.3-2023.2.129",
        "last_updated": "2025-02-06T18:32:42.496Z",
        "last_updated_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {}
        },
        "name": "Push Bundles to GitHub Commit Data",
        "outputSchema": {
          "type": "object",
          "properties": {
            "artifact": {
              "title": "updated_object",
              "type": [
                "array",
                "string",
                "boolean",
                "integer",
                "number",
                "object"
              ],
              "examples": [
                "updated item"
              ]
            },
            "action": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            },
            "commitActions": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "name_first_nested": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "name_second_nested": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            }
          }
        },
        "tasks": {
          "1601": {
            "name": "push",
            "summary": "Push Item to Array",
            "description": "Push item to a job variable array",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "operation",
            "variables": {
              "incoming": {
                "job_variable": "commitActions",
                "item_to_push": "$var.6cdf.merged_object"
              },
              "outgoing": {
                "job_variable_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": 6900,
              "y": 2900
            }
          },
          "2450": {
            "name": "query",
            "summary": "Query name (first nested)",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "operation",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "name",
                "obj": "$var.798a.current_item"
              },
              "outgoing": {
                "return_data": null
              },
              "error": ""
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 2700,
              "y": 2000
            }
          },
          "3697": {
            "name": "evaluation",
            "summary": "Evaluation: Directory?",
            "description": "Run an evaluation",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "operation",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "return_data",
                          "task": "db0b"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": "file",
                          "task": "static"
                        }
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": 4500,
              "y": 2100
            }
          },
          "4001": {
            "name": "evaluation",
            "summary": "Evaluation: File?",
            "description": "Run an evaluation",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "operation",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "return_data",
                          "task": "6433"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": "file",
                          "task": "static"
                        }
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": 1800,
              "y": 1500
            }
          },
          "6433": {
            "name": "query",
            "summary": "Query type",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "operation",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "type",
                "obj": "$var.e24a.current_item"
              },
              "outgoing": {
                "return_data": null
              },
              "error": ""
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 1500,
              "y": 1300
            }
          },
          "7554": {
            "name": "stringConcat",
            "summary": "Concatenate / file",
            "description": "Concatenates a string with a second string(s). The second parameter can be a string or array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "String",
            "type": "automatic",
            "variables": {
              "incoming": {
                "str": "$var.f401.combinedStrings",
                "stringN": [
                  "/"
                ]
              },
              "outgoing": {
                "combinedStrings": null
              },
              "error": ""
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "canvasName": "concat",
            "nodeLocation": {
              "x": 5700,
              "y": 2900
            }
          },
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "summary": "workflow_start",
            "description": "workflow_start",
            "nodeLocation": {
              "x": 600,
              "y": 900
            }
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "summary": "workflow_end",
            "description": "workflow_end",
            "nodeLocation": {
              "x": 2700,
              "y": 900
            }
          },
          "e24a": {
            "name": "forEach",
            "summary": "For Each Loop",
            "description": "Iterate over each item in an array",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "operation",
            "variables": {
              "incoming": {
                "data_array": "$var.job.artifact"
              },
              "outgoing": {
                "current_item": null
              },
              "error": ""
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 1500,
              "y": 1000
            }
          },
          "fcfb": {
            "name": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "operation",
            "variables": {
              "incoming": {
                "name": "commitActions",
                "value": []
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": 900,
              "y": 1000
            }
          },
          "ec3b": {
            "name": "query",
            "summary": "Query name",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "operation",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "name",
                "obj": "$var.e24a.current_item"
              },
              "outgoing": {
                "return_data": null
              },
              "error": ""
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 1800,
              "y": 1300
            }
          },
          "7bf5": {
            "name": "query",
            "summary": "Query content",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "operation",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "content",
                "obj": "$var.e24a.current_item"
              },
              "outgoing": {
                "return_data": null
              },
              "error": ""
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 1500,
              "y": 1500
            }
          },
          "d8c5": {
            "name": "push",
            "summary": "Push Item to Array",
            "description": "Push item to a job variable array",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "operation",
            "variables": {
              "incoming": {
                "job_variable": "commitActions",
                "item_to_push": "$var.babe.merged_object"
              },
              "outgoing": {
                "job_variable_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": 2700,
              "y": 1300
            }
          },
          "798a": {
            "name": "forEach",
            "summary": "Iterate first level",
            "description": "Iterate over each item in an array",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "operation",
            "variables": {
              "incoming": {
                "data_array": "$var.7bf5.return_data"
              },
              "outgoing": {
                "current_item": null
              },
              "error": ""
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 2100,
              "y": 1800
            }
          },
          "db0b": {
            "name": "query",
            "summary": "Query type (first nested)",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "operation",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "type",
                "obj": "$var.798a.current_item"
              },
              "outgoing": {
                "return_data": null
              },
              "error": ""
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 2700,
              "y": 2100
            }
          },
          "b93a": {
            "name": "query",
            "summary": "Query content (first nested)",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "operation",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "content",
                "obj": "$var.798a.current_item"
              },
              "outgoing": {
                "return_data": null
              },
              "error": ""
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 2700,
              "y": 2200
            }
          },
          "80bf": {
            "name": "stringConcat",
            "summary": "Concatenate / nested",
            "description": "Concatenates a string with a second string(s). The second parameter can be a string or array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "String",
            "type": "automatic",
            "variables": {
              "incoming": {
                "str": "$var.ec3b.return_data",
                "stringN": [
                  "/"
                ]
              },
              "outgoing": {
                "combinedStrings": null
              },
              "error": ""
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "canvasName": "concat",
            "nodeLocation": {
              "x": 3300,
              "y": 2100
            }
          },
          "f401": {
            "name": "stringConcat",
            "summary": "Concatenate nested name",
            "description": "Concatenates a string with a second string(s). The second parameter can be a string or array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "String",
            "type": "automatic",
            "variables": {
              "incoming": {
                "str": "$var.80bf.combinedStrings",
                "stringN": "$var.job.name_first_nested"
              },
              "outgoing": {
                "combinedStrings": null
              },
              "error": ""
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "canvasName": "concat",
            "nodeLocation": {
              "x": 3900,
              "y": 2100
            }
          },
          "f131": {
            "name": "forEach",
            "summary": "Iterate second level",
            "description": "Iterate over each item in an array",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "operation",
            "variables": {
              "incoming": {
                "data_array": "$var.b93a.return_data"
              },
              "outgoing": {
                "current_item": null
              },
              "error": ""
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 4800,
              "y": 2400
            }
          },
          "a433": {
            "name": "query",
            "summary": "Query name (second nested)",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "operation",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "name",
                "obj": "$var.f131.current_item"
              },
              "outgoing": {
                "return_data": null
              },
              "error": ""
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 5100,
              "y": 2700
            }
          },
          "d522": {
            "name": "query",
            "summary": "Query content (second nested)",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "operation",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "content",
                "obj": "$var.f131.current_item"
              },
              "outgoing": {
                "return_data": null
              },
              "error": ""
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 5100,
              "y": 2900
            }
          },
          "57b9": {
            "name": "stringConcat",
            "summary": "Concatenate file name",
            "description": "Concatenates a string with a second string(s). The second parameter can be a string or array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "String",
            "type": "automatic",
            "variables": {
              "incoming": {
                "str": "$var.7554.combinedStrings",
                "stringN": "$var.job.name_second_nested"
              },
              "outgoing": {
                "combinedStrings": null
              },
              "error": ""
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "canvasName": "concat",
            "nodeLocation": {
              "x": 6000,
              "y": 2900
            }
          },
          "6cdf": {
            "name": "merge",
            "summary": "Merge action data",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "operation",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "action",
                    "value": {
                      "task": "job",
                      "variable": "action",
                      "editable": true
                    }
                  },
                  {
                    "key": "file_path",
                    "value": {
                      "task": "57b9",
                      "variable": "combinedStrings"
                    }
                  },
                  {
                    "key": "content",
                    "value": {
                      "task": "d522",
                      "variable": "return_data"
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": 6600,
              "y": 2900
            }
          },
          "f815": {
            "name": "merge",
            "summary": "Merge action data",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "operation",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "action",
                    "value": {
                      "task": "job",
                      "variable": "action",
                      "editable": true
                    }
                  },
                  {
                    "key": "file_path",
                    "value": {
                      "task": "f401",
                      "variable": "combinedStrings"
                    }
                  },
                  {
                    "key": "content",
                    "value": {
                      "task": "b93a",
                      "variable": "return_data"
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": 4800,
              "y": 2000
            }
          },
          "33e4": {
            "name": "push",
            "summary": "Push Item to Array",
            "description": "Push item to a job variable array",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "operation",
            "variables": {
              "incoming": {
                "job_variable": "commitActions",
                "item_to_push": "$var.f815.merged_object"
              },
              "outgoing": {
                "job_variable_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": 5100,
              "y": 2000
            }
          },
          "9ed7": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "operation",
            "variables": {
              "incoming": {
                "name": "name_first_nested",
                "value": []
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": 3300,
              "y": 1700
            }
          },
          "89c4": {
            "name": "push",
            "canvasName": "push",
            "summary": "Push Item to Array",
            "description": "Push item to a job variable array",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "operation",
            "variables": {
              "incoming": {
                "job_variable": "name_first_nested",
                "item_to_push": "$var.2450.return_data"
              },
              "outgoing": {
                "job_variable_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": 3900,
              "y": 1700
            }
          },
          "329c": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "operation",
            "variables": {
              "incoming": {
                "name": "name_second_nested",
                "value": []
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": 5700,
              "y": 3200
            }
          },
          "63ff": {
            "name": "push",
            "canvasName": "push",
            "summary": "Push Item to Array",
            "description": "Push item to a job variable array",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "operation",
            "variables": {
              "incoming": {
                "job_variable": "name_second_nested",
                "item_to_push": "$var.a433.return_data"
              },
              "outgoing": {
                "job_variable_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": 6000,
              "y": 3200
            }
          },
          "babe": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge action data",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "action",
                    "value": {
                      "task": "job",
                      "variable": "action",
                      "editable": true
                    }
                  },
                  {
                    "key": "file_path",
                    "value": {
                      "task": "ec3b",
                      "variable": "return_data"
                    }
                  },
                  {
                    "key": "content",
                    "value": {
                      "task": "7bf5",
                      "variable": "return_data"
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "nodeLocation": {
              "x": 2100,
              "y": 1400
            }
          },
          "f54c": {
            "name": "modify",
            "canvasName": "modify",
            "summary": "Modify Data",
            "description": "Empty the old artifact array to save space.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "object_to_update": "$var.job.artifact",
                "query": "",
                "new_value": []
              },
              "outgoing": {
                "updated_object": "$var.job.artifact"
              },
              "error": ""
            },
            "deprecated": false,
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 2100,
              "y": 1000
            }
          }
        },
        "transitions": {
          "1601": {},
          "2450": {
            "9ed7": {
              "type": "standard",
              "state": "success"
            }
          },
          "3697": {
            "f815": {
              "type": "standard",
              "state": "success"
            },
            "f131": {
              "type": "standard",
              "state": "failure"
            }
          },
          "4001": {
            "798a": {
              "type": "standard",
              "state": "failure"
            },
            "babe": {
              "type": "standard",
              "state": "success"
            }
          },
          "6433": {
            "4001": {
              "type": "standard",
              "state": "success"
            },
            "ec3b": {
              "type": "standard",
              "state": "success"
            },
            "7bf5": {
              "type": "standard",
              "state": "success"
            }
          },
          "7554": {
            "329c": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_start": {
            "fcfb": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "e24a": {
            "6433": {
              "type": "standard",
              "state": "loop"
            },
            "f54c": {
              "type": "standard",
              "state": "success"
            }
          },
          "fcfb": {
            "e24a": {
              "type": "standard",
              "state": "success"
            }
          },
          "30ff": {},
          "ec3b": {
            "4001": {
              "type": "standard",
              "state": "success"
            }
          },
          "7bf5": {
            "4001": {
              "type": "standard",
              "state": "success"
            }
          },
          "d8c5": {},
          "42ee": {},
          "798a": {
            "db0b": {
              "type": "standard",
              "state": "loop"
            }
          },
          "db0b": {
            "2450": {
              "type": "standard",
              "state": "success"
            },
            "b93a": {
              "type": "standard",
              "state": "success"
            },
            "80bf": {
              "type": "standard",
              "state": "success"
            }
          },
          "9e73": {},
          "b93a": {
            "80bf": {
              "type": "standard",
              "state": "success"
            }
          },
          "80bf": {
            "f401": {
              "type": "standard",
              "state": "success"
            }
          },
          "f401": {
            "3697": {
              "type": "standard",
              "state": "success"
            }
          },
          "f131": {
            "a433": {
              "type": "standard",
              "state": "loop"
            }
          },
          "a433": {
            "d522": {
              "type": "standard",
              "state": "success"
            }
          },
          "d522": {
            "7554": {
              "type": "standard",
              "state": "success"
            }
          },
          "57b9": {
            "6cdf": {
              "type": "standard",
              "state": "success"
            }
          },
          "6cdf": {
            "1601": {
              "type": "standard",
              "state": "success"
            }
          },
          "6a5b": {},
          "f815": {
            "33e4": {
              "type": "standard",
              "state": "success"
            }
          },
          "33e4": {},
          "974a": {},
          "30a4": {},
          "9ed7": {
            "89c4": {
              "type": "standard",
              "state": "success"
            }
          },
          "89c4": {
            "f401": {
              "type": "standard",
              "state": "success"
            }
          },
          "329c": {
            "63ff": {
              "type": "standard",
              "state": "success"
            }
          },
          "63ff": {
            "57b9": {
              "type": "standard",
              "state": "success"
            }
          },
          "babe": {
            "d8c5": {
              "type": "standard",
              "state": "success"
            }
          },
          "f54c": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          }
        },
        "type": "automation",
        "canvasVersion": 3,
        "tags": [],
        "groups": [],
        "migrationVersion": 4
      }
    },
    {
      "type": "workflow",
      "data": {
        "name": "Prebuilt Promotion Github Create Branch",
        "tasks": {
          "788": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "Set Object Key",
            "description": "Set an object key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": "$var.job.MRPayload",
                "path": [
                  "title"
                ],
                "value": "$var.e222.combinedStrings"
              },
              "outgoing": {
                "object": "$var.job.MRPayload"
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 4500,
              "y": 1300
            }
          },
          "2759": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "Set Object ref",
            "description": "Set an object key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": "$var.job.branchPayload",
                "path": [
                  "ref"
                ],
                "value": "$var.bcde.combinedStrings"
              },
              "outgoing": {
                "object": "$var.job.branchPayload"
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 3000,
              "y": 1300
            }
          },
          "7687": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "Set Object sha",
            "description": "Set an object key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": "$var.job.branchPayload",
                "path": [
                  "sha"
                ],
                "value": "$var.bfe3.return_data"
              },
              "outgoing": {
                "object": "$var.job.branchPayload"
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 3000,
              "y": 1000
            }
          },
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "nodeLocation": {
              "x": 0,
              "y": 1000
            }
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "nodeLocation": {
              "x": 6000,
              "y": 900
            }
          },
          "7a0e": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "branchPayload",
                "value": {
                  "ref": "refs/heads/release",
                  "sha": "14e47145895828a38eb8d37dba75004c02652a69"
                }
              },
              "outgoing": {
                "value": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 600,
              "y": 852
            }
          },
          "aec2": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "MRPayload",
                "value": {
                  "title": "PullRequest",
                  "head": "Dummy",
                  "base": "Dummy"
                }
              },
              "outgoing": {
                "value": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 600,
              "y": 1200
            }
          },
          "a545": {
            "name": "getReposOwnerRepoBranchesBranch",
            "canvasName": "getReposOwnerRepoBranchesBranch",
            "summary": "Get Branch",
            "description": "Get Branch",
            "location": "Adapter",
            "locationType": "GitHub",
            "app": "GitHub",
            "type": "automatic",
            "displayName": "GitHub",
            "variables": {
              "incoming": {
                "owner": "$var.job.owner",
                "repo": "$var.job.repo",
                "branch": "$var.job.Targetbranch",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 1200,
              "y": 1000
            }
          },
          "bfe3": {
            "name": "query",
            "canvasName": "query",
            "summary": "get Branch sha",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response. commit.sha",
                "obj": "$var.a545.result"
              },
              "outgoing": {
                "return_data": null
              },
              "error": ""
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 1800,
              "y": 1000
            }
          },
          "c5d2": {
            "name": "getTime",
            "canvasName": "getTime",
            "summary": "Get time",
            "description": "Gets the current time with an optional offset, timezone shift, and format string",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Time",
            "variables": {
              "incoming": {
                "timezone": "-05:00",
                "offsetDuration": "",
                "format": "YYYY-MM-DDTHH-mm-ss"
              },
              "outgoing": {
                "time": null
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 2100,
              "y": 1000
            }
          },
          "f40e": {
            "name": "stringConcat",
            "canvasName": "concat",
            "summary": "Branch Part1",
            "description": "Concatenates a string with a second string(s). The second parameter can be a string or array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "String",
            "variables": {
              "incoming": {
                "str": "_",
                "stringN": "$var.e747.return_data"
              },
              "outgoing": {
                "combinedStrings": null
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 2700,
              "y": 1300
            }
          },
          "e747": {
            "name": "query",
            "canvasName": "query",
            "summary": "get Time value",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "time",
                "obj": "$var.c5d2.time"
              },
              "outgoing": {
                "return_data": null
              },
              "error": ""
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 2700,
              "y": 1000
            }
          },
          "bcde": {
            "name": "stringConcat",
            "canvasName": "concat",
            "summary": "Branch Part3",
            "description": "Concatenates a string with a second string(s). The second parameter can be a string or array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "String",
            "variables": {
              "incoming": {
                "str": "refs/heads/",
                "stringN": "$var.e610.combinedStrings"
              },
              "outgoing": {
                "combinedStrings": null
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 3000,
              "y": 1500
            }
          },
          "e610": {
            "name": "stringConcat",
            "canvasName": "concat",
            "summary": "Branch Part2",
            "description": "Concatenates a string with a second string(s). The second parameter can be a string or array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "String",
            "variables": {
              "incoming": {
                "str": "$var.job.MRType",
                "stringN": "$var.f40e.combinedStrings"
              },
              "outgoing": {
                "combinedStrings": null
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 2700,
              "y": 1500
            }
          },
          "107d": {
            "name": "postReposOwnerRepoGitRefs",
            "canvasName": "postReposOwnerRepoGitRefs",
            "summary": "Create a Reference",
            "description": "Create a Reference",
            "location": "Adapter",
            "locationType": "GitHub",
            "app": "GitHub",
            "type": "automatic",
            "displayName": "GitHub",
            "variables": {
              "incoming": {
                "owner": "$var.job.owner",
                "repo": "$var.job.repo",
                "body": "$var.job.branchPayload",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 3900,
              "y": 1000
            }
          },
          "5bd7": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "Set Object Key",
            "description": "Set an object key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": "$var.job.MRPayload",
                "path": [
                  "head"
                ],
                "value": "$var.e610.combinedStrings"
              },
              "outgoing": {
                "object": "$var.job.MRPayload"
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 3900,
              "y": 1300
            }
          },
          "c3cd": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "Set Object Key",
            "description": "Set an object key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": "$var.job.MRPayload",
                "path": [
                  "base"
                ],
                "value": "$var.job.Targetbranch"
              },
              "outgoing": {
                "object": "$var.job.MRPayload"
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 3600,
              "y": 1500
            }
          },
          "e222": {
            "name": "stringConcat",
            "canvasName": "concat",
            "summary": "Pull Request title",
            "description": "Concatenates a string with a second string(s). The second parameter can be a string or array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "String",
            "variables": {
              "incoming": {
                "str": "pullRequest",
                "stringN": "$var.e747.return_data"
              },
              "outgoing": {
                "combinedStrings": null
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 4500,
              "y": 1500
            }
          }
        },
        "transitions": {
          "788": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "2759": {
            "7687": {
              "type": "standard",
              "state": "success"
            }
          },
          "7687": {
            "107d": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_start": {
            "7a0e": {
              "type": "standard",
              "state": "success"
            },
            "aec2": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "7a0e": {
            "a545": {
              "type": "standard",
              "state": "success"
            }
          },
          "aec2": {
            "a545": {
              "type": "standard",
              "state": "success"
            }
          },
          "a545": {
            "bfe3": {
              "type": "standard",
              "state": "success"
            }
          },
          "bfe3": {
            "c5d2": {
              "type": "standard",
              "state": "success"
            }
          },
          "c5d2": {
            "e747": {
              "type": "standard",
              "state": "success"
            }
          },
          "f40e": {
            "e610": {
              "type": "standard",
              "state": "success"
            }
          },
          "e747": {
            "f40e": {
              "type": "standard",
              "state": "success"
            }
          },
          "bcde": {
            "2759": {
              "type": "standard",
              "state": "success"
            }
          },
          "e610": {
            "bcde": {
              "type": "standard",
              "state": "success"
            }
          },
          "107d": {
            "5bd7": {
              "type": "standard",
              "state": "success"
            }
          },
          "5bd7": {
            "c3cd": {
              "type": "standard",
              "state": "success"
            }
          },
          "c3cd": {
            "e222": {
              "type": "standard",
              "state": "success"
            }
          },
          "e222": {
            "788": {
              "type": "standard",
              "state": "success"
            }
          }
        },
        "inputSchema": {
          "type": "object",
          "properties": {
            "owner": {
              "title": "owner",
              "type": "string"
            },
            "repo": {
              "title": "repo",
              "type": "string"
            },
            "Targetbranch": {
              "title": "branch",
              "type": "string"
            },
            "adapter_id": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "MRType": {
              "title": "str",
              "type": "string",
              "examples": [
                "Hello"
              ]
            }
          },
          "required": [
            "owner",
            "repo",
            "Targetbranch",
            "adapter_id",
            "MRType"
          ]
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "owner": {
              "title": "owner",
              "type": "string"
            },
            "repo": {
              "title": "repo",
              "type": "string"
            },
            "Targetbranch": {
              "title": "branch",
              "type": "string"
            },
            "adapter_id": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "MRType": {
              "title": "str",
              "type": "string",
              "examples": [
                "Hello"
              ]
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            },
            "MRPayload": {
              "title": "object",
              "type": "object",
              "properties": {},
              "examples": [
                {
                  "first": {
                    "second": {
                      "third": "last"
                    }
                  }
                }
              ]
            },
            "branchPayload": {
              "title": "object",
              "type": "object",
              "properties": {},
              "examples": [
                {
                  "first": {
                    "second": {
                      "third": "last"
                    }
                  }
                }
              ]
            }
          }
        },
        "created": "2022-05-20T13:29:35.081Z",
        "createdVersion": "5.40.5-2021.1.72.0",
        "created_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {}
        },
        "font_size": 12,
        "lastUpdatedVersion": "5.55.2-2023.2.14",
        "last_updated": "2025-02-07T18:10:17.203Z",
        "last_updated_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {}
        },
        "preAutomationTime": 0,
        "sla": 0,
        "type": "automation",
        "canvasVersion": 3,
        "tags": [],
        "groups": [],
        "migrationVersion": 4
      }
    },
    {
      "type": "workflow",
      "data": {
        "created": "2022-04-15T14:36:04.568Z",
        "createdVersion": "5.40.5-2021.1.72.0",
        "created_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {}
        },
        "description": "",
        "font_size": 12,
        "inputSchema": {
          "type": "object",
          "properties": {}
        },
        "lastUpdatedVersion": "4.69.3-2023.2.129",
        "last_updated": "2025-02-06T18:32:42.588Z",
        "last_updated_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {}
        },
        "name": "Prebuilt Promotion Bitbucket Add Files",
        "outputSchema": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            },
            "scriptFiles": {
              "title": "pushedArray",
              "type": "array",
              "items": [
                {
                  "type": [
                    "string",
                    "number",
                    "integer",
                    "object",
                    "array",
                    "boolean",
                    "null"
                  ]
                }
              ],
              "examples": [
                [
                  "Device1",
                  "Device2",
                  "Device3"
                ]
              ]
            },
            "testFiles": {
              "title": "pushedArray",
              "type": "array",
              "items": [
                {
                  "type": [
                    "string",
                    "number",
                    "integer",
                    "object",
                    "array",
                    "boolean",
                    "null"
                  ]
                }
              ],
              "examples": [
                [
                  "Device1",
                  "Device2",
                  "Device3"
                ]
              ]
            },
            "yml": {
              "title": "pushedArray",
              "type": "array",
              "items": [
                {
                  "type": [
                    "string",
                    "number",
                    "integer",
                    "object",
                    "array",
                    "boolean",
                    "null"
                  ]
                }
              ],
              "examples": [
                [
                  "Device1",
                  "Device2",
                  "Device3"
                ]
              ]
            }
          }
        },
        "preAutomationTime": 0,
        "sla": 0,
        "tasks": {
          "866": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "commit.sh file content",
            "description": "Set an object key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "name": "commit.sh"
                },
                "path": [
                  "content"
                ],
                "value": "if ! sh ./scripts/git_setup.sh; then\n  exit 1\nfi\necho \"BITBUCKET PROJECT ID IS - $BITBUCKET_REPO_UUID\"\ncd scripts\nGENERATE=`node generate $BITBUCKET_REPO_UUID $BITBUCKET_GIT_HTTP_ORIGIN ${BITBUCKET_BRANCH}`\nif [ $? -ne 0 ]\nthen \n  echo $GENERATE\n  exit 1\nfi\ncd ..\ngit add artifact.json\ngit diff --cached --name-only | if grep artifact.json\nthen\n    git commit -m \"AUTO-GENERATED FILE [skip ci]\"\n    if ! git push origin \"${BITBUCKET_BRANCH}\"; then\n      echo -e \"\\033[0;31mERROR: ***********************************************************************************\"\n      echo \"ERROR: There was an issue pushing artifact.json.\"\n      echo -e \"ERROR: ***********************************************************************************\\033[0m\"\n      exit 1\n    else\n      echo \"A new generated artifact.json file has been checked in to current branch\"\n    fi   \nelse\n    echo \"artifact.json file hasn't changed\"\nfi\n"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 2400,
              "y": 400
            }
          },
          "1649": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Add generate.js",
            "description": "Adds one element to the end of an array and returns the (newly modified) array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": [],
                "elementN": "$var.e474.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 1800,
              "y": 800
            }
          },
          "3853": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "create_release_script.sh file content",
            "description": "Set an object key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "name": "create_release_script.sh"
                },
                "path": [
                  "content"
                ],
                "value": "#!/bin/bash\n#---------------------#\n# Create release note #\n#---------------------#\n\nNEW_VERSION=$1\n\ncreate_release_note() {\n    # Create a changelog file if there isn't one\n    if [ ! -e CHANGELOG.md ]; then\n        touch CHANGELOG.md\n    fi\n    echo \"Creating release note...\"\n\n    #----------------#\n    # Changelog Body #\n    #----------------#\n    # Get the merge request info\n    CHANGELOG_BODY=\"$(git log --merges -1 --format=%b)\"\n    if [ -z \"$CHANGELOG_BODY\" ]; then\n        CHANGELOG_BODY=\"$(git log -1 --format='Bug fixes and performance improvements'%n%n'See commit '%h)\"\n    fi\n    #--------------------#\n    # Write Release Note #\n    #--------------------#\n\n    # get the current date\n    DATE=$(date +%m-%d-%Y)\n    # create the release note\n    RELEASE_NOTE=\"\\\\n## $NEW_VERSION [$DATE]\\\\n\\\\n* $CHANGELOG_BODY\\\\n\\\\n---\\\\n\"\n    # append Release Note to Top of CHANGELOG\n    if ! echo -e \"$RELEASE_NOTE$(cat CHANGELOG.md)\" > CHANGELOG.md; then\n        echo -e \"\\033[0;31mERROR: ***********************************************************************************\"\n        echo \"ERROR: Unable to append release note information to changelog.\"\n        echo -e \"ERROR: ***********************************************************************************\\033[0m\"\n    else\n        echo \"Created release note:\"\n        echo \"$RELEASE_NOTE\"\n    fi\n}\n\ncreate_release_note \"$NEW_VERSION\""
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 3300,
              "y": 400
            }
          },
          "5820": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Add manifest-schema.json",
            "description": "Adds one element to the end of an array and returns the (newly modified) array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": [],
                "elementN": "$var.7019.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 9600,
              "y": 800
            }
          },
          "6323": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "manifestTester.js file content",
            "description": "Set an object key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "name": "manifestTester.js"
                },
                "path": [
                  "content"
                ],
                "value": "const AJV = require('ajv'),\n  path = require('path'),\n  fs = require('fs-extra'),\n  r2 = require('r2'),\n  betterAjvErrors = require('better-ajv-errors');\n\nconst ajv = new AJV({\n  jsonPointers: true,\n  allErrors: true\n});\n\nconst args = process.argv.filter((element, index) => {\n  return index >= 2;\n});\nif (args.length != 2) {\n  const usage = `\n  ==============================================================\n    Simplified manifest schema validator, using ajv,\n    that can be used for very quick schema validations.\n    This will validate a json file against the schema\n    found in manifest-schema.json\n\n    Examples:\n    Usage: node manifestTester.js someManifestFile.json PATH/TO/SCHEMA/FILE.json\n    Usage: node manifestTester.js someManifestFile.json http://www.PATH.TO/SCHEMA/FILE.json\n\n    NOTE: for a graphical JSON schema validator go to\n    https://www.jsonschemavalidator.net/\n\n  ==============================================================`;\n  console.log(usage);\n  process.exit(1);\n}\n\nasync function runValidation() {\n  let schema;\n  if (args[1].includes(\"http\")) {\n    schema = await r2(args[1]).json;\n  }\n  else {\n    schema = require(path.join(__dirname, args[1]));\n  }\n  // console.log(`the schema is : ${JSON.stringify(schema)}`)\n  const filePath = path.normalize(args[0]);\n  console.log(`Retrieving ${filePath}`);\n  try {\n    const manifest = await fs.readFile(filePath, 'utf8');\n    console.log('Converting to JSON object');\n    const data = JSON.parse(manifest);\n\n    console.log('Initializing AJV with schema');\n    ajv.addSchema(schema, 'manifestSchema');\n    console.log(`Validating ${filePath} against the schema`);\n    var valid = ajv.validate('manifestSchema', data);\n    if (!valid) {\n      console.error('❌  Validation Failed');\n      const output = betterAjvErrors(schema, data, ajv.errors, { format: 'js' });\n      console.log(output);\n      process.exit(1);\n\n    }\n    else {\n      console.log('✅  Validation passed');\n    }\n  }\n  catch (error) {\n    console.error(error);\n    process.exit(1);\n  }\n}\ntry {\n  runValidation();\n}\ncatch (error) {\n  console.error(`❌  Error occurred running the validator ${error}`);\n  process.exit(1);\n}\n"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 11400,
              "y": 400
            }
          },
          "7019": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "manifest-schema.json content",
            "description": "Set an object key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "name": "manifest-schema.json"
                },
                "path": [
                  "content"
                ],
                "value": "$var.6f7b.stringified"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 9300,
              "y": 400
            }
          },
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "nodeLocation": {
              "x": 600,
              "y": 400
            }
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "nodeLocation": {
              "x": 13500,
              "y": 400
            }
          },
          "e474": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "generate.js file content",
            "description": "Set an object key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "name": "generate.js"
                },
                "path": [
                  "content"
                ],
                "value": "const path = require('path');\nconst fs = require('fs');\n\nconst files = ['package.json', 'manifest.json', 'README.md'];\nlet success = true;\n\nconst PID = process.argv[2];\nconst bitbucketUrl = process.argv[3];\nconst bitbucketBranch = process.argv[4];\nif (PID === null || PID == undefined) {\n  console.error('Please run this script with Bitbucket Repo UUID as an argument');\n  process.exit(2);\n}\nconsole.log(`Generating artifact.json file w/ ${PID} as Bitbucket Repo ID`);\n\n/*function fileTypetoType(fileType) {\n  const underscoreToDash = fileType.replace(/_/g, '-');\n  if (\n    fileType === 'ac_agenda_jobs' ||\n    fileType === 'mop_templates' ||\n    fileType === 'mop_analytic_templates' ||\n    fileType === 'templates' ||\n    fileType === 'workflows'\n  ) {\n    const singularize = underscoreToDash.substring(\n      0,\n      underscoreToDash.length - 1\n    );\n    return singularize;\n  }\n  if (fileType === 'catalog_store') {\n    return 'service-catalog';\n  }\n  return underscoreToDash;\n}*/\nconst filePath = __dirname.replace(\"/scripts\", \"\");\ntry {\n  const [packageJSON, manifest, readme] = files.map(entry => {\n    const result = fs.readFileSync(path.join(filePath, `./${entry}`), {\n      encoding: 'utf-8'\n    });\n    console.log(result)\n\n    if (entry !== 'README.md') {\n        const parsedRes = JSON.parse(result);\n        if (entry === 'manifest.json' && Object.prototype.hasOwnProperty.call(parsedRes, 'version')) {\n          delete parsedRes.version;\n        }\n      return parsedRes;\n    } else {\n      return result.replace(/\\.\\//gm, `${bitbucketUrl}/raw/${bitbucketBranch}/`);\n    }\n  });\n\n  // const result = fs.readdirSync(path.join(__dirname, './bundles'));\n  const bundles = [];\n  // result.forEach(entry => {\n  //   console.log(`   ➡ generating ${entry}(s)`);\n  //   const fileNames = fs.readdirSync(path.join(__dirname, `./bundles/${entry}`));\n  //   fileNames.forEach(file => {\n  //     const data = fs.readFileSync(\n  //       path.join(__dirname, `./bundles/${entry}/${file}`),\n  //       { encoding: 'utf-8' }\n  //     );\n  //     try {\n  //       bundles.push({ type: fileTypetoType(entry), data: JSON.parse(data) });\n  //       console.log(`     ⚪ ${file}   -   ✅`);\n  //     } catch(err) {\n  //       success = false;\n  //       console.log(`     ⚪ ${file}   -   ❌  - ${err}`);\n  //     }\n  //   });\n  // });\n\n  const components = manifest.artifacts;\n  components.forEach(file => {\n    try {\n      const data = fs.readFileSync(\n        path.join(filePath, `./${file.location}`),\n        { encoding: 'utf-8' }\n      );\n      bundles.push({ type: file.type, data: JSON.parse(data) });\n      console.log(`     ⚪ (${file.type})   -   ${file.location}   -   ✅`);\n    } catch (err) {\n      success = false;\n      console.log(`     ⚪  (${file.type})   -   ${file.location}   -   ❌  - ${err}`);\n    }\n  });\n\n  const metadata = {\n    name: packageJSON.name,\n    version: packageJSON.version,\n    description: packageJSON.description,\n    license: packageJSON.license,\n    repository: packageJSON.repository,\n    keywords: packageJSON.keywords,\n    author: packageJSON.author,\n    IAPDependencies: packageJSON.IAPDependencies,\n  };\n\n  if (success) {\n    console.log(`\\n\\nFinished successfully`);\n  } else {\n    console.log(`\\n\\nFinished with error(s)`);\n    process.exit(1);\n  }\n  const artifact = { metadata, manifest, bundles, readme };\n  fs.writeFileSync(\n    path.join(filePath, './artifact.json'),\n    JSON.stringify(artifact, null, 2)\n  );\n} catch (err) {\n  console.error(`Failed to generate artifact.json file: ${err}`);\n  process.exit(1);\n}\n"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 1200,
              "y": 400
            }
          },
          "d42b": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "git_setup.sh file content",
            "description": "Set an object key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "name": "git_setup.sh"
                },
                "path": [
                  "content"
                ],
                "value": "#!/bin/bash\n\n#-----------#\n# Git Setup #\n#-----------#\necho \"Setting up git credentials\"\nmkdir -p ~/.ssh\n\ngit config --global user.email \"$CI_GIT_EMAIL\"\ngit config --global user.name \"$CI_GIT_USERNAME\"\necho -e $ID_RSA > ~/.ssh/id_rsa\nchmod 0400 ~/.ssh/id_rsa\n\necho git config --list --show-origin\necho cat ~/.ssh/id_rsa\n\necho -e \"Host bitbucket.com\\\\n\\\\tStrictHostKeyChecking no\\\\n\\\\tLogLevel ERROR\\\\n\" >> ~/.ssh/config\ngit remote set-url origin http://bitbucket.org/$BITBUCKET_REPO_FULL_NAME\ngit remote -v\necho \"Git credentials configured.\"\ngit stash\ngit checkout ${BITBUCKET_BRANCH}\nif ! git pull --rebase --tags; then \n    echo -e \"\\033[0;31mERROR: ***********************************************************************************\"\n    echo \"ERROR: There was an issue connecting to remote. Check your credentials.\"\n    echo -e \"ERROR: ***********************************************************************************\\033[0m\"\n    exit 1\nfi \ngit reset --hard origin/${BITBUCKET_BRANCH}\n\necho \"${BITBUCKET_BRANCH} checked out.\"\n"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 4200,
              "y": 400
            }
          },
          "8bdb": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "node_setup.sh file content",
            "description": "Set an object key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "name": "node_setup.sh"
                },
                "path": [
                  "content"
                ],
                "value": "#!/bin/bash\n\n# check node version:\necho \"node version: $(node --version)\"\necho \"npm version: $(npm --version)\"\n\necho \"Installing dependencies...\"\nif [ ! -f package-lock.json ]; then\n    PRESENT='false'\n    echo 'package-lock does not exist - generating one now.'\n    npm i --package-lock-only\nelse \n    if ! npm ci -q --unsafe-perm; then\n        exit 1\n    fi\nfi\n\nif [ -n \"$PRESENT\" ]; then\n    git add package-lock.json\n    git commit -m 'initialized package-lock.json [ci skip]'\nfi\n\necho \"Dependencies installed.\"\n"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 5700,
              "y": 400
            }
          },
          "80ce": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "promote.py file content",
            "description": "Set an object key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "name": "promote.py"
                },
                "path": [
                  "content"
                ],
                "value": "import requests\nimport json\nimport sys\nimport os\n\n\nhostname = os.environ.get(\"IAP_HOSTNAME\")\nartifact_path = sys.argv[1]\n\n# checking if IAP_PUSH_TO_LOCAL env var is set -> if not, default to True\nif not (os.environ.get(\"IAP_PUSH_TO_LOCAL\")):\n  push_to_local = True\nelse:\n  push_to_local = True if os.environ.get(\"IAP_PUSH_TO_LOCAL\").lower() == \"true\" else False\n\n# checking if IAP_TOKEN is set -> if not, use basic auth login\ntoken = os.environ.get(\"IAP_TOKEN\")\nbasic_auth = False\nif not token:\n  basic_auth = True\n  username = os.environ.get(\"IAP_USERNAME\")\n  pw = os.environ.get(\"IAP_PW\")\n\nif not (artifact_path and hostname and (token or (username and pw))):\n  print(\"Missing environmental variables.\\nMake sure your environmental variables are set properly.\\nExiting...\")\n  sys.exit(1)\n\nartifact = json.load(open(f\"{artifact_path}\"))\n# Function Definitions\n# Handles getting token to authenticate into IAP\ndef get_token():\n  print(\"Getting auth token\")\n  url = f\"{hostname}/login\"\n  payload = json.dumps({\n    \"user\": {\n      \"username\": username,\n      \"password\": pw\n    }\n  })\n\n  response = requests.request(\n    \"POST\", \n    url, \n    headers={'Content-Type': 'application/json'},\n    data=payload)\n  if not response.status_code // 100 == 2:\n    raise Exception(\"Error: Unexpected response {}: Failed to get auth token\".format(response.text))\n  else: \n    return response.text\n\n# Checks if prebuilt already exists\ndef get_prebuilt(name):\n  print(f\"Retrieving prebuilt: {name}\")\n  url = f\"{hostname}/prebuilts?equals={name}&equalsField=name\"\n  response = requests.request(\n    \"GET\", \n    url,\n    headers={'Cookie': f'token={token}'})\n  if not response.status_code // 100 == 2:\n    raise Exception(\"Error: Unexpected response {}: Failed to get prebuilt\".format(response.text))\n  else: \n    return response.text\n\ndef add_prebuilt(payload): \n  print(\"Prebuilt does not exist yet - adding to IAP\")\n  url = f\"{hostname}/prebuilts/import\"\n  headers = {\n    'Content-Type': 'application/json',\n    'Cookie': f'token={token}'\n  }\n  response = requests.request(\n    \"POST\",\n    url,\n    headers=headers,\n    data=payload)\n  if \"Invalid repository configuration\" in response.text:\n    print(\"Failed to promote to original repository, pushing to local scope.\")\n    updated_payload = json.loads(payload)\n    updated_payload[\"prebuilt\"][\"metadata\"][\"repository\"] = {\n      \"type\": \"local\",\n      \"hostname\": \"localhost\",\n      \"path\": \"/\"\n    }\n    response = requests.request(\n      \"POST\",\n      url,\n      headers=headers,\n      data=json.dumps(updated_payload))\n  if not response.status_code // 100 == 2:\n    raise Exception(\"Error: Unexpected response {}: Failed to add prebuilt\".format(response.text))\n  else: \n    print(\"Successfully added prebuilt\")\n    return response.text\n\ndef update_prebuilt(id, payload):\n  print(\"Updating existing prebuilt\")\n  url = f\"{hostname}/prebuilts/{id}\"\n  headers = {\n    'Content-Type': 'application/json',\n    'Cookie': f'token={token}'\n  }\n  response = requests.request(\n    \"PUT\",\n    url,\n    headers=headers,\n    data=payload)\n  if \"Invalid repository configuration\" in response.text:\n    print(\"Failed to promote to original repository, pushing to local scope.\")\n    updated_payload = json.loads(payload)\n    updated_payload[\"prebuilt\"][\"metadata\"][\"repository\"] = {\n      \"type\": \"local\",\n      \"hostname\": \"localhost\",\n      \"path\": \"/\"\n    }\n    response = requests.request(\n      \"PUT\",\n      url,\n      headers=headers,\n      data=json.dumps(updated_payload))\n  if not response.status_code // 100 == 2:\n      raise Exception(\"Error: Unexpected response {}: Failed to update prebuilt\".format(response.text))\n  else: \n    print(\"Successfully updated prebuilt\")\n    return response.text\n\ndef logout():\n  print(\"Logging out of IAP\")\n  url = f\"{hostname}/login?logout=true\"\n  headers = {\n    'Content-Type': 'application/json',\n    'Cookie': f'token={token}'\n  }\n  response = requests.request(\n    \"GET\",\n    url,\n    headers=headers)\n  response = requests.request(\"GET\", url, headers=headers)\n\n# Script starts here\ntry: \n  if (basic_auth):\n    token = get_token()\n\n  # Set name of prebuilt\n  name = artifact[\"metadata\"][\"name\"]\n\n  results = get_prebuilt(name)\n  if push_to_local:\n    print(\"Setting artifact.json repository configuration to local\")\n    artifact[\"metadata\"][\"repository\"] = {\n      \"type\": \"local\",\n      \"hostname\": \"localhost\",\n      \"path\": \"/\"\n    }\n    print('Promoting to local scope in IAP')\n  payload = json.dumps({\n    \"prebuilt\": artifact,\n    \"options\": {\n      \"overwrite\": True \n    }\n  })\n  # if prebuilt doesn't exist, add it\n  if json.loads(results)[\"total\"] == 0:\n    response = add_prebuilt(payload)\n  else: # if prebuilt exists, update it\n      id = json.loads(results)[\"results\"][0][\"_id\"]\n      update_prebuilt(id, payload)\n\n  # logging out\n  logout()\nexcept requests.exceptions.RequestException as e: \n  # A serious problem happened, like an SSLError or InvalidURL\n  print(\"Error: {}\".format(e))\n  sys.exit(1)  \nexcept: # error handling to catch any errors that throw a non 200 code\n  e = sys.exc_info()[1]    \n  print(e)\n  sys.exit(1)\n"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 6900,
              "y": 400
            }
          },
          "ef03": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "ver_bump.sh file content",
            "description": "Set an object key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "name": "ver_bump.sh"
                },
                "path": [
                  "content"
                ],
                "value": "#!/bin/bash\n\n#-------------------#\n# Get Semver Prefix #\n#-------------------#\nVERSION=\"$(git log --format=%s --merges -1|awk -F\"'\" '{print $2}'|awk -F \"/\" '{print $1}')\"\ncase \"$VERSION\" in\n    # if PATCH transform to patch\n    patch|minor|major) SEMVER=\"$(echo \"$VERSION\" | awk '{print tolower($0)}')\";;\n    *) SEMVER=\"patch\";;\nesac\nif [ -z \"$VERSION\" ]; then\n    echo \"No branch prefix detected. Defaulting to patch.\"\nfi\n\necho \"Semver bump: $SEMVER\"\n\n#---------------------#\n# Get Current Version #\n#---------------------#\nCURRENT_VERSION=$(node -p \"require('./package.json').version\")\necho \"Last version: $CURRENT_VERSION\"\nCURRENT_MAJOR=$(echo \"$CURRENT_VERSION\"|awk -F'.' '{print $1}')\nCURRENT_MINOR=$(echo \"$CURRENT_VERSION\"|awk -F'.' '{print $2}')\nCURRENT_PATCH=$(echo \"$CURRENT_VERSION\"|awk -F'.' '{print $3}'|awk -F'-' '{print $1}')\nCURRENT_PRERELEASE=$(echo \"$CURRENT_VERSION\"|awk -F'-' '{print $2}')\n\n# if [[ $CURRENT_VERSION != *\"+\"* ]]; then\n#     CURRENT_PATCH=$(echo \"$CURRENT_VERSION\"|awk -F'.' '{print $3}'|awk -F'-' '{print $1}')\n#     CURRENT_PRERELEASE=$(echo \"$CURRENT_VERSION\"|awk -F'-' '{print $2}')\n# else\n#     CURRENT_PATCH=$(echo \"$CURRENT_VERSION\"|awk -F'.' '{print $3}'|awk -F'+' '{print $1}')\n#     CURRENT_PRERELEASE=$(echo \"$CURRENT_VERSION\"|awk -F'+' '{print $2}')\n# fi \n\n\n#---------------------------#\n# Version & Release Package #\n#---------------------------#\n\n# create release note before versioning the project\nsh ./scripts/create_release_script.sh \"$NEW_VERSION\"\n\n# explicitly add the change log to the version bump commit\ngit add CHANGELOG.md\necho \"Bumping version...\"\n\n# bump version, git tag, commit & then push changes\n# using -f to ignore the added release note\nnpm version -f \"$SEMVER\" -m \"Updating $SEMVER version to %s. [skip ci]\" --loglevel=error\necho \"Version bump successful\"\n\n# push to gitlab\n# no-verify is used to ignore any pre-push commits that may be used by the project\nif git push -f --tags origin ${BITBUCKET_BRANCH} --follow-tags --no-verify; then\n    echo \"Version bump pushed successfully.\"\nelse\n    echo -e \"\\033[0;31mERROR: ***********************************************************************************\"\n    echo \"ERROR: Failed to push.\"\n    echo -e \"ERROR: ***********************************************************************************\\033[0m\"\n    exit 1\nfi\n"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 7500,
              "y": 400
            }
          },
          "7c35": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Add commit.sh",
            "description": "Adds one element to the end of an array and returns the (newly modified) array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.1649.pushedArray",
                "elementN": "$var.866.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 2700,
              "y": 800
            }
          },
          "3d5d": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Add create_release_script.sh",
            "description": "Adds one element to the end of an array and returns the (newly modified) array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.7c35.pushedArray",
                "elementN": "$var.3853.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 3600,
              "y": 800
            }
          },
          "4f62": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Add git_setup.sh",
            "description": "Adds one element to the end of an array and returns the (newly modified) array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.3d5d.pushedArray",
                "elementN": "$var.d42b.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 4800,
              "y": 800
            }
          },
          "40fd": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Add node_setup.sh",
            "description": "Adds one element to the end of an array and returns the (newly modified) array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.4f62.pushedArray",
                "elementN": "$var.8bdb.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 6300,
              "y": 800
            }
          },
          "d3e6": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Add promote.py",
            "description": "Adds one element to the end of an array and returns the (newly modified) array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.40fd.pushedArray",
                "elementN": "$var.80ce.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 6900,
              "y": 800
            }
          },
          "62a1": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Add ver_bump.sh",
            "description": "Adds one element to the end of an array and returns the (newly modified) array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.d3e6.pushedArray",
                "elementN": "$var.ef03.object"
              },
              "outgoing": {
                "pushedArray": "$var.job.scriptFiles"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 7800,
              "y": 800
            }
          },
          "9bcf": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "manifestLinkTester.js file content",
            "description": "Set an object key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "name": "manifestLinkTester.js"
                },
                "path": [
                  "content"
                ],
                "value": "const path = require('path'),\n      fs = require('fs-extra');\n\nconst args = process.argv.filter((element, index) => {\n  return index >=2;\n});\nif (args.length <= 0) {\n  const usage = `\n  ==============================================================\n    Simplified manifest schema validator, using ajv,\n    that can be used for very quick schema validations.\n    This will validate a json file against the schema\n    found in manifest-schema.json\n\n    Usage: node manifestTester.js someManifestFile.json\n\n    NOTE: for a graphical JSON schema validator go to\n    https://www.jsonschemavalidator.net/\n\n  ==============================================================`;\n  console.log(usage);\n  process.exit(1);\n}\n\nasync function runLinkValidation() {\n  const filePath = path.normalize(args[0]);\n\n  console.log(`Retrieving ${filePath}`);\n  const manifest = await fs.readFile(filePath, 'utf8');\n  console.log('Converting to JSON object');\n  const data = JSON.parse(manifest);\n\n  console.log('Iterating through artifacts...');\n  let valid=true;\n  for (let i=0; i<data.artifacts.length; i++){\n    const current = data.artifacts[i].location;\n    if (current){\n      if (fs.existsSync(`./${current}`)){\n        console.log(`\\t✅  Validating ${current}`);\n      }\n      else{\n        console.log(`\\t❌  Validating ${current}`);\n        valid = false;\n      }\n    }\n  }\n  if (!valid) {\n    console.error('Validation Failed  👎');\n    process.exit(1);\n  }\n  else {\n    console.log('Validation passed  👍');\n  }\n}\ntry {\n  runLinkValidation();\n}\ncatch(error) {\n  console.error(`Error occurred running the validator ${error}`);\n}\n"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 10200,
              "y": 400
            }
          },
          "84c3": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Add manifestLinkTester.js",
            "description": "Adds one element to the end of an array and returns the (newly modified) array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.5820.pushedArray",
                "elementN": "$var.9bcf.object"
              },
              "outgoing": {
                "pushedArray": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 10800,
              "y": 800
            }
          },
          "103d": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Add manifestTester.js",
            "description": "Adds one element to the end of an array and returns the (newly modified) array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.84c3.pushedArray",
                "elementN": "$var.6323.object"
              },
              "outgoing": {
                "pushedArray": "$var.job.testFiles"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 12000,
              "y": 800
            }
          },
          "f42b": {
            "name": "parse",
            "canvasName": "parse",
            "summary": "manifest-schema.json String Content",
            "description": "Parses a JSON string, constructing the JavaScript value or object described by the string.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "String",
            "variables": {
              "incoming": {
                "text": "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"$id\":\"iap-artifact-bundle\",\"type\":\"object\",\"title\":\"Artifact Bundle Schema\",\"default\":null,\"additionalProperties\":false,\"definitions\":{\"tagged\":{\"$id\":\"#/properties/properties/properties/tagged\",\"type\":\"array\",\"title\":\"The Tagged Item\",\"description\":\"These are the items that need to be tagged\",\"uniqueItems\":true,\"items\":{\"$id\":\"#/properties/properties/properties/tagged/items\",\"type\":\"string\",\"title\":\"The Tagged Items\",\"default\":\"\",\"examples\":[\"mop-example-1\",\"mop-analytic-example-1\",\"workflow-example-1\"],\"pattern\":\"^(.*)$\"}}},\"required\":[\"bundleName\",\"version\",\"createdEpoch\",\"artifacts\"],\"properties\":{\"bundleName\":{\"$id\":\"#/properties/bundleName\",\"type\":\"string\",\"title\":\"The Bundle Name\",\"description\":\"Unique identifier for this bundle of artifacts.\",\"default\":\"\",\"examples\":[\"ExampleBundle\"],\"pattern\":\"^(.*)$\"},\"version\":{\"$id\":\"#/properties/version\",\"type\":\"string\",\"title\":\"The Version\",\"description\":\"The version of this bundle\",\"default\":\"\",\"examples\":[\"1.2.3\"],\"pattern\":\"^(.*)$\"},\"fingerprint\":{\"$id\":\"#/properties/fingerprint\",\"type\":\"string\",\"title\":\"The Fingerprint\",\"description\":\"For use in future implementations of  installable modules where additional security measures need to be implemented. \",\"default\":\"\",\"examples\":[\"Some verifiable token\"],\"pattern\":\"^(.*)$\"},\"createdEpoch\":{\"$id\":\"#/properties/createdEpoch\",\"type\":\"string\",\"title\":\"The Created Time\",\"description\":\"The date, in milliseconds since the unix epoch, for when this bundle was created/updated. Usually this is value of Date.now() or calling getTime() on a js Date object\",\"default\":\"\",\"examples\":[\"1554836984020\",\"result from Date.now()\"],\"pattern\":\"^(.*)$\"},\"artifacts\":{\"$id\":\"#/properties/artifacts\",\"type\":\"array\",\"title\":\"The Artifacts \",\"description\":\"List of artifacts in this bundle. Note that each item must be unique and duplicates will fail validation\",\"default\":null,\"uniqueItems\":true,\"items\":{\"$id\":\"#/properties/artifacts/items\",\"type\":\"object\",\"title\":\"Artifact items\",\"default\":null,\"additionalProperties\":false,\"properties\":{\"id\":{\"$id\":\"#/properties/artifacts/items/properties/id\",\"type\":\"string\",\"title\":\"The Artifact Id\",\"description\":\"Unique Id identifying this artifact. \",\"default\":\"\",\"examples\":[\"workflow-example-1\",\"mop-template-1\"],\"pattern\":\"^(.*)$\"},\"name\":{\"$id\":\"#/properties/artifacts/items/properties/name\",\"type\":\"string\",\"title\":\"The Artifact Name\",\"description\":\"The Name identifying this artifact\",\"default\":\"\",\"examples\":[\"My Worflow1\"],\"pattern\":\"^(.*)$\"},\"type\":{\"$id\":\"#/properties/artifacts/items/properties/type\",\"type\":\"string\",\"enum\":[\"mop-analytic-template\",\"mop-template\",\"workflow\",\"json-forms\",\"tag\",\"template\",\"forms\",\"golden-config\",\"service-catalog\",\"ac-agenda-job\",\"adapter\",\"app\",\"transformation\",\"automation\"],\"title\":\"The Artifact Type \",\"description\":\"The type of artifact(s) this entry encompasses. Must be one of the supported types listed in the enum\",\"default\":\"\",\"examples\":[\"mop-analytic-template\",\"mop-template\",\"workflow\",\"tag\",\"forms\",\"golden-config\"],\"pattern\":\"^(.*)$\"},\"location\":{\"$id\":\"#/properties/artifacts/items/properties/location\",\"type\":\"string\",\"title\":\"The Artifact Location\",\"description\":\"Path, relative to the root of this bundle, to either a specific artifact file or a directory of artifacts of a specific type. Future implementations may allow for URLs to external assets\",\"default\":\"\",\"examples\":[\"/bundles/ExampleBundle/workflow/myWorkflow1.json\",\"/bundles/workflows/\"],\"pattern\":\"^(.*)$\"},\"description\":{\"$id\":\"#/properties/artifacts/items/properties/description\",\"type\":\"string\",\"title\":\"The Description \",\"description\":\"The description of what this artifact is \",\"default\":\"\",\"examples\":[\"This artifact does things and stuff\"],\"pattern\":\"^(.*)$\"},\"properties\":{\"$id\":\"#/properties/artifacts/items/properties/properties\",\"type\":\"object\",\"title\":\"The Properties Schema\",\"description\":\"Additional properties that may be needed for a type during it's installations\",\"properties\":{\"tagged\":{\"$ref\":\"#/definitions/tagged\"}}}},\"if\":{\"properties\":{\"type\":{\"enum\":[\"tag\"]}}},\"then\":{\"required\":[\"id\",\"name\",\"type\",\"properties\"]},\"else\":{\"required\":[\"id\",\"name\",\"type\",\"location\"]}}}}}"
              },
              "outgoing": {
                "textObject": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 8700,
              "y": 800
            }
          },
          "6f7b": {
            "name": "objectToString",
            "canvasName": "toString",
            "summary": "Converts a valid JSON value to a string.",
            "description": "Converts a valid JSON value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "value": "$var.f42b.textObject",
                "replacer": "",
                "space": 2
              },
              "outgoing": {
                "stringified": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 8700,
              "y": 400
            }
          },
          "bcde": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "yml file content",
            "description": "Set an object key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "name": "bitbucket-pipelines.yml"
                },
                "path": [
                  "content"
                ],
                "value": "image: alpine:3.15\nservices:\n  - docker:dind\nafter_script:\n  - rm -rf ~/.ssh\ndefinitions:\n  steps:\n    - step: &quality\n        name: quality\n        runs-on:\n          - self.hosted\n          - linux\n        allow_failure: true\n        script:\n          - apk add --no-cache git\n          - apk add bash\n          - apk update && apk add --no-cache nodejs~=16 npm\n          - apk add --update --no-cache openssh\n          - npm i\n          # check node version:\n          - 'echo \"node version: $(node --version)\"'\n          # check npm version\n          - 'echo \"npm version: $(npm --version)\"'\n          - npm audit --registry=https://registry.npmjs.org\n    - step: &test\n        name: test\n        runs-on:\n          - self.hosted\n          - linux\n        allow_failure: false\n        script:\n          - apk add --no-cache git\n          - apk add bash\n          - apk update && apk add --no-cache nodejs~=16 npm\n          - apk add --update --no-cache openssh\n          - npm i\n          # check node version:\n          - 'echo \"node version: $(node --version)\"'\n          # check npm version\n          - 'echo \"npm version: $(npm --version)\"'\n          - npm run validateSchema\n\n          - npm i\n          # check node version:\n          - 'echo \"node version: $(node --version)\"'\n          # check npm version\n          - 'echo \"npm version: $(npm --version)\"'\n          - npm run validateSchemaLinks\n    - step: &generate\n        name: generate\n        runs-on:\n          - self.hosted\n          - linux\n        allow_failure: false\n        artifacts:\n          paths:\n          - artifact.json\n          expire_in: 5 mins \n        script:\n          - apk add --no-cache git\n          - apk add bash\n          - apk update && apk add --no-cache nodejs~=16 npm\n          - apk add --update --no-cache openssh\n          - sh ./scripts/commit.sh\n\npipelines:\n  default:\n    - step: *quality\n    - step: *test\n    - step: *generate\n  branches:\n    master:\n      - step: *quality\n      - step: *test\n      - step:\n          name: 'bump'\n          runs-on:\n            - self.hosted\n            - linux\n          script:\n            - apk add --no-cache git\n            - apk add bash\n            - apk update && apk add --no-cache nodejs~=16 npm\n            - apk add --update --no-cache openssh\n            - sh ./scripts/git_setup.sh\n            - sh ./scripts/node_setup.sh\n            - sh ./scripts/ver_bump.sh\n      - step: *generate\n      - step:\n          name: 'promote'\n          runs-on:\n            - self.hosted\n            - linux\n          allow_failure: false\n          dependencies: \n            - generate_artifact_json\n          script:\n            - apk add --no-cache git\n            - apk add bash\n            - apk update && apk add --no-cache nodejs~=16 npm\n            - apk add --no-cache python3 py3-pip\n            - apk add --update --no-cache openssh\n            - pip3 install requests\n            - |\n              if [[ $PROMOTE != \"False\" ]]; then\n                if ! python3 ./scripts/promote.py ./artifact.json; then\n                  echo -e \"\\033[0;31mERROR: ***********************************************************************************\"\n                  echo \"ERROR: There was an issue promoting artifact.json to IAP.\"\n                  echo -e \"ERROR: ***********************************************************************************\\033[0m\"\n                  exit 1\n                fi\n              else\n                echo \"PROMOTE set to False, skipping promoting to IAP.\"\n              fi\n\n# Only use spaces to indent your .yml configuration.\n# -----\n"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 12600,
              "y": 400
            }
          },
          "289e": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Add bitbucket yml",
            "description": "Adds one element to the end of an array and returns the (newly modified) array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": [],
                "elementN": "$var.bcde.object"
              },
              "outgoing": {
                "pushedArray": "$var.job.yml"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 13200,
              "y": 800
            }
          }
        },
        "transitions": {
          "866": {
            "7c35": {
              "type": "standard",
              "state": "success"
            }
          },
          "1649": {
            "866": {
              "type": "standard",
              "state": "success"
            }
          },
          "3853": {
            "3d5d": {
              "type": "standard",
              "state": "success"
            }
          },
          "5820": {
            "9bcf": {
              "type": "standard",
              "state": "success"
            }
          },
          "6323": {
            "103d": {
              "type": "standard",
              "state": "success"
            }
          },
          "7019": {
            "5820": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_start": {
            "e474": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "e474": {
            "1649": {
              "type": "standard",
              "state": "success"
            }
          },
          "d42b": {
            "4f62": {
              "type": "standard",
              "state": "success"
            }
          },
          "8bdb": {
            "40fd": {
              "type": "standard",
              "state": "success"
            }
          },
          "80ce": {
            "d3e6": {
              "type": "standard",
              "state": "success"
            }
          },
          "ef03": {
            "62a1": {
              "type": "standard",
              "state": "success"
            }
          },
          "4bac": {},
          "89f8": {},
          "ce98": {},
          "7c35": {
            "3853": {
              "type": "standard",
              "state": "success"
            }
          },
          "e93e": {},
          "3d5d": {
            "d42b": {
              "type": "standard",
              "state": "success"
            }
          },
          "4f62": {
            "8bdb": {
              "type": "standard",
              "state": "success"
            }
          },
          "40fd": {
            "80ce": {
              "type": "standard",
              "state": "success"
            }
          },
          "d3e6": {
            "ef03": {
              "type": "standard",
              "state": "success"
            }
          },
          "62a1": {
            "f42b": {
              "type": "standard",
              "state": "success"
            }
          },
          "3e6c": {},
          "1f0b": {},
          "ed6d": {},
          "9bcf": {
            "84c3": {
              "type": "standard",
              "state": "success"
            }
          },
          "c42a": {},
          "84c3": {
            "6323": {
              "type": "standard",
              "state": "success"
            }
          },
          "103d": {
            "bcde": {
              "type": "standard",
              "state": "success"
            }
          },
          "f42b": {
            "6f7b": {
              "type": "standard",
              "state": "success"
            }
          },
          "6f7b": {
            "7019": {
              "type": "standard",
              "state": "success"
            }
          },
          "bcde": {
            "289e": {
              "type": "standard",
              "state": "success"
            }
          },
          "289e": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          }
        },
        "type": "automation",
        "canvasVersion": 3,
        "tags": [],
        "groups": [],
        "migrationVersion": 4
      }
    },
    {
      "type": "workflow",
      "data": {
        "name": "Prebuilt Promotion Github Check OrgRepo",
        "tasks": {
          "1134": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "repo",
                "value": true
              },
              "outgoing": {
                "value": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 4500,
              "y": 1200
            }
          },
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "nodeLocation": {
              "x": 300,
              "y": 900
            }
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "nodeLocation": {
              "x": 5400,
              "y": 700
            }
          },
          "7fa8": {
            "name": "getOrgsOrg",
            "canvasName": "getOrgsOrg",
            "summary": "Get an Organization.",
            "description": "Get an Organization.",
            "location": "Adapter",
            "locationType": "GitHub",
            "app": "GitHub",
            "type": "automatic",
            "displayName": "GitHub",
            "variables": {
              "incoming": {
                "org": "$var.job.org",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "$var.job.error",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 2400,
              "y": 900
            }
          },
          "de12": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Run Evaluation Task",
            "description": "Run an evaluation",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "response.message",
                        "operand_1": {
                          "variable": "error",
                          "task": "786b"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": "Not Found",
                          "task": "static"
                        }
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 4200,
              "y": 900
            }
          },
          "daea": {
            "name": "ViewData",
            "canvasName": "ViewData",
            "summary": "Organization not found",
            "description": "Displays a message and runtime data to an operator. This can be used to request a decision, or used for acknowledgement only.",
            "location": "Application",
            "app": "WorkFlowEngine",
            "displayName": "Tools",
            "type": "manual",
            "variables": {
              "incoming": {
                "header": "Error",
                "message": "",
                "body": "Organization Not Found. Try again?",
                "variables": {},
                "btn_success": "Try Again",
                "btn_failure": "End"
              },
              "outgoing": {},
              "error": ""
            },
            "view": "/workflow_engine/task/ViewData",
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 3600,
              "y": 600
            }
          },
          "fc71": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "failed",
                "value": true
              },
              "outgoing": {
                "value": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 4800,
              "y": 600
            }
          },
          "57f6": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "repo",
                "value": false
              },
              "outgoing": {
                "value": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 900,
              "y": 900
            }
          },
          "8e9a": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "failed",
                "value": false
              },
              "outgoing": {
                "value": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 1524,
              "y": 756
            }
          },
          "786b": {
            "name": "getReposOwnerRepo",
            "canvasName": "getReposOwnerRepo",
            "summary": "Get repository.",
            "description": "Get repository.",
            "location": "Adapter",
            "locationType": "GitHub",
            "app": "GitHub",
            "type": "automatic",
            "displayName": "GitHub",
            "variables": {
              "incoming": {
                "owner": "$var.job.org",
                "repo": "$var.job.repoName",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 3600,
              "y": 1200
            }
          }
        },
        "transitions": {
          "1134": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_start": {
            "57f6": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "7fa8": {
            "daea": {
              "type": "standard",
              "state": "error"
            },
            "786b": {
              "type": "standard",
              "state": "success"
            }
          },
          "de12": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            },
            "fc71": {
              "type": "standard",
              "state": "failure"
            }
          },
          "daea": {
            "7fa8": {
              "type": "revert",
              "state": "success"
            },
            "fc71": {
              "type": "standard",
              "state": "failure"
            }
          },
          "fc71": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "57f6": {
            "8e9a": {
              "type": "standard",
              "state": "success"
            }
          },
          "8e9a": {
            "7fa8": {
              "type": "standard",
              "state": "success"
            }
          },
          "786b": {
            "1134": {
              "type": "standard",
              "state": "success"
            },
            "de12": {
              "type": "standard",
              "state": "error"
            }
          },
          "2a69": {}
        },
        "inputSchema": {
          "type": "object",
          "properties": {
            "org": {
              "title": "org",
              "type": "string"
            },
            "adapter_id": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "repoName": {
              "title": "repo",
              "type": "string"
            }
          },
          "required": [
            "org",
            "adapter_id",
            "repoName"
          ]
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "org": {
              "title": "org",
              "type": "string"
            },
            "adapter_id": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "repoName": {
              "title": "repo",
              "type": "string"
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            },
            "repo": {
              "type": "boolean"
            },
            "error": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "failed": {
              "type": "boolean"
            }
          }
        },
        "created": "2022-06-02T15:19:37.085Z",
        "createdVersion": "5.40.5-2021.1.72.0",
        "created_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {}
        },
        "font_size": 12,
        "lastUpdatedVersion": "5.55.2-2023.2.14",
        "last_updated": "2025-02-07T18:22:00.548Z",
        "last_updated_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {}
        },
        "type": "automation",
        "canvasVersion": 3,
        "tags": [],
        "groups": [],
        "migrationVersion": 4
      }
    },
    {
      "type": "workflow",
      "data": {
        "name": "Prebuilt Promotion Github New Commit",
        "tasks": {
          "6602": {
            "name": "numberToString",
            "canvasName": "toString",
            "summary": "Convert number to string.",
            "description": "Returns a string representing the specified Number object.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Number",
            "variables": {
              "incoming": {
                "num": 100644,
                "radix": ""
              },
              "outgoing": {
                "numToString": null
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 1800,
              "y": 2300
            }
          },
          "7884": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "treeArray",
                "value": []
              },
              "outgoing": {
                "value": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 1200,
              "y": 500
            }
          },
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "nodeLocation": {
              "x": -900,
              "y": 500
            }
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "nodeLocation": {
              "x": 11100,
              "y": 500
            }
          },
          "2e4d": {
            "name": "forEach",
            "canvasName": "forEach",
            "summary": "For Each Loop",
            "description": "Loop over each file to be committed",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_array": "$var.job.artifact_array"
              },
              "outgoing": {
                "current_item": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 2100,
              "y": 420
            }
          },
          "3a1c": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "payLoad",
                "value": {
                  "content": "aGpmZGM=",
                  "encoding": "utf-8|base64"
                }
              },
              "outgoing": {
                "value": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 1800,
              "y": 800
            }
          },
          "d4b5": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "convertObjecttoString",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "605a0b9299ae1b00eb7c74e9",
                "variableMap": {
                  "inputObject": "$var.2e4d.current_item"
                },
                "options": {
                  "extractOutput": false,
                  "validateIncoming": false,
                  "revertToDefaultValue": false
                }
              },
              "outgoing": {
                "action": null,
                "filePath": null,
                "content": null
              }
            },
            "groups": [],
            "task_name": "convertObjecttoString",
            "retrySettings": null,
            "nodeLocation": {
              "x": 1800,
              "y": 1200
            }
          },
          "e95f": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "Set Object Key",
            "description": "Set content data per file",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": "$var.job.payLoad",
                "path": [
                  "content"
                ],
                "value": "$var.d4b5.content"
              },
              "outgoing": {
                "object": "$var.job.payLoad"
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 1800,
              "y": 1400
            }
          },
          "7ece": {
            "name": "postReposOwnerRepoGitBlobs",
            "canvasName": "postReposOwnerRepoGitBlobs",
            "summary": "Create a Blob.",
            "description": "Create a Blob. This is done for each file and adds the file data to the github server",
            "location": "Adapter",
            "locationType": "GitHub",
            "app": "GitHub",
            "type": "automatic",
            "displayName": "GitHub",
            "variables": {
              "incoming": {
                "owner": "$var.job.owner",
                "repo": "$var.job.repo",
                "body": "$var.job.payLoad",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 1800,
              "y": 1800
            }
          },
          "423c": {
            "name": "postReposOwnerRepoGitTrees",
            "canvasName": "postReposOwnerRepoGitTrees",
            "summary": "Create a tree",
            "description": "Create a Tree. This will create the tree with the files and their paths for git",
            "location": "Adapter",
            "locationType": "GitHub",
            "app": "GitHub",
            "type": "automatic",
            "displayName": "GitHub",
            "variables": {
              "incoming": {
                "owner": "$var.job.owner",
                "repo": "$var.job.repo",
                "body": "$var.36ba.merged_object",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 4200,
              "y": 500
            }
          },
          "cc5a": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query blob sha",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response.sha",
                "obj": "$var.7ece.result"
              },
              "outgoing": {
                "return_data": null
              },
              "error": ""
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 1800,
              "y": 2100
            }
          },
          "5f91": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Adds an element to the end of the array.",
            "description": "Adds one element to the end of an array and returns the (newly modified) array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.job.treeArray",
                "elementN": "$var.97cc.merged_object"
              },
              "outgoing": {
                "pushedArray": "$var.job.treeArray"
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 1800,
              "y": 3100
            }
          },
          "97cc": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge Data",
            "description": "Create payload per blob to be added to Tree array",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "path",
                    "value": {
                      "task": "d4b5",
                      "variable": "filePath"
                    }
                  },
                  {
                    "key": "mode",
                    "value": {
                      "task": "6602",
                      "variable": "numToString"
                    }
                  },
                  {
                    "key": "type",
                    "value": {
                      "task": "static",
                      "variable": "blob"
                    }
                  },
                  {
                    "key": "sha",
                    "value": {
                      "task": "cc5a",
                      "variable": "return_data"
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 1800,
              "y": 2800
            }
          },
          "36ba": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "create tree body",
            "description": "Add blobs from tree array and tree's sha to single object for new tree payload",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "base_tree",
                    "value": {
                      "task": "79cc",
                      "variable": "return_data",
                      "editable": true
                    }
                  },
                  {
                    "key": "tree",
                    "value": {
                      "task": "job",
                      "variable": "treeArray"
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 2700,
              "y": 500
            }
          },
          "20f0": {
            "name": "postReposOwnerRepoGitCommits",
            "canvasName": "postReposOwnerRepoGitCommits",
            "summary": "Create a Commit.",
            "description": "Create a Commit of the Tree created in prior task",
            "location": "Adapter",
            "locationType": "GitHub",
            "app": "GitHub",
            "type": "automatic",
            "displayName": "GitHub",
            "variables": {
              "incoming": {
                "owner": "$var.job.owner",
                "repo": "$var.job.repo",
                "body": "$var.f1d9.merged_object",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 8100,
              "y": 500
            }
          },
          "f1d9": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "create commit body",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "message",
                    "value": {
                      "task": "job",
                      "variable": "commitMessage",
                      "editable": true
                    }
                  },
                  {
                    "key": "tree",
                    "value": {
                      "task": "cbe5",
                      "variable": "return_data"
                    }
                  },
                  {
                    "key": "parents",
                    "value": {
                      "task": "job",
                      "variable": "shaArray"
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 7200,
              "y": 500
            }
          },
          "af31": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "shaArray",
                "value": []
              },
              "outgoing": {
                "value": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 6000,
              "y": 600
            }
          },
          "e604": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Adds an element to the end of the array.",
            "description": "Adds one element to the end of an array and returns the (newly modified) array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.job.shaArray",
                "elementN": "$var.5a2b.return_data"
              },
              "outgoing": {
                "pushedArray": "$var.job.shaArray"
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 6600,
              "y": 600
            }
          },
          "cbe5": {
            "name": "query",
            "canvasName": "query",
            "summary": "query tree sha",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response.sha",
                "obj": "$var.423c.result"
              },
              "outgoing": {
                "return_data": null
              },
              "error": ""
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 5400,
              "y": 500
            }
          },
          "22a3": {
            "name": "getReposOwnerRepoBranchesBranch",
            "canvasName": "getReposOwnerRepoBranchesBranch",
            "summary": "Get Branch",
            "description": "Get Branch. Returns SHA of commit the head of this branch points to as well as SHA of tree associated with this commit",
            "location": "Adapter",
            "locationType": "GitHub",
            "app": "GitHub",
            "type": "automatic",
            "displayName": "GitHub",
            "variables": {
              "incoming": {
                "owner": "$var.job.owner",
                "repo": "$var.job.repo",
                "branch": "$var.job.branch",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 0,
              "y": 500
            }
          },
          "5a2b": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query branch SHA",
            "description": "Query branch's commit SHA",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response.commit.sha",
                "obj": "$var.22a3.result"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 600,
              "y": 500
            }
          },
          "79cc": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query parent tree SHA",
            "description": "Query tree SHA",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response.commit.commit.tree.sha",
                "obj": "$var.22a3.result"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 900,
              "y": 500
            }
          },
          "5a89": {
            "name": "patchReposOwnerRepoGitRefsRef",
            "canvasName": "patchReposOwnerRepoGitRefsRef",
            "summary": "Update a Reference",
            "description": "Updates the HEAD reference on your branch up to the new commit made in last step",
            "location": "Adapter",
            "locationType": "GitHub",
            "app": "GitHub",
            "type": "automatic",
            "displayName": "GitHub",
            "variables": {
              "incoming": {
                "owner": "$var.job.owner",
                "repo": "$var.job.repo",
                "ref": "$var.a641.combinedStrings",
                "body": "$var.d72a.merged_object",
                "adapter_id": "$var.job.adapter_id"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 10500,
              "y": 500
            }
          },
          "f120": {
            "name": "query",
            "canvasName": "query",
            "summary": "new commit sha",
            "description": "Query data using a dot/bracket notation string and a matching key/value pair.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response.sha",
                "obj": "$var.20f0.result"
              },
              "outgoing": {
                "return_data": null
              },
              "error": ""
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 8700,
              "y": 500
            }
          },
          "d72a": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "update ref body",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "sha",
                    "value": {
                      "task": "f120",
                      "variable": "return_data"
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 9000,
              "y": 500
            }
          },
          "a641": {
            "name": "stringConcat",
            "canvasName": "concat",
            "summary": "Concatenates strings together.",
            "description": "Concatenates a string with a second string(s). The second parameter can be a string or array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "String",
            "variables": {
              "incoming": {
                "str": "heads/",
                "stringN": "$var.job.branch"
              },
              "outgoing": {
                "combinedStrings": null
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 9600,
              "y": 500
            }
          }
        },
        "transitions": {
          "6223": {},
          "6602": {
            "97cc": {
              "type": "standard",
              "state": "success"
            }
          },
          "6839": {},
          "7884": {
            "2e4d": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_start": {
            "22a3": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "2e4d": {
            "3a1c": {
              "type": "standard",
              "state": "loop"
            },
            "36ba": {
              "type": "standard",
              "state": "success"
            }
          },
          "3a1c": {
            "d4b5": {
              "type": "standard",
              "state": "success"
            }
          },
          "d4b5": {
            "e95f": {
              "type": "standard",
              "state": "success"
            }
          },
          "e95f": {
            "7ece": {
              "type": "standard",
              "state": "success"
            }
          },
          "7ece": {
            "cc5a": {
              "type": "standard",
              "state": "success"
            }
          },
          "423c": {
            "cbe5": {
              "type": "standard",
              "state": "success"
            }
          },
          "cc5a": {
            "6602": {
              "type": "standard",
              "state": "success"
            }
          },
          "5f91": {},
          "97cc": {
            "5f91": {
              "type": "standard",
              "state": "success"
            }
          },
          "36ba": {
            "423c": {
              "type": "standard",
              "state": "success"
            }
          },
          "20f0": {
            "f120": {
              "type": "standard",
              "state": "success"
            }
          },
          "f1d9": {
            "20f0": {
              "type": "standard",
              "state": "success"
            }
          },
          "af31": {
            "e604": {
              "type": "standard",
              "state": "success"
            }
          },
          "e604": {
            "f1d9": {
              "type": "standard",
              "state": "success"
            }
          },
          "cbe5": {
            "af31": {
              "type": "standard",
              "state": "success"
            }
          },
          "22a3": {
            "5a2b": {
              "type": "standard",
              "state": "success"
            }
          },
          "5a2b": {
            "79cc": {
              "type": "standard",
              "state": "success"
            }
          },
          "79cc": {
            "7884": {
              "type": "standard",
              "state": "success"
            }
          },
          "5a89": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "f120": {
            "d72a": {
              "type": "standard",
              "state": "success"
            }
          },
          "d72a": {
            "a641": {
              "type": "standard",
              "state": "success"
            }
          },
          "a641": {
            "5a89": {
              "type": "standard",
              "state": "success"
            }
          },
          "1b02": {},
          "99aa": {},
          "a37a": {}
        },
        "inputSchema": {
          "type": "object",
          "properties": {
            "artifact_array": {
              "title": "data_array",
              "type": "array",
              "items": [
                {
                  "type": [
                    "string",
                    "number",
                    "integer",
                    "object",
                    "array",
                    "boolean",
                    "null"
                  ]
                }
              ]
            },
            "owner": {
              "title": "owner",
              "type": "string"
            },
            "repo": {
              "title": "repo",
              "type": "string"
            },
            "adapter_id": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "commitMessage": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "branch": {
              "title": "branch",
              "type": "string"
            }
          },
          "required": [
            "artifact_array",
            "owner",
            "repo",
            "adapter_id",
            "commitMessage",
            "branch"
          ]
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "artifact_array": {
              "title": "data_array",
              "type": "array",
              "items": [
                {
                  "type": [
                    "string",
                    "number",
                    "integer",
                    "object",
                    "array",
                    "boolean",
                    "null"
                  ]
                }
              ]
            },
            "owner": {
              "title": "owner",
              "type": "string"
            },
            "repo": {
              "title": "repo",
              "type": "string"
            },
            "adapter_id": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "commitMessage": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "branch": {
              "title": "branch",
              "type": "string"
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            },
            "treeArray": {
              "title": "pushedArray",
              "type": "array",
              "items": [
                {
                  "type": [
                    "string",
                    "number",
                    "integer",
                    "object",
                    "array",
                    "boolean",
                    "null"
                  ]
                }
              ],
              "examples": [
                [
                  "Device1",
                  "Device2",
                  "Device3"
                ]
              ]
            },
            "payLoad": {
              "title": "object",
              "type": "object",
              "properties": {},
              "examples": [
                {
                  "first": {
                    "second": {
                      "third": "last"
                    }
                  }
                }
              ]
            },
            "shaArray": {
              "title": "pushedArray",
              "type": "array",
              "items": [
                {
                  "type": [
                    "string",
                    "number",
                    "integer",
                    "object",
                    "array",
                    "boolean",
                    "null"
                  ]
                }
              ],
              "examples": [
                [
                  "Device1",
                  "Device2",
                  "Device3"
                ]
              ]
            }
          }
        },
        "created": "2022-05-12T17:42:37.891Z",
        "createdVersion": "5.40.5-2021.1.72.0",
        "created_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {}
        },
        "font_size": 12,
        "lastUpdatedVersion": "5.55.2-2023.2.14",
        "last_updated": "2025-02-07T18:10:26.835Z",
        "last_updated_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {}
        },
        "preAutomationTime": 0,
        "sla": 0,
        "type": "automation",
        "canvasVersion": 3,
        "tags": [],
        "groups": [],
        "migrationVersion": 4
      }
    },
    {
      "type": "json-forms",
      "data": {
        "id": "6227766b2944f000ecb4ac8f",
        "bindingSchema": {
          "properties": {
            "checkInPrebuilt": {
              "properties": {
                "versionControlService": {
                  "binding:method": "GET",
                  "binding:link": {
                    "$ref": "/links",
                    "rel": "collection"
                  },
                  "binding:target": {
                    "propertyPointer": "/enum"
                  },
                  "binding:hyperSchema": {
                    "type": "object",
                    "base": "/health",
                    "links": [
                      {
                        "rel": "collection",
                        "href": "/adapters?limit=1000",
                        "targetMediaType": "application/json",
                        "targetSchema": {
                          "$ref": "#"
                        },
                        "variables": []
                      }
                    ]
                  },
                  "binding:source": {
                    "transformation": "6227a41704a9540111aef712"
                  }
                },
                "prebuilt": {
                  "binding:method": "GET",
                  "binding:link": {
                    "$ref": "/links",
                    "rel": "collection"
                  },
                  "binding:target": {
                    "propertyPointer": "/enum"
                  },
                  "binding:hyperSchema": {
                    "type": "object",
                    "base": "/prebuilts",
                    "links": [
                      {
                        "rel": "collection",
                        "href": "/?skip=0&limit=2000",
                        "targetMediaType": "application/json",
                        "targetSchema": {
                          "$ref": "#"
                        },
                        "variables": []
                      }
                    ]
                  },
                  "binding:source": {
                    "propertyPointer": "/results",
                    "keyPointer": "/name"
                  }
                },
                "forExistingProjects": {
                  "properties": {}
                }
              }
            }
          }
        },
        "created": "2022-03-08T15:29:47.024Z",
        "createdBy": "admin@pronghorn",
        "description": "",
        "lastUpdated": "2025-02-06T18:32:45.762Z",
        "lastUpdatedBy": "admin@pronghorn",
        "name": "Prebuilt Promotion Form",
        "schema": {
          "title": "Prebuilt Promotion Form",
          "description": "",
          "type": "object",
          "required": [],
          "properties": {
            "checkInPrebuilt": {
              "type": "object",
              "title": "Check In Pre-Built",
              "description": "",
              "required": [
                "versionControlService",
                "projectName",
                "groupPath",
                "prebuilt"
              ],
              "properties": {
                "versionControlService": {
                  "type": "string",
                  "title": "Version Control Service ",
                  "_id": "/properties/checkInPrebuilt/properties/versionControlService",
                  "description": "Select adapter to use to commit pre-built to version control service",
                  "enum": []
                },
                "projectName": {
                  "type": "string",
                  "title": "Project Name",
                  "_id": "/properties/checkInPrebuilt/properties/projectName",
                  "description": ""
                },
                "makeProjectPrivateGithubOnly": {
                  "type": "boolean",
                  "title": "Make Project Private (Github Only)",
                  "_id": "/properties/checkInPrebuilt/properties/makeProjectPrivateGithubOnly",
                  "description": "Check the box if the repository is to be made private",
                  "default": false,
                  "enum": [
                    true,
                    false
                  ]
                },
                "groupPath": {
                  "type": "string",
                  "title": "Group Path",
                  "_id": "/properties/checkInPrebuilt/properties/groupPath",
                  "description": "Link to the group or workspace to create the project under. Use Organization Name if this is a GitHub project."
                },
                "addRepositoryDependencyFiles": {
                  "type": "boolean",
                  "title": "Add Repository Dependency Files",
                  "_id": "/properties/checkInPrebuilt/properties/addRepositoryDependencyFiles",
                  "description": "If checked, will add repository dependency files in addition to IAP component files such as the package.json file, GitHub action files, and scripts used in GitHub action files.",
                  "default": false,
                  "enum": [
                    true,
                    false
                  ]
                },
                "reDiscoverPrebuilt": {
                  "type": "boolean",
                  "title": "Re-Discover Prebuilt",
                  "_id": "/properties/checkInPrebuilt/properties/reDiscoverPrebuilt",
                  "description": "Check this box in case any IAP components such as workflows, transformations, command templates, etc. have been added or removed",
                  "default": false,
                  "enum": [
                    true,
                    false
                  ]
                },
                "prebuilt": {
                  "type": "string",
                  "title": "Pre-Built",
                  "_id": "/properties/checkInPrebuilt/properties/prebuilt",
                  "description": "Pre-Built to commit to project in version control service",
                  "enum": []
                },
                "projectPath": {
                  "type": "string",
                  "title": "Project Path",
                  "_id": "/properties/checkInPrebuilt/properties/projectPath",
                  "description": "Project to create repository under (only for Bitbucket Cloud). Use uppercase key, ex. AT for Atlassian"
                },
                "forExistingProjects": {
                  "type": "object",
                  "title": "Commit Details",
                  "description": "",
                  "required": [
                    "mrType",
                    "commitMessage",
                    "targetBranch"
                  ],
                  "properties": {
                    "mrType": {
                      "type": "string",
                      "title": "Merge Request Type",
                      "_id": "/properties/checkInPrebuilt/properties/forExistingProjects/properties/mrType",
                      "description": "Type of merge request (patch/minor/major). Typical use is patch for bug fix, minor for new feature, and major for breaking change to pre-built",
                      "enum": [
                        "patch",
                        "minor",
                        "major"
                      ]
                    },
                    "commitMessage": {
                      "type": "string",
                      "title": "Commit Message",
                      "_id": "/properties/checkInPrebuilt/properties/forExistingProjects/properties/commitMessage",
                      "description": "A message to associate with the commit that describes change made"
                    },
                    "targetBranch": {
                      "type": "string",
                      "title": "Target Branch",
                      "_id": "/properties/checkInPrebuilt/properties/forExistingProjects/properties/targetBranch",
                      "description": "Enter target branch for Merge Request. If commit is for new branch, the new branch name is what is provided here."
                    }
                  }
                }
              }
            }
          }
        },
        "struct": {
          "nodeId": "9251ce6e-db72-4080-b3f1-86b340ba1add",
          "type": "array",
          "items": [
            {
              "nodeId": "505987cd-d6fc-4302-a2d0-0b6d68eec044",
              "type": "object",
              "description": "",
              "items": [
                {
                  "nodeId": "637b1837-b609-4698-a0bf-fbfe1eaeaa07",
                  "type": "string",
                  "title": "Version Control Service ",
                  "description": "Select adapter to use to commit pre-built to version control service",
                  "placeholder": "Select an item",
                  "required": true,
                  "enum": [],
                  "binding": true,
                  "rel": "collection",
                  "targetPointer": "/enum",
                  "base": "/health",
                  "href": "/adapters?limit=1000",
                  "method": "GET",
                  "sourcePointer": "",
                  "sourceKeyPointer": "",
                  "transformation": "6227a41704a9540111aef712",
                  "originalHref": "/:name",
                  "helper": "Select adapter to commit pre-built to version control service"
                },
                {
                  "nodeId": "caf191bb-2851-44b0-92f1-9aa83413566c",
                  "type": "string",
                  "title": "Project Name",
                  "description": "",
                  "placeholder": "Enter project name for repository",
                  "required": true,
                  "helper": "Enter project name of the repository as would be found in version control service."
                },
                {
                  "nodeId": "d0897495-4f02-4371-8f7d-a0094845b004",
                  "type": "boolean",
                  "title": "Make Project Private (Github Only)",
                  "description": "Check the box if the repository is to be made private",
                  "default": false,
                  "enum": [
                    {
                      "id": "b8011a3a-f00d-4162-ab48-42ab8b1aef6b",
                      "value": true
                    },
                    {
                      "id": "094620dd-5857-425a-834f-0ba934282f9c",
                      "value": false
                    }
                  ],
                  "helper": "Check the box if the repository is to be made private, note this is only available for GitHub."
                },
                {
                  "nodeId": "58e8670f-5fa1-47a8-8c26-e0155f9d9c3a",
                  "type": "string",
                  "title": "Group Path",
                  "description": "Link to the group or workspace to create the project under. Use Organization Name if this is a GitHub project.",
                  "placeholder": "ACME/engineering/iap",
                  "required": true,
                  "helper": "Link to the group or workspace to create the project under. Use Organization Name if this is a GitHub project."
                },
                {
                  "nodeId": "dfe099f1-1f8a-4413-856e-69e5efe35bc6",
                  "type": "boolean",
                  "title": "Add Repository Dependency Files",
                  "description": "If checked, will add repository dependency files in addition to IAP component files such as the package.json file, GitHub action files, and scripts used in GitHub action files.",
                  "default": false,
                  "enum": [
                    {
                      "id": "52ebbc6d-fe9e-46b8-bc4b-9cc18872d99d",
                      "value": true
                    },
                    {
                      "id": "b848ea0e-ec67-45c0-a072-6c8651d6c7a6",
                      "value": false
                    }
                  ],
                  "customKey": false,
                  "helper": "If checked, will add repository dependency files in addition to IAP component files such as the package.json file, GitHub action files, and scripts used in GitHub action files."
                },
                {
                  "nodeId": "fd106739-664a-4d51-a48b-74598d17c545",
                  "type": "boolean",
                  "title": "Re-Discover Prebuilt",
                  "description": "Check this box in case any IAP components such as workflows, transformations, command templates, etc. have been added or removed",
                  "default": false,
                  "enum": [
                    {
                      "id": "bec790e9-1ce4-497a-a3c9-9bcbb6d44e75",
                      "value": true
                    },
                    {
                      "id": "5e3ec6ca-675e-4393-a5a7-d2d65bf355ab",
                      "value": false
                    }
                  ],
                  "helper": "Check this box in case any IAP components such as workflows, transformations, command templates, etc. have been added or removed"
                },
                {
                  "nodeId": "ca5a34e8-8989-403a-800d-b17f713a49b5",
                  "type": "string",
                  "title": "Pre-Built",
                  "description": "Pre-Built to commit to project in version control service",
                  "placeholder": "Select a Pre-Built",
                  "required": true,
                  "enum": [],
                  "binding": true,
                  "rel": "collection",
                  "targetPointer": "/enum",
                  "base": "/prebuilts",
                  "href": "/?skip=0&limit=2000",
                  "method": "GET",
                  "sourcePointer": "/results",
                  "sourceKeyPointer": "/name",
                  "helper": "Pre-Built to commit to project in version control service",
                  "customKey": "prebuilt"
                },
                {
                  "nodeId": "cd3225cb-6c1e-411c-ac14-e2ea7bb28d2c",
                  "type": "string",
                  "title": "Project Path",
                  "description": "Project to create repository under (only for Bitbucket Cloud). Use uppercase key, ex. AT for Atlassian",
                  "placeholder": "Only for Bitbucket Cloud",
                  "required": false,
                  "readOnly": false,
                  "binding": false,
                  "rel": "item",
                  "targetPointer": "/default",
                  "helper": "Project to create repository under (only for Bitbucket Cloud). Use uppercase key, ex. AT for Atlassian"
                },
                {
                  "nodeId": "76f14d91-05ba-41a2-aa14-c6bfbb07e7a3",
                  "type": "object",
                  "description": "",
                  "items": [
                    {
                      "nodeId": "293a11d4-b9fd-4bb1-82e3-021bec9c9743",
                      "type": "string",
                      "title": "Merge Request Type",
                      "description": "Type of merge request (patch/minor/major). Typical use is patch for bug fix, minor for new feature, and major for breaking change to pre-built",
                      "placeholder": "Enter Merge Request type",
                      "required": true,
                      "enum": [
                        {
                          "id": "3f87d31f-6465-4701-b0d3-7aa3b2e32f30",
                          "value": "patch"
                        },
                        {
                          "id": "74ea8535-8cdd-44fe-bfae-8b28717e86f1",
                          "value": "minor"
                        },
                        {
                          "id": "572e2ebe-8b19-43c3-9c55-8cf1fc723347",
                          "value": "major"
                        }
                      ],
                      "binding": false,
                      "rel": "collection",
                      "targetPointer": "/enum",
                      "helper": "Type of merge request (patch/minor/major). Typical use is patch for bug fix, minor for new feature, and major for breaking change to pre-built",
                      "customKey": "mrType"
                    },
                    {
                      "nodeId": "36d63b0b-bb1a-4f31-87ee-5e23bac03ae1",
                      "type": "string",
                      "title": "Commit Message",
                      "description": "A message to associate with the commit that describes change made",
                      "placeholder": "Enter commit message",
                      "required": true,
                      "helper": "A message to associate with the commit that describes change made"
                    },
                    {
                      "nodeId": "cb55002f-3061-4bf0-a8f2-eaac5ebf8adb",
                      "type": "string",
                      "title": "Target Branch",
                      "description": "Enter target branch for Merge Request. If commit is for new branch, the new branch name is what is provided here.",
                      "placeholder": "Enter target branch of Merge Request",
                      "required": true,
                      "helper": "Enter target branch for Merge Request. If commit is for new branch, the new branch name is what is provided here."
                    }
                  ],
                  "title": "Commit Details",
                  "customKey": "forExistingProjects"
                }
              ],
              "title": "Check In Pre-Built",
              "customKey": "checkInPrebuilt"
            }
          ]
        },
        "uiSchema": {
          "checkInPrebuilt": {
            "ui:collapseByDefault": false,
            "versionControlService": {
              "ui:placeholder": "Select an item",
              "ui:help": "Select adapter to commit pre-built to version control service"
            },
            "projectName": {
              "ui:placeholder": "Enter project name for repository",
              "ui:help": "Enter project name of the repository as would be found in version control service."
            },
            "groupPath": {
              "ui:placeholder": "ACME/engineering/iap",
              "ui:help": "Link to the group or workspace to create the project under. Use Organization Name if this is a GitHub project."
            },
            "prebuilt": {
              "ui:placeholder": "Select a Pre-Built",
              "ui:help": "Pre-Built to commit to project in version control service"
            },
            "projectPath": {
              "ui:placeholder": "Only for Bitbucket Cloud",
              "ui:help": "Project to create repository under (only for Bitbucket Cloud). Use uppercase key, ex. AT for Atlassian"
            },
            "forExistingProjects": {
              "ui:collapseByDefault": false,
              "mrType": {
                "ui:placeholder": "Enter Merge Request type",
                "ui:help": "Type of merge request (patch/minor/major). Typical use is patch for bug fix, minor for new feature, and major for breaking change to pre-built"
              },
              "commitMessage": {
                "ui:placeholder": "Enter commit message",
                "ui:help": "A message to associate with the commit that describes change made"
              },
              "targetBranch": {
                "ui:placeholder": "Enter target branch of Merge Request",
                "ui:help": "Enter target branch for Merge Request. If commit is for new branch, the new branch name is what is provided here."
              }
            }
          }
        },
        "validationSchema": {
          "checkInPrebuilt": {
            "forExistingProjects": {}
          }
        },
        "version": "2020.1"
      }
    },
    {
      "type": "json-forms",
      "data": {
        "id": "620ec34b8cb5a700f23019ad",
        "created": "2022-02-17T21:51:07.149Z",
        "createdBy": "admin@pronghorn",
        "lastUpdated": "2025-02-06T18:32:45.826Z",
        "lastUpdatedBy": "admin@pronghorn",
        "name": "Re-Discovery Components Form",
        "description": "This form allows a user to verify that the 'discovered components' contain everything that is required for their particular prebuilt. If there are extra/missing components, the user can edit the list accordingly.",
        "struct": {
          "nodeId": "c8e815ab-cb7d-4869-908d-f578ba61bf63",
          "type": "array",
          "items": [
            {
              "nodeId": "ce1da193-5148-4ee8-988b-efc78b75f279",
              "type": "object",
              "description": "",
              "items": [
                {
                  "nodeId": "61748fab-3597-403e-987d-a9ff85462054",
                  "type": "array",
                  "description": "",
                  "items": [
                    {
                      "nodeId": "23b16e1f-2fe0-442d-ac68-7b1d8dba933a",
                      "type": "string",
                      "title": "Name",
                      "description": "",
                      "placeholder": "Enter text",
                      "required": true,
                      "readOnly": false,
                      "binding": false,
                      "rel": "item",
                      "targetPointer": "/default"
                    }
                  ],
                  "title": "Operations Automations"
                },
                {
                  "nodeId": "c5608cde-447e-4f7d-b257-e3377f9ba1d4",
                  "type": "array",
                  "description": "",
                  "items": [
                    {
                      "nodeId": "07df38bf-33cb-43d7-91a4-98581b42da8c",
                      "type": "string",
                      "title": "Name",
                      "description": "",
                      "placeholder": "",
                      "required": true
                    }
                  ],
                  "title": "Catalog Automations"
                },
                {
                  "nodeId": "b2cfbfa0-a0c4-46f5-9c46-7e2c315e22b0",
                  "type": "array",
                  "description": "",
                  "items": [
                    {
                      "nodeId": "f3ef6d1d-4ba1-48d4-8224-b624a0f7a7d0",
                      "type": "string",
                      "title": "Name",
                      "description": "",
                      "placeholder": "",
                      "required": true
                    }
                  ],
                  "title": "Workflows"
                },
                {
                  "nodeId": "1920615b-2822-40f5-b905-eae57689f7a9",
                  "type": "array",
                  "description": "",
                  "items": [
                    {
                      "nodeId": "e5193f31-8763-499a-9113-33a5956ebda4",
                      "type": "string",
                      "widget": "textarea",
                      "title": "Id",
                      "description": "",
                      "placeholder": "",
                      "required": true
                    },
                    {
                      "nodeId": "c96bde0a-7d74-4914-9958-af132fb945c7",
                      "type": "string",
                      "title": "Name",
                      "description": "",
                      "placeholder": "Enter text",
                      "required": false,
                      "readOnly": false,
                      "binding": false,
                      "rel": "item",
                      "targetPointer": "/default"
                    }
                  ],
                  "title": "Transformations"
                },
                {
                  "nodeId": "f221055a-6a68-4a4a-a472-65cda13d0845",
                  "type": "array",
                  "description": "",
                  "items": [
                    {
                      "nodeId": "a4c14093-0170-4a75-9303-6154e34cb607",
                      "type": "string",
                      "widget": "textarea",
                      "title": "Name",
                      "description": "",
                      "placeholder": "",
                      "required": true
                    }
                  ],
                  "title": "JSON Forms"
                },
                {
                  "nodeId": "130de3e1-1188-42d8-bf35-39b5a53bf5d5",
                  "type": "array",
                  "description": "",
                  "items": [
                    {
                      "nodeId": "7bb94765-e6ea-4369-b856-45c4a58734cf",
                      "type": "string",
                      "title": "Name",
                      "description": "",
                      "placeholder": "",
                      "required": true
                    }
                  ],
                  "title": "Forms"
                },
                {
                  "nodeId": "7f2e64a4-5498-40c8-82d0-c48eaa9b481a",
                  "type": "array",
                  "description": "",
                  "items": [
                    {
                      "nodeId": "a3d138aa-4a83-4c59-b23a-29331e30339b",
                      "type": "string",
                      "title": "Name",
                      "description": "",
                      "placeholder": "",
                      "required": true
                    }
                  ],
                  "title": "Templates"
                },
                {
                  "nodeId": "ccb287ba-b566-4cbd-b56e-a171b3334027",
                  "type": "array",
                  "description": "",
                  "items": [
                    {
                      "nodeId": "fdc26a05-e9eb-489b-973a-828f06cbf663",
                      "type": "string",
                      "title": "Name",
                      "description": "",
                      "placeholder": "",
                      "required": true
                    }
                  ],
                  "title": "Command Templates"
                },
                {
                  "nodeId": "b7d81941-8b4f-47ac-aafd-27e37d41ddb7",
                  "type": "array",
                  "description": "",
                  "items": [
                    {
                      "nodeId": "2c341f42-5f69-4f95-ae8c-1c87e37e6ea4",
                      "type": "string",
                      "title": "Name",
                      "description": "",
                      "placeholder": "",
                      "required": true
                    }
                  ],
                  "title": "Analytic Templates"
                },
                {
                  "nodeId": "b9150dd0-d13c-4df6-9844-082260a5a821",
                  "type": "array",
                  "description": "",
                  "items": [
                    {
                      "nodeId": "eb4401d0-da0a-4973-a44b-8efce075581a",
                      "type": "string",
                      "title": "Name",
                      "description": "",
                      "placeholder": "Enter text",
                      "required": false,
                      "readOnly": false,
                      "binding": false,
                      "rel": "item",
                      "targetPointer": "/default"
                    },
                    {
                      "nodeId": "f212e72e-ea5a-45da-928c-bf368044169c",
                      "type": "string",
                      "title": "treeId",
                      "description": "",
                      "placeholder": "",
                      "required": true
                    }
                  ],
                  "title": "Golden Config Trees"
                }
              ],
              "title": "Components"
            }
          ]
        },
        "schema": {
          "title": "Re-Discovery Components Form",
          "description": "This form allows a user to verify that the 'discovered components' contain everything that is required for their particular prebuilt. If there are extra/missing components, the user can edit the list accordingly.",
          "type": "object",
          "required": [],
          "properties": {
            "components": {
              "type": "object",
              "title": "Components",
              "description": "",
              "required": [],
              "properties": {
                "operationsAutomations": {
                  "type": "array",
                  "title": "Operations Automations",
                  "description": "",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "title": "Name",
                        "description": ""
                      }
                    }
                  }
                },
                "catalogAutomations": {
                  "type": "array",
                  "title": "Catalog Automations",
                  "description": "",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "title": "Name",
                        "description": ""
                      }
                    }
                  }
                },
                "workflows": {
                  "type": "array",
                  "title": "Workflows",
                  "description": "",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "title": "Name",
                        "description": ""
                      }
                    }
                  }
                },
                "transformations": {
                  "type": "array",
                  "title": "Transformations",
                  "description": "",
                  "items": {
                    "type": "object",
                    "required": [
                      "id"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "title": "Id",
                        "description": ""
                      },
                      "name": {
                        "type": "string",
                        "title": "Name",
                        "description": ""
                      }
                    }
                  }
                },
                "jsonForms": {
                  "type": "array",
                  "title": "JSON Forms",
                  "description": "",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "title": "Name",
                        "description": ""
                      }
                    }
                  }
                },
                "forms": {
                  "type": "array",
                  "title": "Forms",
                  "description": "",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "title": "Name",
                        "description": ""
                      }
                    }
                  }
                },
                "templates": {
                  "type": "array",
                  "title": "Templates",
                  "description": "",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "title": "Name",
                        "description": ""
                      }
                    }
                  }
                },
                "commandTemplates": {
                  "type": "array",
                  "title": "Command Templates",
                  "description": "",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "title": "Name",
                        "description": ""
                      }
                    }
                  }
                },
                "analyticTemplates": {
                  "type": "array",
                  "title": "Analytic Templates",
                  "description": "",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "title": "Name",
                        "description": ""
                      }
                    }
                  }
                },
                "goldenConfigTrees": {
                  "type": "array",
                  "title": "Golden Config Trees",
                  "description": "",
                  "items": {
                    "type": "object",
                    "required": [
                      "treeId"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "title": "Name",
                        "description": ""
                      },
                      "treeId": {
                        "type": "string",
                        "title": "treeId",
                        "description": ""
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "uiSchema": {
          "components": {
            "ui:collapseByDefault": false,
            "items": {
              "operationsAutomations": {
                "items": {
                  "name": {
                    "ui:placeholder": "Enter text"
                  }
                }
              },
              "catalogAutomations": {
                "items": {}
              },
              "workflows": {
                "items": {}
              },
              "transformations": {
                "items": {
                  "id": {
                    "ui:widget": "textarea"
                  },
                  "name": {
                    "ui:placeholder": "Enter text"
                  }
                }
              },
              "jsonForms": {
                "items": {
                  "name": {
                    "ui:widget": "textarea"
                  }
                }
              },
              "forms": {
                "items": {}
              },
              "templates": {
                "items": {}
              },
              "commandTemplates": {
                "items": {}
              },
              "analyticTemplates": {
                "items": {}
              },
              "goldenConfigTrees": {
                "items": {
                  "name": {
                    "ui:placeholder": "Enter text"
                  }
                }
              }
            }
          }
        },
        "bindingSchema": {
          "properties": {
            "components": {
              "properties": {
                "operationsAutomations": {
                  "items": {
                    "properties": {}
                  }
                },
                "catalogAutomations": {
                  "items": {
                    "properties": {}
                  }
                },
                "workflows": {
                  "items": {
                    "properties": {}
                  }
                },
                "transformations": {
                  "items": {
                    "properties": {}
                  }
                },
                "jsonForms": {
                  "items": {
                    "properties": {}
                  }
                },
                "forms": {
                  "items": {
                    "properties": {}
                  }
                },
                "templates": {
                  "items": {
                    "properties": {}
                  }
                },
                "commandTemplates": {
                  "items": {
                    "properties": {}
                  }
                },
                "analyticTemplates": {
                  "items": {
                    "properties": {}
                  }
                },
                "goldenConfigTrees": {
                  "items": {
                    "properties": {}
                  }
                }
              }
            }
          }
        },
        "validationSchema": {
          "components": {
            "operationsAutomations": {},
            "catalogAutomations": {},
            "workflows": {},
            "transformations": {},
            "jsonForms": {},
            "forms": {},
            "templates": {},
            "commandTemplates": {},
            "analyticTemplates": {},
            "goldenConfigTrees": {}
          }
        },
        "version": "2020.1"
      }
    },
    {
      "type": "template",
      "data": {
        "_id": "625dcb70acd5d400a6e45565",
        "command": "",
        "name": "BitbucketFilesToAddAndDelete",
        "tags": [],
        "template": "{%set finalOutput = {} %}\n{%for file in artifact%}\n{%if file.content is string%}\n{%set _ = finalOutput.update({file.name: file.content}) %}\n{%else%}\n{%for file1 in file.content%}\n{%if file1.content is string%}\n{%set _ = finalOutput.update({file.name + \"/\" + file1.name: file1.content}) %}\n{%else%}\n{%for file2 in file1.content%}\n{%set _ = finalOutput.update({file.name + \"/\" + file1.name + \"/\" + file2.name: file2.content}) %}\n{%endfor%}\n{%endif%}\n{%endfor%}\n{%endif%}\n{%endfor%}\n{%for file in scripts[\"scriptFiles\"]%}\n{%set _ = finalOutput.update({\"scripts/\" + file.name: file.content}) %}\n{%endfor%}\n{%for file in scripts[\"testFiles\"]%}\n{%set _ = finalOutput.update({\"test/\" + file.name: file.content}) %}\n{%endfor%}\n{%for file in scripts[\"yml\"]%}\n{%set _ = finalOutput.update({file.name: file.content}) %}\n{%endfor%}\n\n{%set _ = finalOutput.update({\"branch\": branch}) %}\n{%set _ = finalOutput.update({\"message\": commitMessage}) %}\n\n{% for key, value in finalOutput.items() %}\n{%if key in deleteFiles%}\n{%set _ = deleteFiles.remove(key)%}\n{%endif%}\n{% endfor %}\n\n{\"add\": {{finalOutput | tojson }},\n\"delete\":{{deleteFiles | tojson}}\n}",
        "type": "jinja2",
        "version": 1,
        "data": "{\n  \"artifact\": [\n    {\n      \"name\": \"README.md\",\n      \"type\": \"file\",\n      \"content\": \"\"\n    },\n    {\n      \"name\": \"LICENSE\",\n      \"type\": \"file\",\n      \"content\": \"Apache-2.0\"\n    },\n    {\n      \"name\": \"package.json\",\n      \"type\": \"file\",\n      \"content\": \"{\\n  \\\"name\\\": \\\"@psup/finalbitbuckettest\\\",\\n  \\\"author\\\": \\\"Itential Automation Platform\\\",\\n  \\\"version\\\": \\\"0.0.2\\\",\\n  \\\"description\\\": \\\"\\\",\\n  \\\"scripts\\\": {\\n    \\\"test\\\": \\\"echo \\\\\\\"Error: no test specified\\\\\\\" && exit 1\\\",\\n    \\\"deploy\\\": \\\"echo not needed npm publish --access=public --registry=http://registry.npmjs.org\\\",\\n    \\\"validateSchema\\\": \\\"node test/manifestTester.js manifest.json manifest-schema.json\\\",\\n    \\\"validateSchemaLinks\\\": \\\"node test/manifestLinkTester.js manifest.json\\\",\\n    \\\"generateImageLinks\\\": \\\"node utils/generateImageLinks.js\\\"\\n  },\\n  \\\"repository\\\": {\\n    \\\"type\\\": \\\"bitbucket\\\",\\n    \\\"hostname\\\": \\\"api.bitbucket.org\\\",\\n    \\\"path\\\": \\\"itentialdsup\\\"\\n  },\\n  \\\"keywords\\\": [\\n    \\\"Itential\\\",\\n    \\\"IAP\\\",\\n    \\\"artifacts\\\"\\n  ],\\n  \\\"license\\\": \\\"Apache-2.0\\\",\\n  \\\"devDependencies\\\": {\\n    \\\"r2\\\": \\\"^2.0.1\\\",\\n    \\\"ajv\\\": \\\"6.10.0\\\",\\n    \\\"better-ajv-errors\\\": \\\"^0.6.1\\\",\\n    \\\"fs-extra\\\": \\\"^7.0.1\\\"\\n  },\\n  \\\"IAPDependencies\\\": {\\n    \\\"@itential/app-workflow_engine\\\": \\\"\\\",\\n    \\\"@itential/app-template_builder\\\": \\\"\\\"\\n  },\\n  \\\"IAPCategories\\\": []\\n}\"\n    },\n    {\n      \"name\": \"bundles\",\n      \"type\": \"directory\",\n      \"content\": [\n        {\n          \"name\": \"ac_agenda_jobs\",\n          \"type\": \"directory\",\n          \"content\": []\n        },\n        {\n          \"name\": \"automations\",\n          \"type\": \"directory\",\n          \"content\": []\n        },\n        {\n          \"name\": \"workflows\",\n          \"type\": \"directory\",\n          \"content\": [\n            {\n              \"name\": \"Test1.json\",\n              \"type\": \"file\",\n              \"content\": \"{\\n  \\\"name\\\": \\\"Test1\\\",\\n  \\\"type\\\": \\\"automation\\\",\\n  \\\"tasks\\\": {\\n    \\\"workflow_start\\\": {\\n      \\\"name\\\": \\\"workflow_start\\\",\\n      \\\"groups\\\": [],\\n      \\\"x\\\": 0,\\n      \\\"y\\\": 0.5\\n    },\\n    \\\"workflow_end\\\": {\\n      \\\"name\\\": \\\"workflow_end\\\",\\n      \\\"groups\\\": [],\\n      \\\"x\\\": 1,\\n      \\\"y\\\": 0.5\\n    },\\n    \\\"5d2e\\\": {\\n      \\\"name\\\": \\\"newVariable\\\",\\n      \\\"canvasName\\\": \\\"newVariable\\\",\\n      \\\"summary\\\": \\\"Create a Job Variable\\\",\\n      \\\"description\\\": \\\"Create a new Job variable by Job ID and assign it a value.\\\",\\n      \\\"location\\\": \\\"Application\\\",\\n      \\\"locationType\\\": null,\\n      \\\"app\\\": \\\"WorkFlowEngine\\\",\\n      \\\"type\\\": \\\"operation\\\",\\n      \\\"displayName\\\": \\\"WorkFlowEngine\\\",\\n      \\\"variables\\\": {\\n        \\\"incoming\\\": {\\n          \\\"name\\\": \\\"dummy\\\",\\n          \\\"value\\\": \\\" \\\\\\\"{\\\\\\\\n  \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"/@psup/testprebuilt\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"author\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Itential Automation Platform\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"0.0.1\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Test Sanjana\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"scripts\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"test\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Error: no test specified\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\u0026\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\u0026 exit 1\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"deploy\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"echo not needed npm publish --access=public --registry=http://registry.npmjs.org\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"validateSchema\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"node test/manifestTester.js manifest.json manifest-schema.json\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"validateSchemaLinks\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"node test/manifestLinkTester.js manifest.json\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"generateImageLinks\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"node utils/generateImageLinks.js\\\\\\\\\\\\\\\"\\\\\\\\n  },\\\\\\\\n  \\\\\\\\\\\\\\\"repository\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"bitbucket\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"hostname\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"api.bitbucket.org\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"path\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"itentialdsup\\\\\\\\\\\\\\\"\\\\\\\\n  },\\\\\\\\n  \\\\\\\\\\\\\\\"keywords\\\\\\\\\\\\\\\": [\\\\\\\\n    \\\\\\\\\\\\\\\"Itential\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"IAP\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"artifacts\\\\\\\\\\\\\\\"\\\\\\\\n  ],\\\\\\\\n  \\\\\\\\\\\\\\\"license\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Apache-2.0\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"devDependencies\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"r2\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^2.0.1\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"ajv\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"6.10.0\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"better-ajv-errors\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^0.6.1\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"fs-extra\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^7.0.1\\\\\\\\\\\\\\\"\\\\\\\\n  },\\\\\\\\n  \\\\\\\\\\\\\\\"IAPDependencies\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"@itential/app-workflow_engine\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n  },\\\\\\\\n  \\\\\\\\\\\\\\\"IAPCategories\\\\\\\\\\\\\\\": []}\\\\\\\"\\\\n}\\\"\\n        },\\n        \\\"outgoing\\\": {\\n          \\\"value\\\": null\\n        }\\n      },\\n      \\\"deprecated\\\": false,\\n      \\\"groups\\\": [],\\n      \\\"x\\\": 0.16627450980392156,\\n      \\\"y\\\": 0.46580645161290324\\n    },\\n    \\\"46eb\\\": {\\n      \\\"name\\\": \\\"makeData\\\",\\n      \\\"canvasName\\\": \\\"makeData\\\",\\n      \\\"summary\\\": \\\"Convert input into a different data type\\\",\\n      \\\"description\\\": \\\"This task takes an input and converts it to a different data type. For example, converting a number into a string.\\\",\\n      \\\"location\\\": \\\"Application\\\",\\n      \\\"locationType\\\": null,\\n      \\\"app\\\": \\\"WorkFlowEngine\\\",\\n      \\\"type\\\": \\\"automatic\\\",\\n      \\\"displayName\\\": \\\"Tools\\\",\\n      \\\"variables\\\": {\\n        \\\"incoming\\\": {\\n          \\\"input\\\": \\\"$var.5d2e.value\\\",\\n          \\\"outputType\\\": \\\"json\\\",\\n          \\\"variables\\\": \\\"\\\"\\n        },\\n        \\\"outgoing\\\": {\\n          \\\"output\\\": null\\n        },\\n        \\\"error\\\": \\\"\\\",\\n        \\\"decorators\\\": []\\n      },\\n      \\\"deprecated\\\": false,\\n      \\\"groups\\\": [],\\n      \\\"actor\\\": \\\"Pronghorn\\\",\\n      \\\"x\\\": 0.5058823529411764,\\n      \\\"y\\\": 0.4,\\n      \\\"scheduled\\\": false\\n    },\\n    \\\"cf8e\\\": {\\n      \\\"name\\\": \\\"childJob\\\",\\n      \\\"canvasName\\\": \\\"childJob\\\",\\n      \\\"summary\\\": \\\"Run Child Job\\\",\\n      \\\"description\\\": \\\"Runs a child job inside a workflow.\\\",\\n      \\\"location\\\": \\\"Application\\\",\\n      \\\"locationType\\\": null,\\n      \\\"app\\\": \\\"WorkFlowEngine\\\",\\n      \\\"type\\\": \\\"operation\\\",\\n      \\\"displayName\\\": \\\"WorkFlowEngine\\\",\\n      \\\"variables\\\": {\\n        \\\"incoming\\\": {\\n          \\\"task\\\": \\\"\\\",\\n          \\\"workflow\\\": \\\"Test2\\\",\\n          \\\"variables\\\": {},\\n          \\\"data_array\\\": \\\"\\\",\\n          \\\"transformation\\\": \\\"\\\",\\n          \\\"loopType\\\": \\\"\\\"\\n        },\\n        \\\"outgoing\\\": {\\n          \\\"job_details\\\": null\\n        }\\n      },\\n      \\\"deprecated\\\": false,\\n      \\\"groups\\\": [],\\n      \\\"actor\\\": \\\"job\\\",\\n      \\\"x\\\": 0.3247058823529412,\\n      \\\"y\\\": 0.36516129032258066\\n    }\\n  },\\n  \\\"transitions\\\": {\\n    \\\"workflow_start\\\": {\\n      \\\"5d2e\\\": {\\n        \\\"type\\\": \\\"standard\\\",\\n        \\\"state\\\": \\\"success\\\"\\n      }\\n    },\\n    \\\"workflow_end\\\": {},\\n    \\\"5d2e\\\": {\\n      \\\"cf8e\\\": {\\n        \\\"type\\\": \\\"standard\\\",\\n        \\\"state\\\": \\\"success\\\"\\n      }\\n    },\\n    \\\"46eb\\\": {\\n      \\\"workflow_end\\\": {\\n        \\\"type\\\": \\\"standard\\\",\\n        \\\"state\\\": \\\"success\\\"\\n      }\\n    },\\n    \\\"cf8e\\\": {\\n      \\\"46eb\\\": {\\n        \\\"type\\\": \\\"standard\\\",\\n        \\\"state\\\": \\\"success\\\"\\n      }\\n    }\\n  },\\n  \\\"font_size\\\": 12,\\n  \\\"last_updated\\\": \\\"2022-04-27T20:14:02.114Z\\\",\\n  \\\"last_updated_by\\\": {\\n    \\\"provenance\\\": \\\"local_aaa\\\",\\n    \\\"username\\\": \\\"admin@pronghorn\\\",\\n    \\\"firstname\\\": \\\"admin\\\",\\n    \\\"inactive\\\": false,\\n    \\\"email\\\": \\\"\\\"\\n  },\\n  \\\"lastUpdatedVersion\\\": \\\"5.40.5-2021.1.72.0\\\",\\n  \\\"inputSchema\\\": {\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"properties\\\": {}\\n  },\\n  \\\"outputSchema\\\": {\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"_id\\\": {\\n        \\\"type\\\": \\\"string\\\",\\n        \\\"pattern\\\": \\\"^[0-9a-f]{24}$\\\"\\n      },\\n      \\\"initiator\\\": {\\n        \\\"type\\\": \\\"string\\\"\\n      },\\n      \\\"dummy\\\": {\\n        \\\"type\\\": \\\"string\\\"\\n      }\\n    }\\n  },\\n  \\\"created\\\": \\\"2022-04-08T16:13:39.641Z\\\",\\n  \\\"created_by\\\": {\\n    \\\"provenance\\\": \\\"local_aaa\\\",\\n    \\\"username\\\": \\\"admin@pronghorn\\\",\\n    \\\"firstname\\\": \\\"admin\\\",\\n    \\\"inactive\\\": false,\\n    \\\"email\\\": \\\"\\\"\\n  },\\n  \\\"createdVersion\\\": \\\"5.40.5-2021.1.72.0\\\",\\n  \\\"tags\\\": [],\\n  \\\"groups\\\": []\\n}\"\n            },\n            {\n              \"name\": \"Test2.json\",\n              \"type\": \"file\",\n              \"content\": \"{\\n  \\\"name\\\": \\\"Test2\\\",\\n  \\\"type\\\": \\\"automation\\\",\\n  \\\"tasks\\\": {\\n    \\\"7514\\\": {\\n      \\\"name\\\": \\\"renderJinjaTemplate\\\",\\n      \\\"canvasName\\\": \\\"renderJinjaTemplate\\\",\\n      \\\"summary\\\": \\\"Render Jinja Template\\\",\\n      \\\"description\\\": \\\"Renders jinja template output.\\\",\\n      \\\"location\\\": \\\"Application\\\",\\n      \\\"locationType\\\": null,\\n      \\\"app\\\": \\\"TemplateBuilder\\\",\\n      \\\"type\\\": \\\"automatic\\\",\\n      \\\"displayName\\\": \\\"TemplateBuilder\\\",\\n      \\\"variables\\\": {\\n        \\\"incoming\\\": {\\n          \\\"name\\\": \\\"filesFormat\\\",\\n          \\\"context\\\": \\\"$var.job.test\\\"\\n        },\\n        \\\"outgoing\\\": {\\n          \\\"renderedTemplate\\\": null\\n        },\\n        \\\"error\\\": \\\"\\\",\\n        \\\"decorators\\\": []\\n      },\\n      \\\"deprecated\\\": false,\\n      \\\"groups\\\": [],\\n      \\\"actor\\\": \\\"Pronghorn\\\",\\n      \\\"x\\\": 0.6431372549019608,\\n      \\\"y\\\": 0.21806451612903227,\\n      \\\"scheduled\\\": false\\n    },\\n    \\\"workflow_start\\\": {\\n      \\\"name\\\": \\\"workflow_start\\\",\\n      \\\"groups\\\": [],\\n      \\\"x\\\": 0.403921568627451,\\n      \\\"y\\\": 0.3076923076923077\\n    },\\n    \\\"workflow_end\\\": {\\n      \\\"name\\\": \\\"workflow_end\\\",\\n      \\\"groups\\\": [],\\n      \\\"x\\\": 1.0807843137254902,\\n      \\\"y\\\": 0.46580645161290324\\n    },\\n    \\\"71fc\\\": {\\n      \\\"name\\\": \\\"newVariable\\\",\\n      \\\"canvasName\\\": \\\"newVariable\\\",\\n      \\\"summary\\\": \\\"Create a Job Variable\\\",\\n      \\\"description\\\": \\\"Create a new Job variable by Job ID and assign it a value.\\\",\\n      \\\"location\\\": \\\"Application\\\",\\n      \\\"locationType\\\": null,\\n      \\\"app\\\": \\\"WorkFlowEngine\\\",\\n      \\\"type\\\": \\\"operation\\\",\\n      \\\"displayName\\\": \\\"WorkFlowEngine\\\",\\n      \\\"variables\\\": {\\n        \\\"incoming\\\": {\\n          \\\"name\\\": \\\"test\\\",\\n          \\\"value\\\": {\\n            \\\"artifact\\\": {\\n              \\\"update\\\": [\\n                {\\n                  \\\"name\\\": \\\"README.md\\\",\\n                  \\\"type\\\": \\\"file\\\",\\n                  \\\"content\\\": \\\"\\\"\\n                },\\n                {\\n                  \\\"name\\\": \\\"LICENSE\\\",\\n                  \\\"type\\\": \\\"file\\\",\\n                  \\\"content\\\": \\\"Apache-2.0\\\"\\n                },\\n                {\\n                  \\\"name\\\": \\\"package.json\\\",\\n                  \\\"type\\\": \\\"file\\\",\\n                  \\\"content\\\": \\\"{\\\\n  \\\\\\\"name\\\\\\\": \\\\\\\"/@psup/testprebuilt\\\\\\\",\\\\n  \\\\\\\"author\\\\\\\": \\\\\\\"Itential Automation Platform\\\\\\\",\\\\n  \\\\\\\"version\\\\\\\": \\\\\\\"0.0.1\\\\\\\",\\\\n  \\\\\\\"description\\\\\\\": \\\\\\\"Test Sanjana\\\\\\\",\\\\n  \\\\\\\"scripts\\\\\\\": {\\\\n    \\\\\\\"test\\\\\\\": \\\\\\\"echo \\\\\\\\\\\\\\\"Error: no test specified\\\\\\\\\\\\\\\" && exit 1\\\\\\\",\\\\n    \\\\\\\"deploy\\\\\\\": \\\\\\\"echo not needed npm publish --access=public --registry=http://registry.npmjs.org\\\\\\\",\\\\n    \\\\\\\"validateSchema\\\\\\\": \\\\\\\"node test/manifestTester.js manifest.json manifest-schema.json\\\\\\\",\\\\n    \\\\\\\"validateSchemaLinks\\\\\\\": \\\\\\\"node test/manifestLinkTester.js manifest.json\\\\\\\",\\\\n    \\\\\\\"generateImageLinks\\\\\\\": \\\\\\\"node utils/generateImageLinks.js\\\\\\\"\\\\n  },\\\\n  \\\\\\\"repository\\\\\\\": {\\\\n    \\\\\\\"type\\\\\\\": \\\\\\\"bitbucket\\\\\\\",\\\\n    \\\\\\\"hostname\\\\\\\": \\\\\\\"api.bitbucket.org\\\\\\\",\\\\n    \\\\\\\"path\\\\\\\": \\\\\\\"itentialdsup\\\\\\\"\\\\n  },\\\\n  \\\\\\\"keywords\\\\\\\": [\\\\n    \\\\\\\"Itential\\\\\\\",\\\\n    \\\\\\\"IAP\\\\\\\",\\\\n    \\\\\\\"artifacts\\\\\\\"\\\\n  ],\\\\n  \\\\\\\"license\\\\\\\": \\\\\\\"Apache-2.0\\\\\\\",\\\\n  \\\\\\\"devDependencies\\\\\\\": {\\\\n    \\\\\\\"r2\\\\\\\": \\\\\\\"^2.0.1\\\\\\\",\\\\n    \\\\\\\"ajv\\\\\\\": \\\\\\\"6.10.0\\\\\\\",\\\\n    \\\\\\\"better-ajv-errors\\\\\\\": \\\\\\\"^0.6.1\\\\\\\",\\\\n    \\\\\\\"fs-extra\\\\\\\": \\\\\\\"^7.0.1\\\\\\\"\\\\n  },\\\\n  \\\\\\\"IAPDependencies\\\\\\\": {\\\\n    \\\\\\\"@itential/app-workflow_engine\\\\\\\": \\\\\\\"\\\\\\\"\\\\n  },\\\\n  \\\\\\\"IAPCategories\\\\\\\": []\\\\n}\\\"\\n                }\\n              ],\\n              \\\"create\\\": [\\n                {\\n                  \\\"name\\\": \\\"bundles\\\",\\n                  \\\"type\\\": \\\"directory\\\",\\n                  \\\"content\\\": [\\n                    {\\n                      \\\"name\\\": \\\"ac_agenda_jobs\\\",\\n                      \\\"type\\\": \\\"directory\\\",\\n                      \\\"content\\\": []\\n                    },\\n                    {\\n                      \\\"name\\\": \\\"automations\\\",\\n                      \\\"type\\\": \\\"directory\\\",\\n                      \\\"content\\\": []\\n                    },\\n                    {\\n                      \\\"name\\\": \\\"workflows\\\",\\n                      \\\"type\\\": \\\"directory\\\",\\n                      \\\"content\\\": [\\n                        {\\n                          \\\"name\\\": \\\"Test1.json\\\",\\n                          \\\"type\\\": \\\"file\\\",\\n                          \\\"content\\\": \\\"{\\\\n  \\\\\\\"name\\\\\\\": \\\\\\\"Test1\\\\\\\",\\\\n  \\\\\\\"type\\\\\\\": \\\\\\\"automation\\\\\\\",\\\\n  \\\\\\\"tasks\\\\\\\": {\\\\n    \\\\\\\"workflow_start\\\\\\\": {\\\\n      \\\\\\\"name\\\\\\\": \\\\\\\"workflow_start\\\\\\\",\\\\n      \\\\\\\"groups\\\\\\\": [],\\\\n      \\\\\\\"x\\\\\\\": 0,\\\\n      \\\\\\\"y\\\\\\\": 0.5\\\\n    },\\\\n    \\\\\\\"workflow_end\\\\\\\": {\\\\n      \\\\\\\"name\\\\\\\": \\\\\\\"workflow_end\\\\\\\",\\\\n      \\\\\\\"groups\\\\\\\": [],\\\\n      \\\\\\\"x\\\\\\\": 1,\\\\n      \\\\\\\"y\\\\\\\": 0.5\\\\n    },\\\\n    \\\\\\\"5d2e\\\\\\\": {\\\\n      \\\\\\\"name\\\\\\\": \\\\\\\"newVariable\\\\\\\",\\\\n      \\\\\\\"canvasName\\\\\\\": \\\\\\\"newVariable\\\\\\\",\\\\n      \\\\\\\"summary\\\\\\\": \\\\\\\"Create a Job Variable\\\\\\\",\\\\n      \\\\\\\"description\\\\\\\": \\\\\\\"Create a new Job variable by Job ID and assign it a value.\\\\\\\",\\\\n      \\\\\\\"location\\\\\\\": \\\\\\\"Application\\\\\\\",\\\\n      \\\\\\\"locationType\\\\\\\": null,\\\\n      \\\\\\\"app\\\\\\\": \\\\\\\"WorkFlowEngine\\\\\\\",\\\\n      \\\\\\\"type\\\\\\\": \\\\\\\"operation\\\\\\\",\\\\n      \\\\\\\"displayName\\\\\\\": \\\\\\\"WorkFlowEngine\\\\\\\",\\\\n      \\\\\\\"variables\\\\\\\": {\\\\n        \\\\\\\"incoming\\\\\\\": {\\\\n          \\\\\\\"name\\\\\\\": \\\\\\\"dummy\\\\\\\",\\\\n          \\\\\\\"value\\\\\\\": true\\\\n        },\\\\n        \\\\\\\"outgoing\\\\\\\": {\\\\n          \\\\\\\"value\\\\\\\": null\\\\n        }\\\\n      },\\\\n      \\\\\\\"deprecated\\\\\\\": false,\\\\n      \\\\\\\"groups\\\\\\\": [],\\\\n      \\\\\\\"x\\\\\\\": 0.49747242647058826,\\\\n      \\\\\\\"y\\\\\\\": 0.49935483870967734\\\\n    },\\\\n    \\\\\\\"327d\\\\\\\": {\\\\n      \\\\\\\"name\\\\\\\": \\\\\\\"childJob\\\\\\\",\\\\n      \\\\\\\"canvasName\\\\\\\": \\\\\\\"childJob\\\\\\\",\\\\n      \\\\\\\"summary\\\\\\\": \\\\\\\"Run Child Job\\\\\\\",\\\\n      \\\\\\\"description\\\\\\\": \\\\\\\"Runs a child job inside a workflow.\\\\\\\",\\\\n      \\\\\\\"location\\\\\\\": \\\\\\\"Application\\\\\\\",\\\\n      \\\\\\\"locationType\\\\\\\": null,\\\\n      \\\\\\\"app\\\\\\\": \\\\\\\"WorkFlowEngine\\\\\\\",\\\\n      \\\\\\\"type\\\\\\\": \\\\\\\"operation\\\\\\\",\\\\n      \\\\\\\"displayName\\\\\\\": \\\\\\\"WorkFlowEngine\\\\\\\",\\\\n      \\\\\\\"variables\\\\\\\": {\\\\n        \\\\\\\"incoming\\\\\\\": {\\\\n          \\\\\\\"task\\\\\\\": \\\\\\\"\\\\\\\",\\\\n          \\\\\\\"workflow\\\\\\\": \\\\\\\"Test2\\\\\\\",\\\\n          \\\\\\\"variables\\\\\\\": {},\\\\n          \\\\\\\"data_array\\\\\\\": \\\\\\\"\\\\\\\",\\\\n          \\\\\\\"transformation\\\\\\\": \\\\\\\"\\\\\\\",\\\\n          \\\\\\\"loopType\\\\\\\": \\\\\\\"\\\\\\\"\\\\n        },\\\\n        \\\\\\\"outgoing\\\\\\\": {\\\\n          \\\\\\\"job_details\\\\\\\": null\\\\n        }\\\\n      },\\\\n      \\\\\\\"deprecated\\\\\\\": false,\\\\n      \\\\\\\"groups\\\\\\\": [],\\\\n      \\\\\\\"actor\\\\\\\": \\\\\\\"job\\\\\\\",\\\\n      \\\\\\\"x\\\\\\\": 0.3349019607843137,\\\\n      \\\\\\\"y\\\\\\\": 0.49032258064516127\\\\n    }\\\\n  },\\\\n  \\\\\\\"transitions\\\\\\\": {\\\\n    \\\\\\\"workflow_start\\\\\\\": {\\\\n      \\\\\\\"327d\\\\\\\": {\\\\n        \\\\\\\"type\\\\\\\": \\\\\\\"standard\\\\\\\",\\\\n        \\\\\\\"state\\\\\\\": \\\\\\\"success\\\\\\\"\\\\n      }\\\\n    },\\\\n    \\\\\\\"workflow_end\\\\\\\": {},\\\\n    \\\\\\\"5d2e\\\\\\\": {\\\\n      \\\\\\\"workflow_end\\\\\\\": {\\\\n        \\\\\\\"type\\\\\\\": \\\\\\\"standard\\\\\\\",\\\\n        \\\\\\\"state\\\\\\\": \\\\\\\"success\\\\\\\"\\\\n      }\\\\n    },\\\\n    \\\\\\\"327d\\\\\\\": {\\\\n      \\\\\\\"5d2e\\\\\\\": {\\\\n        \\\\\\\"type\\\\\\\": \\\\\\\"standard\\\\\\\",\\\\n        \\\\\\\"state\\\\\\\": \\\\\\\"success\\\\\\\"\\\\n      }\\\\n    }\\\\n  },\\\\n  \\\\\\\"font_size\\\\\\\": 12,\\\\n  \\\\\\\"last_updated\\\\\\\": \\\\\\\"2022-04-11T18:56:00.184Z\\\\\\\",\\\\n  \\\\\\\"last_updated_by\\\\\\\": {\\\\n    \\\\\\\"provenance\\\\\\\": \\\\\\\"local_aaa\\\\\\\",\\\\n    \\\\\\\"username\\\\\\\": \\\\\\\"admin@pronghorn\\\\\\\",\\\\n    \\\\\\\"firstname\\\\\\\": \\\\\\\"admin\\\\\\\",\\\\n    \\\\\\\"inactive\\\\\\\": false,\\\\n    \\\\\\\"email\\\\\\\": \\\\\\\"\\\\\\\"\\\\n  },\\\\n  \\\\\\\"lastUpdatedVersion\\\\\\\": \\\\\\\"5.40.5-2021.1.72.0\\\\\\\",\\\\n  \\\\\\\"inputSchema\\\\\\\": {\\\\n    \\\\\\\"type\\\\\\\": \\\\\\\"object\\\\\\\",\\\\n    \\\\\\\"properties\\\\\\\": {}\\\\n  },\\\\n  \\\\\\\"outputSchema\\\\\\\": {\\\\n    \\\\\\\"type\\\\\\\": \\\\\\\"object\\\\\\\",\\\\n    \\\\\\\"properties\\\\\\\": {\\\\n      \\\\\\\"_id\\\\\\\": {\\\\n        \\\\\\\"type\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"pattern\\\\\\\": \\\\\\\"^[0-9a-f]{24}$\\\\\\\"\\\\n      },\\\\n      \\\\\\\"initiator\\\\\\\": {\\\\n        \\\\\\\"type\\\\\\\": \\\\\\\"string\\\\\\\"\\\\n      },\\\\n      \\\\\\\"dummy\\\\\\\": {\\\\n        \\\\\\\"type\\\\\\\": \\\\\\\"boolean\\\\\\\"\\\\n      }\\\\n    }\\\\n  },\\\\n  \\\\\\\"created\\\\\\\": \\\\\\\"2022-04-08T16:13:39.641Z\\\\\\\",\\\\n  \\\\\\\"created_by\\\\\\\": {\\\\n    \\\\\\\"provenance\\\\\\\": \\\\\\\"local_aaa\\\\\\\",\\\\n    \\\\\\\"username\\\\\\\": \\\\\\\"admin@pronghorn\\\\\\\",\\\\n    \\\\\\\"firstname\\\\\\\": \\\\\\\"admin\\\\\\\",\\\\n    \\\\\\\"inactive\\\\\\\": false,\\\\n    \\\\\\\"email\\\\\\\": \\\\\\\"\\\\\\\"\\\\n  },\\\\n  \\\\\\\"createdVersion\\\\\\\": \\\\\\\"5.40.5-2021.1.72.0\\\\\\\",\\\\n  \\\\\\\"tags\\\\\\\": [],\\\\n  \\\\\\\"groups\\\\\\\": []\\\\n}\\\"\\n                        },\\n                        {\\n                          \\\"name\\\": \\\"Test2.json\\\",\\n                          \\\"type\\\": \\\"file\\\",\\n                          \\\"content\\\": \\\"{\\\\n  \\\\\\\"name\\\\\\\": \\\\\\\"Test2\\\\\\\",\\\\n  \\\\\\\"type\\\\\\\": \\\\\\\"automation\\\\\\\",\\\\n  \\\\\\\"tasks\\\\\\\": {\\\\n    \\\\\\\"workflow_start\\\\\\\": {\\\\n      \\\\\\\"name\\\\\\\": \\\\\\\"workflow_start\\\\\\\",\\\\n      \\\\\\\"groups\\\\\\\": [],\\\\n      \\\\\\\"x\\\\\\\": 0,\\\\n      \\\\\\\"y\\\\\\\": 0.5\\\\n    },\\\\n    \\\\\\\"workflow_end\\\\\\\": {\\\\n      \\\\\\\"name\\\\\\\": \\\\\\\"workflow_end\\\\\\\",\\\\n      \\\\\\\"groups\\\\\\\": [],\\\\n      \\\\\\\"x\\\\\\\": 1,\\\\n      \\\\\\\"y\\\\\\\": 0.5\\\\n    },\\\\n    \\\\\\\"587f\\\\\\\": {\\\\n      \\\\\\\"name\\\\\\\": \\\\\\\"newVariable\\\\\\\",\\\\n      \\\\\\\"canvasName\\\\\\\": \\\\\\\"newVariable\\\\\\\",\\\\n      \\\\\\\"summary\\\\\\\": \\\\\\\"Create a Job Variable\\\\\\\",\\\\n      \\\\\\\"description\\\\\\\": \\\\\\\"Create a new Job variable by Job ID and assign it a value.\\\\\\\",\\\\n      \\\\\\\"location\\\\\\\": \\\\\\\"Application\\\\\\\",\\\\n      \\\\\\\"locationType\\\\\\\": null,\\\\n      \\\\\\\"app\\\\\\\": \\\\\\\"WorkFlowEngine\\\\\\\",\\\\n      \\\\\\\"type\\\\\\\": \\\\\\\"operation\\\\\\\",\\\\n      \\\\\\\"displayName\\\\\\\": \\\\\\\"WorkFlowEngine\\\\\\\",\\\\n      \\\\\\\"variables\\\\\\\": {\\\\n        \\\\\\\"incoming\\\\\\\": {\\\\n          \\\\\\\"name\\\\\\\": \\\\\\\"test\\\\\\\",\\\\n          \\\\\\\"value\\\\\\\": true\\\\n        },\\\\n        \\\\\\\"outgoing\\\\\\\": {\\\\n          \\\\\\\"value\\\\\\\": null\\\\n        }\\\\n      },\\\\n      \\\\\\\"deprecated\\\\\\\": false,\\\\n      \\\\\\\"groups\\\\\\\": [],\\\\n      \\\\\\\"x\\\\\\\": 0.49747242647058826,\\\\n      \\\\\\\"y\\\\\\\": 0.49935483870967734\\\\n    }\\\\n  },\\\\n  \\\\\\\"transitions\\\\\\\": {\\\\n    \\\\\\\"workflow_start\\\\\\\": {\\\\n      \\\\\\\"587f\\\\\\\": {\\\\n        \\\\\\\"type\\\\\\\": \\\\\\\"standard\\\\\\\",\\\\n        \\\\\\\"state\\\\\\\": \\\\\\\"success\\\\\\\"\\\\n      }\\\\n    },\\\\n    \\\\\\\"workflow_end\\\\\\\": {},\\\\n    \\\\\\\"587f\\\\\\\": {\\\\n      \\\\\\\"workflow_end\\\\\\\": {\\\\n        \\\\\\\"type\\\\\\\": \\\\\\\"standard\\\\\\\",\\\\n        \\\\\\\"state\\\\\\\": \\\\\\\"success\\\\\\\"\\\\n      }\\\\n    }\\\\n  },\\\\n  \\\\\\\"font_size\\\\\\\": 12,\\\\n  \\\\\\\"last_updated\\\\\\\": \\\\\\\"2022-04-08T16:14:28.018Z\\\\\\\",\\\\n  \\\\\\\"last_updated_by\\\\\\\": {\\\\n    \\\\\\\"provenance\\\\\\\": \\\\\\\"local_aaa\\\\\\\",\\\\n    \\\\\\\"username\\\\\\\": \\\\\\\"admin@pronghorn\\\\\\\",\\\\n    \\\\\\\"firstname\\\\\\\": \\\\\\\"admin\\\\\\\",\\\\n    \\\\\\\"inactive\\\\\\\": false,\\\\n    \\\\\\\"email\\\\\\\": \\\\\\\"\\\\\\\"\\\\n  },\\\\n  \\\\\\\"lastUpdatedVersion\\\\\\\": \\\\\\\"5.40.5-2021.1.72.0\\\\\\\",\\\\n  \\\\\\\"inputSchema\\\\\\\": {\\\\n    \\\\\\\"type\\\\\\\": \\\\\\\"object\\\\\\\",\\\\n    \\\\\\\"properties\\\\\\\": {}\\\\n  },\\\\n  \\\\\\\"outputSchema\\\\\\\": {\\\\n    \\\\\\\"type\\\\\\\": \\\\\\\"object\\\\\\\",\\\\n    \\\\\\\"properties\\\\\\\": {\\\\n      \\\\\\\"_id\\\\\\\": {\\\\n        \\\\\\\"type\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"pattern\\\\\\\": \\\\\\\"^[0-9a-f]{24}$\\\\\\\"\\\\n      },\\\\n      \\\\\\\"initiator\\\\\\\": {\\\\n        \\\\\\\"type\\\\\\\": \\\\\\\"string\\\\\\\"\\\\n      },\\\\n      \\\\\\\"test\\\\\\\": {\\\\n        \\\\\\\"type\\\\\\\": \\\\\\\"boolean\\\\\\\"\\\\n      }\\\\n    }\\\\n  },\\\\n  \\\\\\\"created\\\\\\\": \\\\\\\"2022-04-08T16:14:08.678Z\\\\\\\",\\\\n  \\\\\\\"created_by\\\\\\\": {\\\\n    \\\\\\\"provenance\\\\\\\": \\\\\\\"local_aaa\\\\\\\",\\\\n    \\\\\\\"username\\\\\\\": \\\\\\\"admin@pronghorn\\\\\\\",\\\\n    \\\\\\\"firstname\\\\\\\": \\\\\\\"admin\\\\\\\",\\\\n    \\\\\\\"inactive\\\\\\\": false,\\\\n    \\\\\\\"email\\\\\\\": \\\\\\\"\\\\\\\"\\\\n  },\\\\n  \\\\\\\"createdVersion\\\\\\\": \\\\\\\"5.40.5-2021.1.72.0\\\\\\\",\\\\n  \\\\\\\"tags\\\\\\\": [],\\\\n  \\\\\\\"groups\\\\\\\": []\\\\n}\\\"\\n                        }\\n                      ]\\n                    },\\n                    {\\n                      \\\"name\\\": \\\"json_forms\\\",\\n                      \\\"type\\\": \\\"directory\\\",\\n                      \\\"content\\\": []\\n                    },\\n                    {\\n                      \\\"name\\\": \\\"forms\\\",\\n                      \\\"type\\\": \\\"directory\\\",\\n                      \\\"content\\\": []\\n                    },\\n                    {\\n                      \\\"name\\\": \\\"templates\\\",\\n                      \\\"type\\\": \\\"directory\\\",\\n                      \\\"content\\\": []\\n                    },\\n                    {\\n                      \\\"name\\\": \\\"mop_templates\\\",\\n                      \\\"type\\\": \\\"directory\\\",\\n                      \\\"content\\\": []\\n                    },\\n                    {\\n                      \\\"name\\\": \\\"mop_analytic_templates\\\",\\n                      \\\"type\\\": \\\"directory\\\",\\n                      \\\"content\\\": []\\n                    },\\n                    {\\n                      \\\"name\\\": \\\"ucm_golden_configs\\\",\\n                      \\\"type\\\": \\\"directory\\\",\\n                      \\\"content\\\": []\\n                    },\\n                    {\\n                      \\\"name\\\": \\\"transformations\\\",\\n                      \\\"type\\\": \\\"directory\\\",\\n                      \\\"content\\\": []\\n                    }\\n                  ]\\n                },\\n                {\\n                  \\\"name\\\": \\\"manifest.json\\\",\\n                  \\\"type\\\": \\\"file\\\",\\n                  \\\"content\\\": \\\"{\\\\n  \\\\\\\"bundleName\\\\\\\": \\\\\\\"@psup/testprebuilt\\\\\\\",\\\\n  \\\\\\\"version\\\\\\\": \\\\\\\"0.0.1\\\\\\\",\\\\n  \\\\\\\"fingerprint\\\\\\\": \\\\\\\"626046bc8613af0078f1011a\\\\\\\",\\\\n  \\\\\\\"createdEpoch\\\\\\\": \\\\\\\"1650476732035\\\\\\\",\\\\n  \\\\\\\"artifacts\\\\\\\": [\\\\n    {\\\\n      \\\\\\\"id\\\\\\\": \\\\\\\"Test1\\\\\\\",\\\\n      \\\\\\\"name\\\\\\\": \\\\\\\"Test1\\\\\\\",\\\\n      \\\\\\\"type\\\\\\\": \\\\\\\"workflow\\\\\\\",\\\\n      \\\\\\\"location\\\\\\\": \\\\\\\"/bundles/workflows/Test1.json\\\\\\\",\\\\n      \\\\\\\"properties\\\\\\\": {\\\\n        \\\\\\\"entryPoint\\\\\\\": false\\\\n      }\\\\n    },\\\\n    {\\\\n      \\\\\\\"id\\\\\\\": \\\\\\\"Test2\\\\\\\",\\\\n      \\\\\\\"name\\\\\\\": \\\\\\\"Test2\\\\\\\",\\\\n      \\\\\\\"type\\\\\\\": \\\\\\\"workflow\\\\\\\",\\\\n      \\\\\\\"location\\\\\\\": \\\\\\\"/bundles/workflows/Test2.json\\\\\\\",\\\\n      \\\\\\\"properties\\\\\\\": {\\\\n        \\\\\\\"entryPoint\\\\\\\": false\\\\n      }\\\\n    }\\\\n  ]\\\\n}\\\"\\n                }\\n              ]\\n            },\\n            \\\"branch\\\": \\\"master\\\",\\n            \\\"commitMessage\\\": \\\"this is a commit message\\\",\\n            \\\"scripts\\\": {\\n              \\\"status\\\": \\\"complete\\\",\\n              \\\"_id\\\": \\\"157ee33a5fbc4d9ca0b406fa\\\",\\n              \\\"initiator\\\": \\\"admin@pronghorn\\\",\\n              \\\"scriptFiles\\\": [\\n                {\\n                  \\\"name\\\": \\\"generate.js\\\",\\n                  \\\"content\\\": \\\"const path = require('path');\\\\nconst fs = require('fs');\\\\n\\\\nconst files = ['package.json', 'manifest.json', 'README.md'];\\\\nlet success = true;\\\\n\\\\nconst PID = process.argv[2];\\\\nconst bitbucketUrl = process.argv[3];\\\\nconst bitbucketBranch = process.argv[4];\\\\nif (PID === null || PID == undefined) {\\\\n  console.error('Please run this script with Bitbucket Repo UUID as an argument');\\\\n  process.exit(2);\\\\n}\\\\nconsole.log(`Generating artifact.json file w/ ${PID} as Bitbucket Repo ID`);\\\\n\\\\n/*function fileTypetoType(fileType) {\\\\n  const underscoreToDash = fileType.replace(/_/g, '-');\\\\n  if (\\\\n    fileType === 'ac_agenda_jobs' ||\\\\n    fileType === 'mop_templates' ||\\\\n    fileType === 'mop_analytic_templates' ||\\\\n    fileType === 'templates' ||\\\\n    fileType === 'workflows'\\\\n  ) {\\\\n    const singularize = underscoreToDash.substring(\\\\n      0,\\\\n      underscoreToDash.length - 1\\\\n    );\\\\n    return singularize;\\\\n  }\\\\n  if (fileType === 'catalog_store') {\\\\n    return 'service-catalog';\\\\n  }\\\\n  return underscoreToDash;\\\\n}*/\\\\nconst filePath = __dirname.replace(\\\\\\\"/scripts\\\\\\\", \\\\\\\"\\\\\\\");\\\\ntry {\\\\n  const [packageJSON, manifest, readme] = files.map(entry => {\\\\n    const result = fs.readFileSync(path.join(filePath, `./${entry}`), {\\\\n      encoding: 'utf-8'\\\\n    });\\\\n    console.log(result)\\\\n\\\\n    if (entry !== 'README.md') {\\\\n        const parsedRes = JSON.parse(result);\\\\n        if (entry === 'manifest.json' && Object.prototype.hasOwnProperty.call(parsedRes, 'version')) {\\\\n          delete parsedRes.version;\\\\n        }\\\\n      return parsedRes;\\\\n    } else {\\\\n      return result.replace(/\\\\\\\\.\\\\\\\\//gm, `${bitbucketUrl}/raw/${bitbucketBranch}/`);\\\\n    }\\\\n  });\\\\n\\\\n  // const result = fs.readdirSync(path.join(__dirname, './bundles'));\\\\n  const bundles = [];\\\\n  // result.forEach(entry => {\\\\n  //   console.log(`   ➡ generating ${entry}(s)`);\\\\n  //   const fileNames = fs.readdirSync(path.join(__dirname, `./bundles/${entry}`));\\\\n  //   fileNames.forEach(file => {\\\\n  //     const data = fs.readFileSync(\\\\n  //       path.join(__dirname, `./bundles/${entry}/${file}`),\\\\n  //       { encoding: 'utf-8' }\\\\n  //     );\\\\n  //     try {\\\\n  //       bundles.push({ type: fileTypetoType(entry), data: JSON.parse(data) });\\\\n  //       console.log(`     ⚪ ${file}   -   ✅`);\\\\n  //     } catch(err) {\\\\n  //       success = false;\\\\n  //       console.log(`     ⚪ ${file}   -   ❌  - ${err}`);\\\\n  //     }\\\\n  //   });\\\\n  // });\\\\n\\\\n  const components = manifest.artifacts;\\\\n  components.forEach(file => {\\\\n    try {\\\\n      const data = fs.readFileSync(\\\\n        path.join(filePath, `./${file.location}`),\\\\n        { encoding: 'utf-8' }\\\\n      );\\\\n      bundles.push({ type: file.type, data: JSON.parse(data) });\\\\n      console.log(`     ⚪ (${file.type})   -   ${file.location}   -   ✅`);\\\\n    } catch (err) {\\\\n      success = false;\\\\n      console.log(`     ⚪  (${file.type})   -   ${file.location}   -   ❌  - ${err}`);\\\\n    }\\\\n  });\\\\n\\\\n  const metadata = {\\\\n    name: packageJSON.name,\\\\n    version: packageJSON.version,\\\\n    description: packageJSON.description,\\\\n    license: packageJSON.license,\\\\n    repository: packageJSON.repository,\\\\n    keywords: packageJSON.keywords,\\\\n    author: packageJSON.author,\\\\n    IAPDependencies: packageJSON.IAPDependencies,\\\\n  };\\\\n\\\\n  if (success) {\\\\n    console.log(`\\\\\\\\n\\\\\\\\nFinished successfully`);\\\\n  } else {\\\\n    console.log(`\\\\\\\\n\\\\\\\\nFinished with error(s)`);\\\\n    process.exit(1);\\\\n  }\\\\n  const artifact = { metadata, manifest, bundles, readme };\\\\n  fs.writeFileSync(\\\\n    path.join(filePath, './artifact.json'),\\\\n    JSON.stringify(artifact, null, 2)\\\\n  );\\\\n} catch (err) {\\\\n  console.error(`Failed to generate artifact.json file: ${err}`);\\\\n  process.exit(1);\\\\n}\\\\n\\\"\\n                },\\n                {\\n                  \\\"name\\\": \\\"commit.sh\\\",\\n                  \\\"content\\\": \\\"if ! sh ./scripts/git_setup.sh; then\\\\n  exit 1\\\\nfi\\\\necho \\\\\\\"BITBUCKET PROJECT ID IS - $BITBUCKET_REPO_UUID\\\\\\\"\\\\ncd scripts\\\\nGENERATE=`node generate $BITBUCKET_REPO_UUID $BITBUCKET_GIT_HTTP_ORIGIN ${BITBUCKET_BRANCH}`\\\\nif [ $? -ne 0 ]\\\\nthen \\\\n  echo $GENERATE\\\\n  exit 1\\\\nfi\\\\ncd ..\\\\ngit add artifact.json\\\\ngit diff --cached --name-only | if grep artifact.json\\\\nthen\\\\n    git commit -m \\\\\\\"AUTO-GENERATED FILE [skip ci]\\\\\\\"\\\\n    if ! git push origin \\\\\\\"${BITBUCKET_BRANCH}\\\\\\\"; then\\\\n      echo -e \\\\\\\"\\\\\\\\033[0;31mERROR: ***********************************************************************************\\\\\\\"\\\\n      echo \\\\\\\"ERROR: There was an issue pushing artifact.json.\\\\\\\"\\\\n      echo -e \\\\\\\"ERROR: ***********************************************************************************\\\\\\\\033[0m\\\\\\\"\\\\n      exit 1\\\\n    else\\\\n      echo \\\\\\\"A new generated artifact.json file has been checked in to current branch\\\\\\\"\\\\n    fi   \\\\nelse\\\\n    echo \\\\\\\"artifact.json file hasn't changed\\\\\\\"\\\\nfi\\\\n\\\"\\n                },\\n                {\\n                  \\\"name\\\": \\\"create_release_script.sh\\\",\\n                  \\\"content\\\": \\\"#!/bin/bash\\\\n#---------------------#\\\\n# Create release note #\\\\n#---------------------#\\\\n\\\\nNEW_VERSION=$1\\\\n\\\\ncreate_release_note() {\\\\n    # Create a changelog file if there isn't one\\\\n    if [ ! -e CHANGELOG.md ]; then\\\\n        touch CHANGELOG.md\\\\n    fi\\\\n    echo \\\\\\\"Creating release note...\\\\\\\"\\\\n\\\\n    #----------------#\\\\n    # Changelog Body #\\\\n    #----------------#\\\\n    # Get the merge request info\\\\n    CHANGELOG_BODY=\\\\\\\"$(git log --merges -1 --format=%b)\\\\\\\"\\\\n    if [ -z \\\\\\\"$CHANGELOG_BODY\\\\\\\" ]; then\\\\n        CHANGELOG_BODY=\\\\\\\"$(git log -1 --format='Bug fixes and performance improvements'%n%n'See commit '%h)\\\\\\\"\\\\n    fi\\\\n    #--------------------#\\\\n    # Write Release Note #\\\\n    #--------------------#\\\\n\\\\n    # get the current date\\\\n    DATE=$(date +%m-%d-%Y)\\\\n    # create the release note\\\\n    RELEASE_NOTE=\\\\\\\"\\\\\\\\\\\\\\\\n## $NEW_VERSION [$DATE]\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n* $CHANGELOG_BODY\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n---\\\\\\\\\\\\\\\\n\\\\\\\"\\\\n    # append Release Note to Top of CHANGELOG\\\\n    if ! echo -e \\\\\\\"$RELEASE_NOTE$(cat CHANGELOG.md)\\\\\\\" > CHANGELOG.md; then\\\\n        echo -e \\\\\\\"\\\\\\\\033[0;31mERROR: ***********************************************************************************\\\\\\\"\\\\n        echo \\\\\\\"ERROR: Unable to append release note information to changelog.\\\\\\\"\\\\n        echo -e \\\\\\\"ERROR: ***********************************************************************************\\\\\\\\033[0m\\\\\\\"\\\\n    else\\\\n        echo \\\\\\\"Created release note:\\\\\\\"\\\\n        echo \\\\\\\"$RELEASE_NOTE\\\\\\\"\\\\n    fi\\\\n}\\\\n\\\\ncreate_release_note \\\\\\\"$NEW_VERSION\\\\\\\"\\\"\\n                },\\n                {\\n                  \\\"name\\\": \\\"deploy_artifact.sh\\\",\\n                  \\\"content\\\": \\\"#!/bin/bash\\\\n\\\\n# import the artifact\\\\nARTIFACT=$(cat artifact.json)\\\\n# echo $ARTIFACT\\\\n\\\\n# generate IAP token\\\\nTOKEN=$(curl --silent --location --request POST 'http://localhost:3000/login' \\\\\\\\\\\\n--header 'Content-Type: application/json' \\\\\\\\\\\\n--data-raw '{\\\\n    \\\\\\\"user\\\\\\\":{\\\\n        \\\\\\\"username\\\\\\\" : \\\\\\\"admin@pronghorn\\\\\\\",\\\\n        \\\\\\\"password\\\\\\\" : \\\\\\\"admin\\\\\\\"\\\\n    }\\\\n}')\\\\n\\\\nnode createPayload\\\\n\\\\nCREATE_RESP=$(curl --silent --location --request POST 'http://localhost:3000/prebuilts/import' \\\\\\\\\\\\n--header 'Content-Type: application/json' \\\\\\\\\\\\n--header \\\\\\\"Cookie: token=${TOKEN}\\\\\\\" \\\\\\\\\\\\n--data-binary \\\\\\\"@payload.json\\\\\\\")\\\\necho $CREATE_RESP\\\\n\\\\n# if prebuild already exists, update existing\\\\nif [[ $CREATE_RESP == *\\\\\\\"already exists\\\\\\\"* ]]; then\\\\n  PREBUILT=$(curl --silent --location --request GET 'http://localhost:3000/prebuilts?equals=@dsup/jennprebuilt&equalsField=name' \\\\\\\\\\\\n  --header \\\\\\\"Cookie: token=${TOKEN}\\\\\\\" \\\\\\\\\\\\n  --data-raw '')\\\\n  # echo $PREBUILT\\\\n  echo $(grep '(?<=\\\\\\\"name\\\\\\\": \\\\\\\")(.+)(?=\\\\\\\",)' artifact.json)\\\\n  echo $(grep '/(\\\\\\\"name\\\\\\\": \\\\\\\".+\\\\\\\"){1}/' artifact.json)\\\\n  # node extractName $PREBUILT\\\\nfi\\\\nrm payload.json\\\\n# # # get prebuilts\\\\n# # PREBUILTS=$(curl --silent --location --request GET 'http://localhost:3000/prebuilts?&equals=@dsup/jennprebuilt&equalsField=name' \\\\\\\\\\\\n# # --header \\\\\\\"Cookie: token=${TOKEN}\\\\\\\")\\\\n# # # echo $PREBUILTS\\\\n\\\"\\n                },\\n                {\\n                  \\\"name\\\": \\\"git_setup.sh\\\",\\n                  \\\"content\\\": \\\"#!/bin/bash\\\\n\\\\n#-----------#\\\\n# Git Setup #\\\\n#-----------#\\\\necho \\\\\\\"Setting up git credentials\\\\\\\"\\\\nmkdir -p ~/.ssh\\\\n\\\\ngit config --global user.email \\\\\\\"$CI_GIT_EMAIL\\\\\\\"\\\\ngit config --global user.name \\\\\\\"$CI_GIT_USERNAME\\\\\\\"\\\\necho -e $ID_RSA > ~/.ssh/id_rsa\\\\nchmod 0400 ~/.ssh/id_rsa\\\\n\\\\necho git config --list --show-origin\\\\necho cat ~/.ssh/id_rsa\\\\n\\\\necho -e \\\\\\\"Host bitbucket.com\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\tStrictHostKeyChecking no\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\tLogLevel ERROR\\\\\\\\\\\\\\\\n\\\\\\\" >> ~/.ssh/config\\\\ngit remote set-url origin http://bitbucket.org/$BITBUCKET_REPO_FULL_NAME\\\\ngit remote -v\\\\necho \\\\\\\"Git credentials configured.\\\\\\\"\\\\ngit stash\\\\ngit checkout ${BITBUCKET_BRANCH}\\\\nif ! git pull --rebase --tags; then \\\\n    echo -e \\\\\\\"\\\\\\\\033[0;31mERROR: ***********************************************************************************\\\\\\\"\\\\n    echo \\\\\\\"ERROR: There was an issue connecting to remote. Check your credentials.\\\\\\\"\\\\n    echo -e \\\\\\\"ERROR: ***********************************************************************************\\\\\\\\033[0m\\\\\\\"\\\\n    exit 1\\\\nfi \\\\ngit reset --hard origin/${BITBUCKET_BRANCH}\\\\n\\\\necho \\\\\\\"${BITBUCKET_BRANCH} checked out.\\\\\\\"\\\\n\\\"\\n                },\\n                {\\n                  \\\"name\\\": \\\"node_setup.sh\\\",\\n                  \\\"content\\\": \\\"#!/bin/bash\\\\n\\\\n# check node version:\\\\necho \\\\\\\"node version: $(node --version)\\\\\\\"\\\\necho \\\\\\\"npm version: $(npm --version)\\\\\\\"\\\\n\\\\necho \\\\\\\"Installing dependencies...\\\\\\\"\\\\nif [ ! -f package-lock.json ]; then\\\\n    PRESENT='false'\\\\n    echo 'package-lock does not exist - generating one now.'\\\\n    npm i --package-lock-only\\\\nelse \\\\n    if ! npm ci -q --unsafe-perm; then\\\\n        exit 1\\\\n    fi\\\\nfi\\\\n\\\\nif [ -n \\\\\\\"$PRESENT\\\\\\\" ]; then\\\\n    git add package-lock.json\\\\n    git commit -m 'initialized package-lock.json [ci skip]'\\\\nfi\\\\n\\\\necho \\\\\\\"Dependencies installed.\\\\\\\"\\\\n\\\"\\n                },\\n                {\\n                  \\\"name\\\": \\\"promote.py\\\",\\n                  \\\"content\\\": \\\"import requests\\\\nimport json\\\\nimport sys\\\\nimport os\\\\n\\\\n\\\\nhostname = os.environ.get(\\\\\\\"IAP_HOSTNAME\\\\\\\")\\\\nartifact_path = sys.argv[1]\\\\n\\\\n# checking if IAP_PUSH_TO_LOCAL env var is set -> if not, default to True\\\\nif not (os.environ.get(\\\\\\\"IAP_PUSH_TO_LOCAL\\\\\\\")):\\\\n  push_to_local = True\\\\nelse:\\\\n  push_to_local = True if os.environ.get(\\\\\\\"IAP_PUSH_TO_LOCAL\\\\\\\").lower() == \\\\\\\"true\\\\\\\" else False\\\\n\\\\n# checking if IAP_TOKEN is set -> if not, use basic auth login\\\\ntoken = os.environ.get(\\\\\\\"IAP_TOKEN\\\\\\\")\\\\nbasic_auth = False\\\\nif not token:\\\\n  basic_auth = True\\\\n  username = os.environ.get(\\\\\\\"IAP_USERNAME\\\\\\\")\\\\n  pw = os.environ.get(\\\\\\\"IAP_PW\\\\\\\")\\\\n\\\\nif not (artifact_path and hostname and (token or (username and pw))):\\\\n  print(\\\\\\\"Missing environmental variables.\\\\\\\\nMake sure your environmental variables are set properly.\\\\\\\\nExiting...\\\\\\\")\\\\n  sys.exit(1)\\\\n\\\\nartifact = json.load(open(f\\\\\\\"{artifact_path}\\\\\\\"))\\\\n# Function Definitions\\\\n# Handles getting token to authenticate into IAP\\\\ndef get_token():\\\\n  print(\\\\\\\"Getting auth token\\\\\\\")\\\\n  url = f\\\\\\\"{hostname}/login\\\\\\\"\\\\n  payload = json.dumps({\\\\n    \\\\\\\"user\\\\\\\": {\\\\n      \\\\\\\"username\\\\\\\": username,\\\\n      \\\\\\\"password\\\\\\\": pw\\\\n    }\\\\n  })\\\\n\\\\n  response = requests.request(\\\\n    \\\\\\\"POST\\\\\\\", \\\\n    url, \\\\n    headers={'Content-Type': 'application/json'},\\\\n    data=payload)\\\\n  if not response.status_code // 100 == 2:\\\\n    raise Exception(\\\\\\\"Error: Unexpected response {}: Failed to get auth token\\\\\\\".format(response.text))\\\\n  else: \\\\n    return response.text\\\\n\\\\n# Checks if prebuilt already exists\\\\ndef get_prebuilt(name):\\\\n  print(f\\\\\\\"Retrieving prebuilt: {name}\\\\\\\")\\\\n  url = f\\\\\\\"{hostname}/prebuilts?equals={name}&equalsField=name\\\\\\\"\\\\n  response = requests.request(\\\\n    \\\\\\\"GET\\\\\\\", \\\\n    url,\\\\n    headers={'Cookie': f'token={token}'})\\\\n  if not response.status_code // 100 == 2:\\\\n    raise Exception(\\\\\\\"Error: Unexpected response {}: Failed to get prebuilt\\\\\\\".format(response.text))\\\\n  else: \\\\n    return response.text\\\\n\\\\ndef add_prebuilt(payload): \\\\n  print(\\\\\\\"Prebuilt does not exist yet - adding to IAP\\\\\\\")\\\\n  url = f\\\\\\\"{hostname}/prebuilts/import\\\\\\\"\\\\n  headers = {\\\\n    'Content-Type': 'application/json',\\\\n    'Cookie': f'token={token}'\\\\n  }\\\\n  response = requests.request(\\\\n    \\\\\\\"POST\\\\\\\",\\\\n    url,\\\\n    headers=headers,\\\\n    data=payload)\\\\n  if \\\\\\\"Invalid repository configuration\\\\\\\" in response.text:\\\\n    print(\\\\\\\"Failed to promote to original repository, pushing to local scope.\\\\\\\")\\\\n    updated_payload = json.loads(payload)\\\\n    updated_payload[\\\\\\\"prebuilt\\\\\\\"][\\\\\\\"metadata\\\\\\\"][\\\\\\\"repository\\\\\\\"] = {\\\\n      \\\\\\\"type\\\\\\\": \\\\\\\"local\\\\\\\",\\\\n      \\\\\\\"hostname\\\\\\\": \\\\\\\"localhost\\\\\\\",\\\\n      \\\\\\\"path\\\\\\\": \\\\\\\"/\\\\\\\"\\\\n    }\\\\n    response = requests.request(\\\\n      \\\\\\\"POST\\\\\\\",\\\\n      url,\\\\n      headers=headers,\\\\n      data=json.dumps(updated_payload))\\\\n  if not response.status_code // 100 == 2:\\\\n    raise Exception(\\\\\\\"Error: Unexpected response {}: Failed to add prebuilt\\\\\\\".format(response.text))\\\\n  else: \\\\n    print(\\\\\\\"Successfully added prebuilt\\\\\\\")\\\\n    return response.text\\\\n\\\\ndef update_prebuilt(id, payload):\\\\n  print(\\\\\\\"Updating existing prebuilt\\\\\\\")\\\\n  url = f\\\\\\\"{hostname}/prebuilts/{id}\\\\\\\"\\\\n  headers = {\\\\n    'Content-Type': 'application/json',\\\\n    'Cookie': f'token={token}'\\\\n  }\\\\n  response = requests.request(\\\\n    \\\\\\\"PUT\\\\\\\",\\\\n    url,\\\\n    headers=headers,\\\\n    data=payload)\\\\n  if \\\\\\\"Invalid repository configuration\\\\\\\" in response.text:\\\\n    print(\\\\\\\"Failed to promote to original repository, pushing to local scope.\\\\\\\")\\\\n    updated_payload = json.loads(payload)\\\\n    updated_payload[\\\\\\\"prebuilt\\\\\\\"][\\\\\\\"metadata\\\\\\\"][\\\\\\\"repository\\\\\\\"] = {\\\\n      \\\\\\\"type\\\\\\\": \\\\\\\"local\\\\\\\",\\\\n      \\\\\\\"hostname\\\\\\\": \\\\\\\"localhost\\\\\\\",\\\\n      \\\\\\\"path\\\\\\\": \\\\\\\"/\\\\\\\"\\\\n    }\\\\n    response = requests.request(\\\\n      \\\\\\\"PUT\\\\\\\",\\\\n      url,\\\\n      headers=headers,\\\\n      data=json.dumps(updated_payload))\\\\n  if not response.status_code // 100 == 2:\\\\n      raise Exception(\\\\\\\"Error: Unexpected response {}: Failed to update prebuilt\\\\\\\".format(response.text))\\\\n  else: \\\\n    print(\\\\\\\"Successfully updated prebuilt\\\\\\\")\\\\n    return response.text\\\\n\\\\ndef logout():\\\\n  print(\\\\\\\"Logging out of IAP\\\\\\\")\\\\n  url = f\\\\\\\"{hostname}/login?logout=true\\\\\\\"\\\\n  headers = {\\\\n    'Content-Type': 'application/json',\\\\n    'Cookie': f'token={token}'\\\\n  }\\\\n  response = requests.request(\\\\n    \\\\\\\"GET\\\\\\\",\\\\n    url,\\\\n    headers=headers)\\\\n  response = requests.request(\\\\\\\"GET\\\\\\\", url, headers=headers)\\\\n\\\\n# Script starts here\\\\ntry: \\\\n  if (basic_auth):\\\\n    token = get_token()\\\\n\\\\n  # Set name of prebuilt\\\\n  name = artifact[\\\\\\\"metadata\\\\\\\"][\\\\\\\"name\\\\\\\"]\\\\n\\\\n  results = get_prebuilt(name)\\\\n  if push_to_local:\\\\n    print(\\\\\\\"Setting artifact.json repository configuration to local\\\\\\\")\\\\n    artifact[\\\\\\\"metadata\\\\\\\"][\\\\\\\"repository\\\\\\\"] = {\\\\n      \\\\\\\"type\\\\\\\": \\\\\\\"local\\\\\\\",\\\\n      \\\\\\\"hostname\\\\\\\": \\\\\\\"localhost\\\\\\\",\\\\n      \\\\\\\"path\\\\\\\": \\\\\\\"/\\\\\\\"\\\\n    }\\\\n    print('Promoting to local scope in IAP')\\\\n  payload = json.dumps({\\\\n    \\\\\\\"prebuilt\\\\\\\": artifact,\\\\n    \\\\\\\"options\\\\\\\": {\\\\n      \\\\\\\"overwrite\\\\\\\": True \\\\n    }\\\\n  })\\\\n  # if prebuilt doesn't exist, add it\\\\n  if json.loads(results)[\\\\\\\"total\\\\\\\"] == 0:\\\\n    response = add_prebuilt(payload)\\\\n  else: # if prebuilt exists, update it\\\\n      id = json.loads(results)[\\\\\\\"results\\\\\\\"][0][\\\\\\\"_id\\\\\\\"]\\\\n      update_prebuilt(id, payload)\\\\n\\\\n  # logging out\\\\n  logout()\\\\nexcept requests.exceptions.RequestException as e: \\\\n  # A serious problem happened, like an SSLError or InvalidURL\\\\n  print(\\\\\\\"Error: {}\\\\\\\".format(e))\\\\n  sys.exit(1)  \\\\nexcept: # error handling to catch any errors that throw a non 200 code\\\\n  e = sys.exc_info()[1]    \\\\n  print(e)\\\\n  sys.exit(1)\\\\n\\\"\\n                },\\n                {\\n                  \\\"name\\\": \\\"ver_bump.sh\\\",\\n                  \\\"content\\\": \\\"#!/bin/bash\\\\n\\\\n#-------------------#\\\\n# Get Semver Prefix #\\\\n#-------------------#\\\\nVERSION=\\\\\\\"$(git log --format=%s --merges -1|awk -F\\\\\\\"'\\\\\\\" '{print $2}'|awk -F \\\\\\\"/\\\\\\\" '{print $1}')\\\\\\\"\\\\ncase \\\\\\\"$VERSION\\\\\\\" in\\\\n    # if PATCH transform to patch\\\\n    patch|minor|major) SEMVER=\\\\\\\"$(echo \\\\\\\"$VERSION\\\\\\\" | awk '{print tolower($0)}')\\\\\\\";;\\\\n    *) SEMVER=\\\\\\\"patch\\\\\\\";;\\\\nesac\\\\nif [ -z \\\\\\\"$VERSION\\\\\\\" ]; then\\\\n    echo \\\\\\\"No branch prefix detected. Defaulting to patch.\\\\\\\"\\\\nfi\\\\n\\\\necho \\\\\\\"Semver bump: $SEMVER\\\\\\\"\\\\n\\\\n#---------------------#\\\\n# Get Current Version #\\\\n#---------------------#\\\\nCURRENT_VERSION=$(node -p \\\\\\\"require('./package.json').version\\\\\\\")\\\\necho \\\\\\\"Last version: $CURRENT_VERSION\\\\\\\"\\\\nCURRENT_MAJOR=$(echo \\\\\\\"$CURRENT_VERSION\\\\\\\"|awk -F'.' '{print $1}')\\\\nCURRENT_MINOR=$(echo \\\\\\\"$CURRENT_VERSION\\\\\\\"|awk -F'.' '{print $2}')\\\\nCURRENT_PATCH=$(echo \\\\\\\"$CURRENT_VERSION\\\\\\\"|awk -F'.' '{print $3}'|awk -F'-' '{print $1}')\\\\nCURRENT_PRERELEASE=$(echo \\\\\\\"$CURRENT_VERSION\\\\\\\"|awk -F'-' '{print $2}')\\\\n\\\\n# if [[ $CURRENT_VERSION != *\\\\\\\"+\\\\\\\"* ]]; then\\\\n#     CURRENT_PATCH=$(echo \\\\\\\"$CURRENT_VERSION\\\\\\\"|awk -F'.' '{print $3}'|awk -F'-' '{print $1}')\\\\n#     CURRENT_PRERELEASE=$(echo \\\\\\\"$CURRENT_VERSION\\\\\\\"|awk -F'-' '{print $2}')\\\\n# else\\\\n#     CURRENT_PATCH=$(echo \\\\\\\"$CURRENT_VERSION\\\\\\\"|awk -F'.' '{print $3}'|awk -F'+' '{print $1}')\\\\n#     CURRENT_PRERELEASE=$(echo \\\\\\\"$CURRENT_VERSION\\\\\\\"|awk -F'+' '{print $2}')\\\\n# fi \\\\n\\\\n\\\\n#---------------------------#\\\\n# Version & Release Package #\\\\n#---------------------------#\\\\n\\\\n# create release note before versioning the project\\\\nsh ./scripts/create_release_script.sh \\\\\\\"$NEW_VERSION\\\\\\\"\\\\n\\\\n# explicitly add the change log to the version bump commit\\\\ngit add CHANGELOG.md\\\\necho \\\\\\\"Bumping version...\\\\\\\"\\\\n\\\\n# bump version, git tag, commit & then push changes\\\\n# using -f to ignore the added release note\\\\nnpm version -f \\\\\\\"$SEMVER\\\\\\\" -m \\\\\\\"Updating $SEMVER version to %s. [skip ci]\\\\\\\" --loglevel=error\\\\necho \\\\\\\"Version bump successful\\\\\\\"\\\\n\\\\n# push to gitlab\\\\n# no-verify is used to ignore any pre-push commits that may be used by the project\\\\nif git push -f --tags origin ${BITBUCKET_BRANCH} --follow-tags --no-verify; then\\\\n    echo \\\\\\\"Version bump pushed successfully.\\\\\\\"\\\\nelse\\\\n    echo -e \\\\\\\"\\\\\\\\033[0;31mERROR: ***********************************************************************************\\\\\\\"\\\\n    echo \\\\\\\"ERROR: Failed to push.\\\\\\\"\\\\n    echo -e \\\\\\\"ERROR: ***********************************************************************************\\\\\\\\033[0m\\\\\\\"\\\\n    exit 1\\\\nfi\\\\n\\\"\\n                }\\n              ],\\n              \\\"testFiles\\\": [\\n                {\\n                  \\\"name\\\": \\\"manifest-schema.json\\\",\\n                  \\\"content\\\": \\\"{\\\\n  \\\\\\\"$schema\\\\\\\": \\\\\\\"http://json-schema.org/draft-07/schema#\\\\\\\",\\\\n  \\\\\\\"$id\\\\\\\": \\\\\\\"iap-artifact-bundle\\\\\\\",\\\\n  \\\\\\\"type\\\\\\\": \\\\\\\"object\\\\\\\",\\\\n  \\\\\\\"title\\\\\\\": \\\\\\\"Artifact Bundle Schema\\\\\\\",\\\\n  \\\\\\\"default\\\\\\\": null,\\\\n  \\\\\\\"additionalProperties\\\\\\\": false,\\\\n  \\\\\\\"definitions\\\\\\\": {\\\\n    \\\\\\\"tagged\\\\\\\": {\\\\n      \\\\\\\"$id\\\\\\\": \\\\\\\"#/properties/properties/properties/tagged\\\\\\\",\\\\n      \\\\\\\"type\\\\\\\": \\\\\\\"array\\\\\\\",\\\\n      \\\\\\\"title\\\\\\\": \\\\\\\"The Tagged Item\\\\\\\",\\\\n      \\\\\\\"description\\\\\\\": \\\\\\\"These are the items that need to be tagged\\\\\\\",\\\\n      \\\\\\\"uniqueItems\\\\\\\": true,\\\\n      \\\\\\\"items\\\\\\\": {\\\\n        \\\\\\\"$id\\\\\\\": \\\\\\\"#/properties/properties/properties/tagged/items\\\\\\\",\\\\n        \\\\\\\"type\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"title\\\\\\\": \\\\\\\"The Tagged Items\\\\\\\",\\\\n        \\\\\\\"default\\\\\\\": \\\\\\\"\\\\\\\",\\\\n        \\\\\\\"examples\\\\\\\": [\\\\n          \\\\\\\"mop-example-1\\\\\\\",\\\\n          \\\\\\\"mop-analytic-example-1\\\\\\\",\\\\n          \\\\\\\"workflow-example-1\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"pattern\\\\\\\": \\\\\\\"^(.*)$\\\\\\\"\\\\n      }\\\\n    }\\\\n  },\\\\n  \\\\\\\"required\\\\\\\": [\\\\n    \\\\\\\"bundleName\\\\\\\",\\\\n    \\\\\\\"version\\\\\\\",\\\\n    \\\\\\\"createdEpoch\\\\\\\",\\\\n    \\\\\\\"artifacts\\\\\\\"\\\\n  ],\\\\n  \\\\\\\"properties\\\\\\\": {\\\\n    \\\\\\\"bundleName\\\\\\\": {\\\\n      \\\\\\\"$id\\\\\\\": \\\\\\\"#/properties/bundleName\\\\\\\",\\\\n      \\\\\\\"type\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n      \\\\\\\"title\\\\\\\": \\\\\\\"The Bundle Name\\\\\\\",\\\\n      \\\\\\\"description\\\\\\\": \\\\\\\"Unique identifier for this bundle of artifacts.\\\\\\\",\\\\n      \\\\\\\"default\\\\\\\": \\\\\\\"\\\\\\\",\\\\n      \\\\\\\"examples\\\\\\\": [\\\\n        \\\\\\\"ExampleBundle\\\\\\\"\\\\n      ],\\\\n      \\\\\\\"pattern\\\\\\\": \\\\\\\"^(.*)$\\\\\\\"\\\\n    },\\\\n    \\\\\\\"version\\\\\\\": {\\\\n      \\\\\\\"$id\\\\\\\": \\\\\\\"#/properties/version\\\\\\\",\\\\n      \\\\\\\"type\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n      \\\\\\\"title\\\\\\\": \\\\\\\"The Version\\\\\\\",\\\\n      \\\\\\\"description\\\\\\\": \\\\\\\"The version of this bundle\\\\\\\",\\\\n      \\\\\\\"default\\\\\\\": \\\\\\\"\\\\\\\",\\\\n      \\\\\\\"examples\\\\\\\": [\\\\n        \\\\\\\"1.2.3\\\\\\\"\\\\n      ],\\\\n      \\\\\\\"pattern\\\\\\\": \\\\\\\"^(.*)$\\\\\\\"\\\\n    },\\\\n    \\\\\\\"fingerprint\\\\\\\": {\\\\n      \\\\\\\"$id\\\\\\\": \\\\\\\"#/properties/fingerprint\\\\\\\",\\\\n      \\\\\\\"type\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n      \\\\\\\"title\\\\\\\": \\\\\\\"The Fingerprint\\\\\\\",\\\\n      \\\\\\\"description\\\\\\\": \\\\\\\"For use in future implementations of  installable modules where additional security measures need to be implemented. \\\\\\\",\\\\n      \\\\\\\"default\\\\\\\": \\\\\\\"\\\\\\\",\\\\n      \\\\\\\"examples\\\\\\\": [\\\\n        \\\\\\\"Some verifiable token\\\\\\\"\\\\n      ],\\\\n      \\\\\\\"pattern\\\\\\\": \\\\\\\"^(.*)$\\\\\\\"\\\\n    },\\\\n    \\\\\\\"createdEpoch\\\\\\\": {\\\\n      \\\\\\\"$id\\\\\\\": \\\\\\\"#/properties/createdEpoch\\\\\\\",\\\\n      \\\\\\\"type\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n      \\\\\\\"title\\\\\\\": \\\\\\\"The Created Time\\\\\\\",\\\\n      \\\\\\\"description\\\\\\\": \\\\\\\"The date, in milliseconds since the unix epoch, for when this bundle was created/updated. Usually this is value of Date.now() or calling getTime() on a js Date object\\\\\\\",\\\\n      \\\\\\\"default\\\\\\\": \\\\\\\"\\\\\\\",\\\\n      \\\\\\\"examples\\\\\\\": [\\\\n        \\\\\\\"1554836984020\\\\\\\",\\\\n        \\\\\\\"result from Date.now()\\\\\\\"\\\\n      ],\\\\n      \\\\\\\"pattern\\\\\\\": \\\\\\\"^(.*)$\\\\\\\"\\\\n    },\\\\n    \\\\\\\"artifacts\\\\\\\": {\\\\n      \\\\\\\"$id\\\\\\\": \\\\\\\"#/properties/artifacts\\\\\\\",\\\\n      \\\\\\\"type\\\\\\\": \\\\\\\"array\\\\\\\",\\\\n      \\\\\\\"title\\\\\\\": \\\\\\\"The Artifacts \\\\\\\",\\\\n      \\\\\\\"description\\\\\\\": \\\\\\\"List of artifacts in this bundle. Note that each item must be unique and duplicates will fail validation\\\\\\\",\\\\n      \\\\\\\"default\\\\\\\": null,\\\\n      \\\\\\\"uniqueItems\\\\\\\": true,\\\\n      \\\\\\\"items\\\\\\\": {\\\\n        \\\\\\\"$id\\\\\\\": \\\\\\\"#/properties/artifacts/items\\\\\\\",\\\\n        \\\\\\\"type\\\\\\\": \\\\\\\"object\\\\\\\",\\\\n        \\\\\\\"title\\\\\\\": \\\\\\\"Artifact items\\\\\\\",\\\\n        \\\\\\\"default\\\\\\\": null,\\\\n        \\\\\\\"additionalProperties\\\\\\\": false,\\\\n        \\\\\\\"properties\\\\\\\": {\\\\n          \\\\\\\"id\\\\\\\": {\\\\n            \\\\\\\"$id\\\\\\\": \\\\\\\"#/properties/artifacts/items/properties/id\\\\\\\",\\\\n            \\\\\\\"type\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n            \\\\\\\"title\\\\\\\": \\\\\\\"The Artifact Id\\\\\\\",\\\\n            \\\\\\\"description\\\\\\\": \\\\\\\"Unique Id identifying this artifact. \\\\\\\",\\\\n            \\\\\\\"default\\\\\\\": \\\\\\\"\\\\\\\",\\\\n            \\\\\\\"examples\\\\\\\": [\\\\n              \\\\\\\"workflow-example-1\\\\\\\",\\\\n              \\\\\\\"mop-template-1\\\\\\\"\\\\n            ],\\\\n            \\\\\\\"pattern\\\\\\\": \\\\\\\"^(.*)$\\\\\\\"\\\\n          },\\\\n          \\\\\\\"name\\\\\\\": {\\\\n            \\\\\\\"$id\\\\\\\": \\\\\\\"#/properties/artifacts/items/properties/name\\\\\\\",\\\\n            \\\\\\\"type\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n            \\\\\\\"title\\\\\\\": \\\\\\\"The Artifact Name\\\\\\\",\\\\n            \\\\\\\"description\\\\\\\": \\\\\\\"The Name identifying this artifact\\\\\\\",\\\\n            \\\\\\\"default\\\\\\\": \\\\\\\"\\\\\\\",\\\\n            \\\\\\\"examples\\\\\\\": [\\\\n              \\\\\\\"My Worflow1\\\\\\\"\\\\n            ],\\\\n            \\\\\\\"pattern\\\\\\\": \\\\\\\"^(.*)$\\\\\\\"\\\\n          },\\\\n          \\\\\\\"type\\\\\\\": {\\\\n            \\\\\\\"$id\\\\\\\": \\\\\\\"#/properties/artifacts/items/properties/type\\\\\\\",\\\\n            \\\\\\\"type\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n            \\\\\\\"enum\\\\\\\": [\\\\n              \\\\\\\"mop-analytic-template\\\\\\\",\\\\n              \\\\\\\"mop-template\\\\\\\",\\\\n              \\\\\\\"workflow\\\\\\\",\\\\n              \\\\\\\"json-forms\\\\\\\",\\\\n              \\\\\\\"tag\\\\\\\",\\\\n              \\\\\\\"template\\\\\\\",\\\\n              \\\\\\\"forms\\\\\\\",\\\\n              \\\\\\\"golden-config\\\\\\\",\\\\n              \\\\\\\"service-catalog\\\\\\\",\\\\n              \\\\\\\"ac-agenda-job\\\\\\\",\\\\n              \\\\\\\"adapter\\\\\\\",\\\\n              \\\\\\\"app\\\\\\\",\\\\n              \\\\\\\"transformation\\\\\\\"\\\\n            ],\\\\n            \\\\\\\"title\\\\\\\": \\\\\\\"The Artifact Type \\\\\\\",\\\\n            \\\\\\\"description\\\\\\\": \\\\\\\"The type of artifact(s) this entry encompasses. Must be one of the supported types listed in the enum\\\\\\\",\\\\n            \\\\\\\"default\\\\\\\": \\\\\\\"\\\\\\\",\\\\n            \\\\\\\"examples\\\\\\\": [\\\\n              \\\\\\\"mop-analytic-template\\\\\\\",\\\\n              \\\\\\\"mop-template\\\\\\\",\\\\n              \\\\\\\"workflow\\\\\\\",\\\\n              \\\\\\\"tag\\\\\\\",\\\\n              \\\\\\\"forms\\\\\\\",\\\\n              \\\\\\\"golden-config\\\\\\\"\\\\n            ],\\\\n            \\\\\\\"pattern\\\\\\\": \\\\\\\"^(.*)$\\\\\\\"\\\\n          },\\\\n          \\\\\\\"location\\\\\\\": {\\\\n            \\\\\\\"$id\\\\\\\": \\\\\\\"#/properties/artifacts/items/properties/location\\\\\\\",\\\\n            \\\\\\\"type\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n            \\\\\\\"title\\\\\\\": \\\\\\\"The Artifact Location\\\\\\\",\\\\n            \\\\\\\"description\\\\\\\": \\\\\\\"Path, relative to the root of this bundle, to either a specific artifact file or a directory of artifacts of a specific type. Future implementations may allow for URLs to external assets\\\\\\\",\\\\n            \\\\\\\"default\\\\\\\": \\\\\\\"\\\\\\\",\\\\n            \\\\\\\"examples\\\\\\\": [\\\\n              \\\\\\\"/bundles/ExampleBundle/workflow/myWorkflow1.json\\\\\\\",\\\\n              \\\\\\\"/bundles/workflows/\\\\\\\"\\\\n            ],\\\\n            \\\\\\\"pattern\\\\\\\": \\\\\\\"^(.*)$\\\\\\\"\\\\n          },\\\\n          \\\\\\\"description\\\\\\\": {\\\\n            \\\\\\\"$id\\\\\\\": \\\\\\\"#/properties/artifacts/items/properties/description\\\\\\\",\\\\n            \\\\\\\"type\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n            \\\\\\\"title\\\\\\\": \\\\\\\"The Description \\\\\\\",\\\\n            \\\\\\\"description\\\\\\\": \\\\\\\"The description of what this artifact is \\\\\\\",\\\\n            \\\\\\\"default\\\\\\\": \\\\\\\"\\\\\\\",\\\\n            \\\\\\\"examples\\\\\\\": [\\\\n              \\\\\\\"This artifact does things and stuff\\\\\\\"\\\\n            ],\\\\n            \\\\\\\"pattern\\\\\\\": \\\\\\\"^(.*)$\\\\\\\"\\\\n          },\\\\n          \\\\\\\"properties\\\\\\\": {\\\\n            \\\\\\\"$id\\\\\\\": \\\\\\\"#/properties/artifacts/items/properties/properties\\\\\\\",\\\\n            \\\\\\\"type\\\\\\\": \\\\\\\"object\\\\\\\",\\\\n            \\\\\\\"title\\\\\\\": \\\\\\\"The Properties Schema\\\\\\\",\\\\n            \\\\\\\"description\\\\\\\": \\\\\\\"Additional properties that may be needed for a type during it's installations\\\\\\\",\\\\n            \\\\\\\"properties\\\\\\\": {\\\\n              \\\\\\\"tagged\\\\\\\": {\\\\n                \\\\\\\"$ref\\\\\\\": \\\\\\\"#/definitions/tagged\\\\\\\"\\\\n              }\\\\n            }\\\\n          }\\\\n        },\\\\n        \\\\\\\"if\\\\\\\": {\\\\n          \\\\\\\"properties\\\\\\\": {\\\\n            \\\\\\\"type\\\\\\\": {\\\\n              \\\\\\\"enum\\\\\\\": [\\\\n                \\\\\\\"tag\\\\\\\"\\\\n              ]\\\\n            }\\\\n          }\\\\n        },\\\\n        \\\\\\\"then\\\\\\\": {\\\\n          \\\\\\\"required\\\\\\\": [\\\\n            \\\\\\\"id\\\\\\\",\\\\n            \\\\\\\"name\\\\\\\",\\\\n            \\\\\\\"type\\\\\\\",\\\\n            \\\\\\\"properties\\\\\\\"\\\\n          ]\\\\n        },\\\\n        \\\\\\\"else\\\\\\\": {\\\\n          \\\\\\\"required\\\\\\\": [\\\\n            \\\\\\\"id\\\\\\\",\\\\n            \\\\\\\"name\\\\\\\",\\\\n            \\\\\\\"type\\\\\\\",\\\\n            \\\\\\\"location\\\\\\\"\\\\n          ]\\\\n        }\\\\n      }\\\\n    }\\\\n  }\\\\n}\\\"\\n                },\\n                {\\n                  \\\"name\\\": \\\"manifestLinkTester.js\\\",\\n                  \\\"content\\\": \\\"const path = require('path'),\\\\n      fs = require('fs-extra');\\\\n\\\\nconst args = process.argv.filter((element, index) => {\\\\n  return index >=2;\\\\n});\\\\nif (args.length <= 0) {\\\\n  const usage = `\\\\n  ==============================================================\\\\n    Simplified manifest schema validator, using ajv,\\\\n    that can be used for very quick schema validations.\\\\n    This will validate a json file against the schema\\\\n    found in manifest-schema.json\\\\n\\\\n    Usage: node manifestTester.js someManifestFile.json\\\\n\\\\n    NOTE: for a graphical JSON schema validator go to\\\\n    https://www.jsonschemavalidator.net/\\\\n\\\\n  ==============================================================`;\\\\n  console.log(usage);\\\\n  process.exit(1);\\\\n}\\\\n\\\\nasync function runLinkValidation() {\\\\n  const filePath = path.normalize(args[0]);\\\\n\\\\n  console.log(`Retrieving ${filePath}`);\\\\n  const manifest = await fs.readFile(filePath, 'utf8');\\\\n  console.log('Converting to JSON object');\\\\n  const data = JSON.parse(manifest);\\\\n\\\\n  console.log('Iterating through artifacts...');\\\\n  let valid=true;\\\\n  for (let i=0; i<data.artifacts.length; i++){\\\\n    const current = data.artifacts[i].location;\\\\n    if (current){\\\\n      if (fs.existsSync(`./${current}`)){\\\\n        console.log(`\\\\\\\\t✅  Validating ${current}`);\\\\n      }\\\\n      else{\\\\n        console.log(`\\\\\\\\t❌  Validating ${current}`);\\\\n        valid = false;\\\\n      }\\\\n    }\\\\n  }\\\\n  if (!valid) {\\\\n    console.error('Validation Failed  👎');\\\\n    process.exit(1);\\\\n  }\\\\n  else {\\\\n    console.log('Validation passed  👍');\\\\n  }\\\\n}\\\\ntry {\\\\n  runLinkValidation();\\\\n}\\\\ncatch(error) {\\\\n  console.error(`Error occurred running the validator ${error}`);\\\\n}\\\\n\\\"\\n                },\\n                {\\n                  \\\"name\\\": \\\"manifestTester.js\\\",\\n                  \\\"content\\\": \\\"const AJV = require('ajv'),\\\\n  path = require('path'),\\\\n  fs = require('fs-extra'),\\\\n  r2 = require('r2'),\\\\n  betterAjvErrors = require('better-ajv-errors');\\\\n\\\\nconst ajv = new AJV({\\\\n  jsonPointers: true,\\\\n  allErrors: true\\\\n});\\\\n\\\\nconst args = process.argv.filter((element, index) => {\\\\n  return index >= 2;\\\\n});\\\\nif (args.length != 2) {\\\\n  const usage = `\\\\n  ==============================================================\\\\n    Simplified manifest schema validator, using ajv,\\\\n    that can be used for very quick schema validations.\\\\n    This will validate a json file against the schema\\\\n    found in manifest-schema.json\\\\n\\\\n    Examples:\\\\n    Usage: node manifestTester.js someManifestFile.json PATH/TO/SCHEMA/FILE.json\\\\n    Usage: node manifestTester.js someManifestFile.json http://www.PATH.TO/SCHEMA/FILE.json\\\\n\\\\n    NOTE: for a graphical JSON schema validator go to\\\\n    https://www.jsonschemavalidator.net/\\\\n\\\\n  ==============================================================`;\\\\n  console.log(usage);\\\\n  process.exit(1);\\\\n}\\\\n\\\\nasync function runValidation() {\\\\n  let schema;\\\\n  if (args[1].includes(\\\\\\\"http\\\\\\\")) {\\\\n    schema = await r2(args[1]).json;\\\\n  }\\\\n  else {\\\\n    schema = require(path.join(__dirname, args[1]));\\\\n  }\\\\n  // console.log(`the schema is : ${JSON.stringify(schema)}`)\\\\n  const filePath = path.normalize(args[0]);\\\\n  console.log(`Retrieving ${filePath}`);\\\\n  try {\\\\n    const manifest = await fs.readFile(filePath, 'utf8');\\\\n    console.log('Converting to JSON object');\\\\n    const data = JSON.parse(manifest);\\\\n\\\\n    console.log('Initializing AJV with schema');\\\\n    ajv.addSchema(schema, 'manifestSchema');\\\\n    console.log(`Validating ${filePath} against the schema`);\\\\n    var valid = ajv.validate('manifestSchema', data);\\\\n    if (!valid) {\\\\n      console.error('❌  Validation Failed');\\\\n      const output = betterAjvErrors(schema, data, ajv.errors, { format: 'js' });\\\\n      console.log(output);\\\\n      process.exit(1);\\\\n\\\\n    }\\\\n    else {\\\\n      console.log('✅  Validation passed');\\\\n    }\\\\n  }\\\\n  catch (error) {\\\\n    console.error(error);\\\\n    process.exit(1);\\\\n  }\\\\n}\\\\ntry {\\\\n  runValidation();\\\\n}\\\\ncatch (error) {\\\\n  console.error(`❌  Error occurred running the validator ${error}`);\\\\n  process.exit(1);\\\\n}\\\\n\\\"\\n                }\\n              ],\\n              \\\"yml\\\": [\\n                {\\n                  \\\"name\\\": \\\"bitbucket-pipelines.yml\\\",\\n                  \\\"content\\\": \\\"image: atlassian/default-image:3\\\\nservices:\\\\n  - docker:dind\\\\nafter_script:\\\\n  - rm -rf ~/.ssh\\\\npipelines:\\\\n  default:\\\\n    - step:\\\\n        name: 'quality'\\\\n        runs-on:\\\\n          - self.hosted\\\\n          - linux\\\\n        image: alpine:3.15\\\\n        allow_failure: true\\\\n        script:\\\\n          - npm i\\\\n          # check node version:\\\\n          - 'echo \\\\\\\"node version: $(node --version)\\\\\\\"'\\\\n          # check npm version\\\\n          - 'echo \\\\\\\"npm version: $(npm --version)\\\\\\\"'\\\\n          - npm audit fix --force\\\\n          - npm audit --registry=https://registry.npmjs.org\\\\n    - step:\\\\n        name: 'test'\\\\n        runs-on:\\\\n          - self.hosted\\\\n          - linux\\\\n        image: alpine:3.15\\\\n        allow_failure: false\\\\n        script:\\\\n          - npm i\\\\n          # check node version:\\\\n          - 'echo \\\\\\\"node version: $(node --version)\\\\\\\"'\\\\n          # check npm version\\\\n          - 'echo \\\\\\\"npm version: $(npm --version)\\\\\\\"'\\\\n          - npm run validateSchema\\\\n\\\\n          - npm i\\\\n          # check node version:\\\\n          - 'echo \\\\\\\"node version: $(node --version)\\\\\\\"'\\\\n          # check npm version\\\\n          - 'echo \\\\\\\"npm version: $(npm --version)\\\\\\\"'\\\\n          - npm run validateSchemaLinks\\\\n    - step:\\\\n        name: 'bump'\\\\n        runs-on:\\\\n          - self.hosted\\\\n          - linux\\\\n        image: alpine:3.15\\\\n        only:\\\\n          - master\\\\n        script:\\\\n          - sh ./scripts/git_setup.sh\\\\n          - sh ./scripts/node_setup.sh\\\\n          - sh ./scripts/ver_bump.sh\\\\n    - step:\\\\n        name: 'generate'\\\\n        runs-on:\\\\n          - self.hosted\\\\n          - linux\\\\n        image: alpine:3.15\\\\n        allow_failure: false\\\\n        artifacts:\\\\n          paths:\\\\n          - artifact.json\\\\n          expire_in: 5 mins \\\\n        script:\\\\n          - sh ./scripts/commit.sh\\\\n    - step:\\\\n        name: 'promote'\\\\n        runs-on:\\\\n          - self.hosted\\\\n          - linux\\\\n        image: python:3.10.11\\\\n        allow_failure: false\\\\n        only:\\\\n          - master\\\\n        dependencies: \\\\n          - generate_artifact_json\\\\n        script:\\\\n          - pip3 install requests\\\\n          - |\\\\n            if ! python3 ./scripts/promote.py ./artifact.json; then\\\\n              echo -e \\\\\\\"\\\\\\\\033[0;31mERROR: ***********************************************************************************\\\\\\\"\\\\n              echo \\\\\\\"ERROR: There was an issue promoting artifact.json to IAP.\\\\\\\"\\\\n              echo -e \\\\\\\"ERROR: ***********************************************************************************\\\\\\\\033[0m\\\\\\\"\\\\n              exit 1\\\\n            fi \\\\n\\\"\\n                }\\n              ]\\n            },\\n            \\\"deleteArray\\\": [\\n              \\\"manifest.json\\\",\\n              \\\"/bundles/workflows/Test1.json\\\",\\n              \\\"/bundles/workflows/Test2.json\\\",\\n              \\\"new.json\\\"\\n            ],\\n            \\\"packageJsonName\\\": \\\"dsup@test\\\",\\n            \\\"packageJsonVersion\\\": \\\"0.0.1\\\"\\n          }\\n        },\\n        \\\"outgoing\\\": {\\n          \\\"value\\\": null\\n        }\\n      },\\n      \\\"deprecated\\\": false,\\n      \\\"groups\\\": [],\\n      \\\"x\\\": 0.5090196078431373,\\n      \\\"y\\\": 0.352258064516129\\n    },\\n    \\\"6c1c\\\": {\\n      \\\"name\\\": \\\"query\\\",\\n      \\\"canvasName\\\": \\\"query\\\",\\n      \\\"summary\\\": \\\"Query Data Using 'json-query' Format\\\",\\n      \\\"description\\\": \\\"Query data using a dot/bracket notation string and a matching key/value pair.\\\",\\n      \\\"location\\\": \\\"Application\\\",\\n      \\\"locationType\\\": null,\\n      \\\"app\\\": \\\"WorkFlowEngine\\\",\\n      \\\"type\\\": \\\"operation\\\",\\n      \\\"displayName\\\": \\\"WorkFlowEngine\\\",\\n      \\\"variables\\\": {\\n        \\\"incoming\\\": {\\n          \\\"pass_on_null\\\": false,\\n          \\\"query\\\": \\\"renderedTemplate\\\",\\n          \\\"obj\\\": \\\"$var.7514.renderedTemplate\\\"\\n        },\\n        \\\"outgoing\\\": {\\n          \\\"return_data\\\": null\\n        },\\n        \\\"error\\\": \\\"\\\",\\n        \\\"decorators\\\": []\\n      },\\n      \\\"deprecated\\\": false,\\n      \\\"groups\\\": [],\\n      \\\"x\\\": 0.7349019607843137,\\n      \\\"y\\\": 0.21161290322580645,\\n      \\\"scheduled\\\": false\\n    },\\n    \\\"76d8\\\": {\\n      \\\"name\\\": \\\"makeData\\\",\\n      \\\"canvasName\\\": \\\"makeData\\\",\\n      \\\"summary\\\": \\\"Convert input into a different data type\\\",\\n      \\\"description\\\": \\\"This task takes an input and converts it to a different data type. For example, converting a number into a string.\\\",\\n      \\\"location\\\": \\\"Application\\\",\\n      \\\"locationType\\\": null,\\n      \\\"app\\\": \\\"WorkFlowEngine\\\",\\n      \\\"type\\\": \\\"automatic\\\",\\n      \\\"displayName\\\": \\\"Tools\\\",\\n      \\\"variables\\\": {\\n        \\\"incoming\\\": {\\n          \\\"input\\\": \\\"$var.6c1c.return_data\\\",\\n          \\\"outputType\\\": \\\"json\\\",\\n          \\\"variables\\\": \\\"\\\"\\n        },\\n        \\\"outgoing\\\": {\\n          \\\"output\\\": null\\n        },\\n        \\\"error\\\": \\\"\\\",\\n        \\\"decorators\\\": []\\n      },\\n      \\\"deprecated\\\": false,\\n      \\\"groups\\\": [],\\n      \\\"actor\\\": \\\"Pronghorn\\\",\\n      \\\"x\\\": 0.8172549019607843,\\n      \\\"y\\\": 0.14580645161290323,\\n      \\\"scheduled\\\": false\\n    },\\n    \\\"e3e8\\\": {\\n      \\\"name\\\": \\\"query\\\",\\n      \\\"canvasName\\\": \\\"query\\\",\\n      \\\"summary\\\": \\\"Query Data Using 'json-query' Format\\\",\\n      \\\"description\\\": \\\"Query data using a dot/bracket notation string and a matching key/value pair.\\\",\\n      \\\"location\\\": \\\"Application\\\",\\n      \\\"locationType\\\": null,\\n      \\\"app\\\": \\\"WorkFlowEngine\\\",\\n      \\\"type\\\": \\\"operation\\\",\\n      \\\"displayName\\\": \\\"WorkFlowEngine\\\",\\n      \\\"variables\\\": {\\n        \\\"incoming\\\": {\\n          \\\"pass_on_null\\\": false,\\n          \\\"query\\\": \\\"add\\\",\\n          \\\"obj\\\": \\\"$var.76d8.output\\\"\\n        },\\n        \\\"outgoing\\\": {\\n          \\\"return_data\\\": null\\n        },\\n        \\\"error\\\": \\\"\\\",\\n        \\\"decorators\\\": []\\n      },\\n      \\\"deprecated\\\": false,\\n      \\\"groups\\\": [],\\n      \\\"x\\\": 0.8384313725490196,\\n      \\\"y\\\": 0.0967741935483871,\\n      \\\"scheduled\\\": false\\n    },\\n    \\\"f884\\\": {\\n      \\\"name\\\": \\\"makeData\\\",\\n      \\\"canvasName\\\": \\\"makeData\\\",\\n      \\\"summary\\\": \\\"Convert input into a different data type\\\",\\n      \\\"description\\\": \\\"This task takes an input and converts it to a different data type. For example, converting a number into a string.\\\",\\n      \\\"location\\\": \\\"Application\\\",\\n      \\\"locationType\\\": null,\\n      \\\"app\\\": \\\"WorkFlowEngine\\\",\\n      \\\"type\\\": \\\"automatic\\\",\\n      \\\"displayName\\\": \\\"Tools\\\",\\n      \\\"variables\\\": {\\n        \\\"incoming\\\": {\\n          \\\"input\\\": \\\"$var.e3e8.return_data\\\",\\n          \\\"outputType\\\": \\\"json\\\",\\n          \\\"variables\\\": \\\"\\\"\\n        },\\n        \\\"outgoing\\\": {\\n          \\\"output\\\": null\\n        },\\n        \\\"error\\\": \\\"\\\",\\n        \\\"decorators\\\": []\\n      },\\n      \\\"deprecated\\\": false,\\n      \\\"groups\\\": [],\\n      \\\"actor\\\": \\\"Pronghorn\\\",\\n      \\\"x\\\": 1.0745098039215686,\\n      \\\"y\\\": 0.3561290322580645,\\n      \\\"scheduled\\\": false\\n    },\\n    \\\"3df2\\\": {\\n      \\\"name\\\": \\\"query\\\",\\n      \\\"canvasName\\\": \\\"query\\\",\\n      \\\"summary\\\": \\\"Query Data Using 'json-query' Format\\\",\\n      \\\"description\\\": \\\"Query data using a dot/bracket notation string and a matching key/value pair.\\\",\\n      \\\"location\\\": \\\"Application\\\",\\n      \\\"locationType\\\": null,\\n      \\\"app\\\": \\\"WorkFlowEngine\\\",\\n      \\\"type\\\": \\\"operation\\\",\\n      \\\"displayName\\\": \\\"WorkFlowEngine\\\",\\n      \\\"variables\\\": {\\n        \\\"incoming\\\": {\\n          \\\"pass_on_null\\\": false,\\n          \\\"query\\\": \\\" \\\\\\\"package.json\\\\\\\"\\\",\\n          \\\"obj\\\": \\\"$var.f884.output\\\"\\n        },\\n        \\\"outgoing\\\": {\\n          \\\"return_data\\\": null\\n        },\\n        \\\"error\\\": \\\"\\\",\\n        \\\"decorators\\\": []\\n      },\\n      \\\"deprecated\\\": false,\\n      \\\"groups\\\": [],\\n      \\\"x\\\": 1.1772549019607843,\\n      \\\"y\\\": 0.35870967741935483,\\n      \\\"scheduled\\\": false\\n    },\\n    \\\"ba9b\\\": {\\n      \\\"name\\\": \\\"keys\\\",\\n      \\\"canvasName\\\": \\\"keys\\\",\\n      \\\"summary\\\": \\\"Gets the keys of an object.\\\",\\n      \\\"description\\\": \\\"Returns an array of a given object's property names, in the same order as we get with a normal loop.\\\",\\n      \\\"location\\\": \\\"Application\\\",\\n      \\\"locationType\\\": null,\\n      \\\"app\\\": \\\"WorkFlowEngine\\\",\\n      \\\"type\\\": \\\"automatic\\\",\\n      \\\"displayName\\\": \\\"Object\\\",\\n      \\\"variables\\\": {\\n        \\\"incoming\\\": {\\n          \\\"obj\\\": \\\"$var.e3e8.return_data\\\"\\n        },\\n        \\\"outgoing\\\": {\\n          \\\"keys\\\": null\\n        },\\n        \\\"error\\\": \\\"\\\",\\n        \\\"decorators\\\": []\\n      },\\n      \\\"deprecated\\\": false,\\n      \\\"groups\\\": [],\\n      \\\"actor\\\": \\\"Pronghorn\\\",\\n      \\\"x\\\": 0.9623529411764706,\\n      \\\"y\\\": 0.08129032258064516,\\n      \\\"scheduled\\\": false\\n    }\\n  },\\n  \\\"transitions\\\": {\\n    \\\"7514\\\": {\\n      \\\"6c1c\\\": {\\n        \\\"type\\\": \\\"standard\\\",\\n        \\\"state\\\": \\\"success\\\"\\n      }\\n    },\\n    \\\"workflow_start\\\": {\\n      \\\"71fc\\\": {\\n        \\\"type\\\": \\\"standard\\\",\\n        \\\"state\\\": \\\"success\\\"\\n      }\\n    },\\n    \\\"workflow_end\\\": {},\\n    \\\"71fc\\\": {\\n      \\\"7514\\\": {\\n        \\\"type\\\": \\\"standard\\\",\\n        \\\"state\\\": \\\"success\\\"\\n      }\\n    },\\n    \\\"6c1c\\\": {\\n      \\\"76d8\\\": {\\n        \\\"type\\\": \\\"standard\\\",\\n        \\\"state\\\": \\\"success\\\"\\n      }\\n    },\\n    \\\"76d8\\\": {\\n      \\\"e3e8\\\": {\\n        \\\"type\\\": \\\"standard\\\",\\n        \\\"state\\\": \\\"success\\\"\\n      }\\n    },\\n    \\\"e3e8\\\": {\\n      \\\"ba9b\\\": {\\n        \\\"type\\\": \\\"standard\\\",\\n        \\\"state\\\": \\\"success\\\"\\n      }\\n    },\\n    \\\"f884\\\": {\\n      \\\"3df2\\\": {\\n        \\\"type\\\": \\\"standard\\\",\\n        \\\"state\\\": \\\"success\\\"\\n      }\\n    },\\n    \\\"3df2\\\": {\\n      \\\"workflow_end\\\": {\\n        \\\"type\\\": \\\"standard\\\",\\n        \\\"state\\\": \\\"success\\\"\\n      }\\n    },\\n    \\\"ba9b\\\": {\\n      \\\"f884\\\": {\\n        \\\"type\\\": \\\"standard\\\",\\n        \\\"state\\\": \\\"success\\\"\\n      }\\n    },\\n    \\\"e041\\\": {}\\n  },\\n  \\\"font_size\\\": 12,\\n  \\\"last_updated\\\": \\\"2022-04-28T14:51:46.871Z\\\",\\n  \\\"last_updated_by\\\": {\\n    \\\"provenance\\\": \\\"local_aaa\\\",\\n    \\\"username\\\": \\\"admin@pronghorn\\\",\\n    \\\"firstname\\\": \\\"admin\\\",\\n    \\\"inactive\\\": false,\\n    \\\"email\\\": \\\"\\\"\\n  },\\n  \\\"lastUpdatedVersion\\\": \\\"5.40.5-2021.1.72.0\\\",\\n  \\\"inputSchema\\\": {\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"properties\\\": {}\\n  },\\n  \\\"outputSchema\\\": {\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"_id\\\": {\\n        \\\"type\\\": \\\"string\\\",\\n        \\\"pattern\\\": \\\"^[0-9a-f]{24}$\\\"\\n      },\\n      \\\"initiator\\\": {\\n        \\\"type\\\": \\\"string\\\"\\n      },\\n      \\\"test\\\": {\\n        \\\"type\\\": \\\"object\\\",\\n        \\\"properties\\\": {\\n          \\\"artifact\\\": {\\n            \\\"type\\\": \\\"object\\\",\\n            \\\"properties\\\": {\\n              \\\"update\\\": {\\n                \\\"type\\\": \\\"array\\\",\\n                \\\"items\\\": {\\n                  \\\"type\\\": \\\"object\\\",\\n                  \\\"properties\\\": {\\n                    \\\"name\\\": {\\n                      \\\"type\\\": \\\"string\\\"\\n                    },\\n                    \\\"type\\\": {\\n                      \\\"type\\\": \\\"string\\\"\\n                    },\\n                    \\\"content\\\": {\\n                      \\\"type\\\": \\\"string\\\"\\n                    }\\n                  }\\n                }\\n              },\\n              \\\"create\\\": {\\n                \\\"type\\\": \\\"array\\\",\\n                \\\"items\\\": {\\n                  \\\"anyOf\\\": [\\n                    {\\n                      \\\"type\\\": \\\"object\\\",\\n                      \\\"properties\\\": {\\n                        \\\"name\\\": {\\n                          \\\"type\\\": \\\"string\\\"\\n                        },\\n                        \\\"type\\\": {\\n                          \\\"type\\\": \\\"string\\\"\\n                        },\\n                        \\\"content\\\": {\\n                          \\\"type\\\": \\\"array\\\",\\n                          \\\"items\\\": {\\n                            \\\"type\\\": \\\"object\\\",\\n                            \\\"properties\\\": {\\n                              \\\"name\\\": {\\n                                \\\"type\\\": \\\"string\\\"\\n                              },\\n                              \\\"type\\\": {\\n                                \\\"type\\\": \\\"string\\\"\\n                              },\\n                              \\\"content\\\": {\\n                                \\\"type\\\": \\\"array\\\"\\n                              }\\n                            }\\n                          }\\n                        }\\n                      }\\n                    },\\n                    {\\n                      \\\"type\\\": \\\"object\\\",\\n                      \\\"properties\\\": {\\n                        \\\"name\\\": {\\n                          \\\"type\\\": \\\"string\\\"\\n                        },\\n                        \\\"type\\\": {\\n                          \\\"type\\\": \\\"string\\\"\\n                        },\\n                        \\\"content\\\": {\\n                          \\\"type\\\": \\\"string\\\"\\n                        }\\n                      }\\n                    }\\n                  ]\\n                }\\n              }\\n            }\\n          },\\n          \\\"branch\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          },\\n          \\\"commitMessage\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          },\\n          \\\"scripts\\\": {\\n            \\\"type\\\": \\\"object\\\",\\n            \\\"properties\\\": {\\n              \\\"status\\\": {\\n                \\\"type\\\": \\\"string\\\"\\n              },\\n              \\\"_id\\\": {\\n                \\\"type\\\": \\\"string\\\"\\n              },\\n              \\\"initiator\\\": {\\n                \\\"type\\\": \\\"string\\\"\\n              },\\n              \\\"scriptFiles\\\": {\\n                \\\"type\\\": \\\"array\\\",\\n                \\\"items\\\": {\\n                  \\\"type\\\": \\\"object\\\",\\n                  \\\"properties\\\": {\\n                    \\\"name\\\": {\\n                      \\\"type\\\": \\\"string\\\"\\n                    },\\n                    \\\"content\\\": {\\n                      \\\"type\\\": \\\"string\\\"\\n                    }\\n                  }\\n                }\\n              },\\n              \\\"testFiles\\\": {\\n                \\\"type\\\": \\\"array\\\",\\n                \\\"items\\\": {\\n                  \\\"type\\\": \\\"object\\\",\\n                  \\\"properties\\\": {\\n                    \\\"name\\\": {\\n                      \\\"type\\\": \\\"string\\\"\\n                    },\\n                    \\\"content\\\": {\\n                      \\\"type\\\": \\\"string\\\"\\n                    }\\n                  }\\n                }\\n              },\\n              \\\"yml\\\": {\\n                \\\"type\\\": \\\"array\\\",\\n                \\\"items\\\": {\\n                  \\\"type\\\": \\\"object\\\",\\n                  \\\"properties\\\": {\\n                    \\\"name\\\": {\\n                      \\\"type\\\": \\\"string\\\"\\n                    },\\n                    \\\"content\\\": {\\n                      \\\"type\\\": \\\"string\\\"\\n                    }\\n                  }\\n                }\\n              }\\n            }\\n          },\\n          \\\"deleteArray\\\": {\\n            \\\"type\\\": \\\"array\\\",\\n            \\\"items\\\": {\\n              \\\"type\\\": \\\"string\\\"\\n            }\\n          },\\n          \\\"packageJsonName\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          },\\n          \\\"packageJsonVersion\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          }\\n        }\\n      }\\n    }\\n  },\\n  \\\"created\\\": \\\"2022-04-08T16:14:08.678Z\\\",\\n  \\\"created_by\\\": {\\n    \\\"provenance\\\": \\\"local_aaa\\\",\\n    \\\"username\\\": \\\"admin@pronghorn\\\",\\n    \\\"firstname\\\": \\\"admin\\\",\\n    \\\"inactive\\\": false,\\n    \\\"email\\\": \\\"\\\"\\n  },\\n  \\\"createdVersion\\\": \\\"5.40.5-2021.1.72.0\\\",\\n  \\\"tags\\\": [],\\n  \\\"groups\\\": []\\n}\"\n            }\n          ]\n        },\n        {\n          \"name\": \"json_forms\",\n          \"type\": \"directory\",\n          \"content\": []\n        },\n        {\n          \"name\": \"forms\",\n          \"type\": \"directory\",\n          \"content\": []\n        },\n        {\n          \"name\": \"templates\",\n          \"type\": \"directory\",\n          \"content\": [\n            {\n              \"name\": \"filesFormat.json\",\n              \"type\": \"file\",\n              \"content\": \"{\\n  \\\"_id\\\": \\\"625dcb70acd5d400a6e45565\\\",\\n  \\\"command\\\": \\\"\\\",\\n  \\\"template\\\": \\\"{%set finalOutput = {} %}\\\\n{%for file in artifact%}\\\\n{%if file.content is string%}\\\\n{%set _ = finalOutput.update({file.name: file.content}) %}\\\\n{%else%}\\\\n{%for file1 in file.content%}\\\\n{%if file1.content is string%}\\\\n{%set _ = finalOutput.update({\\\\\\\"/\\\\\\\"+ file.name + \\\\\\\"/\\\\\\\" + file1.name: file1.content}) %}\\\\n{%else%}\\\\n{%for file2 in file1.content%}\\\\n{%set _ = finalOutput.update({\\\\\\\"/\\\\\\\"+ file.name + \\\\\\\"/\\\\\\\" + file1.name + \\\\\\\"/\\\\\\\" + file2.name: file2.content}) %}\\\\n{%endfor%}\\\\n{%endif%}\\\\n{%endfor%}\\\\n{%endif%}\\\\n{%endfor%}\\\\n{%for file in scripts[\\\\\\\"scriptFiles\\\\\\\"]%}\\\\n{%set _ = finalOutput.update({\\\\\\\"/scripts/\\\\\\\" + file.name: file.content}) %}\\\\n{%endfor%}\\\\n{%for file in scripts[\\\\\\\"testFiles\\\\\\\"]%}\\\\n{%set _ = finalOutput.update({\\\\\\\"/test/\\\\\\\" + file.name: file.content}) %}\\\\n{%endfor%}\\\\n{%for file in scripts[\\\\\\\"yml\\\\\\\"]%}\\\\n{%set _ = finalOutput.update({file.name: file.content}) %}\\\\n{%endfor%}\\\\n\\\\n{%set _ = finalOutput.update({\\\\\\\"branch\\\\\\\": branch}) %}\\\\n{%set _ = finalOutput.update({\\\\\\\"message\\\\\\\": commitMessage}) %}\\\\n\\\\n{% for key, value in finalOutput.items() %}\\\\n{%if key in deleteFiles%}\\\\n{%set _ = deleteFiles.remove(key)%}\\\\n{%endif%}\\\\n{% endfor %}\\\\n\\\\n{\\\\\\\"add\\\\\\\": {{finalOutput | tojson }},\\\\n\\\\\\\"delete\\\\\\\":{{deleteFiles | tojson}}\\\\n}\\\",\\n  \\\"data\\\": \\\"{\\\\n  \\\\\\\"artifact\\\\\\\": [\\\\n    {\\\\n      \\\\\\\"name\\\\\\\": \\\\\\\"README.md\\\\\\\",\\\\n      \\\\\\\"type\\\\\\\": \\\\\\\"file\\\\\\\",\\\\n      \\\\\\\"content\\\\\\\": \\\\\\\"\\\\\\\"\\\\n    },\\\\n    {\\\\n      \\\\\\\"name\\\\\\\": \\\\\\\"LICENSE\\\\\\\",\\\\n      \\\\\\\"type\\\\\\\": \\\\\\\"file\\\\\\\",\\\\n      \\\\\\\"content\\\\\\\": \\\\\\\"Apache-2.0\\\\\\\"\\\\n    },\\\\n    {\\\\n      \\\\\\\"name\\\\\\\": \\\\\\\"package.json\\\\\\\",\\\\n      \\\\\\\"type\\\\\\\": \\\\\\\"file\\\\\\\",\\\\n      \\\\\\\"content\\\\\\\": \\\\\\\"{\\\\\\\\n  \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"@psup/bitbuckettest\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"author\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Itential Automation Platform\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"0.0.2\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"scripts\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"test\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Error: no test specified\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" && exit 1\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"deploy\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"echo not needed npm publish --access=public --registry=http://registry.npmjs.org\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"validateSchema\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"node test/manifestTester.js manifest.json manifest-schema.json\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"validateSchemaLinks\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"node test/manifestLinkTester.js manifest.json\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"generateImageLinks\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"node utils/generateImageLinks.js\\\\\\\\\\\\\\\"\\\\\\\\n  },\\\\\\\\n  \\\\\\\\\\\\\\\"repository\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"bitbucket\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"hostname\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"api.bitbucket.org\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"path\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"itentialdsup\\\\\\\\\\\\\\\"\\\\\\\\n  },\\\\\\\\n  \\\\\\\\\\\\\\\"keywords\\\\\\\\\\\\\\\": [\\\\\\\\n    \\\\\\\\\\\\\\\"Itential\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"IAP\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"artifacts\\\\\\\\\\\\\\\"\\\\\\\\n  ],\\\\\\\\n  \\\\\\\\\\\\\\\"license\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Apache-2.0\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"devDependencies\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"r2\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^2.0.1\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"ajv\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"6.10.0\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"better-ajv-errors\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^0.6.1\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"fs-extra\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^7.0.1\\\\\\\\\\\\\\\"\\\\\\\\n  },\\\\\\\\n  \\\\\\\\\\\\\\\"IAPDependencies\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"@itential/app-workflow_engine\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"@itential/app-template_builder\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n  },\\\\\\\\n  \\\\\\\\\\\\\\\"IAPCategories\\\\\\\\\\\\\\\": []\\\\\\\\n}\\\\\\\"\\\\n    },\\\\n    {\\\\n      \\\\\\\"name\\\\\\\": \\\\\\\"bundles\\\\\\\",\\\\n      \\\\\\\"type\\\\\\\": \\\\\\\"directory\\\\\\\",\\\\n      \\\\\\\"content\\\\\\\": [\\\\n        {\\\\n          \\\\\\\"name\\\\\\\": \\\\\\\"ac_agenda_jobs\\\\\\\",\\\\n          \\\\\\\"type\\\\\\\": \\\\\\\"directory\\\\\\\",\\\\n          \\\\\\\"content\\\\\\\": []\\\\n        },\\\\n        {\\\\n          \\\\\\\"name\\\\\\\": \\\\\\\"automations\\\\\\\",\\\\n          \\\\\\\"type\\\\\\\": \\\\\\\"directory\\\\\\\",\\\\n          \\\\\\\"content\\\\\\\": []\\\\n        },\\\\n        {\\\\n          \\\\\\\"name\\\\\\\": \\\\\\\"workflows\\\\\\\",\\\\n          \\\\\\\"type\\\\\\\": \\\\\\\"directory\\\\\\\",\\\\n          \\\\\\\"content\\\\\\\": [\\\\n            {\\\\n              \\\\\\\"name\\\\\\\": \\\\\\\"Test1.json\\\\\\\",\\\\n              \\\\\\\"type\\\\\\\": \\\\\\\"file\\\\\\\",\\\\n              \\\\\\\"content\\\\\\\": \\\\\\\"{\\\\\\\\n  \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Test1\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"automation\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"tasks\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"workflow_start\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"workflow_start\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\": [],\\\\\\\\n      \\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\": 0,\\\\\\\\n      \\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\": 0.5\\\\\\\\n    },\\\\\\\\n    \\\\\\\\\\\\\\\"workflow_end\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"workflow_end\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\": [],\\\\\\\\n      \\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\": 1,\\\\\\\\n      \\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\": 0.5\\\\\\\\n    },\\\\\\\\n    \\\\\\\\\\\\\\\"5d2e\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"newVariable\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"canvasName\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"newVariable\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"summary\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Create a Job Variable\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Create a new Job variable by Job ID and assign it a value.\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Application\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"locationType\\\\\\\\\\\\\\\": null,\\\\\\\\n      \\\\\\\\\\\\\\\"app\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"operation\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"displayName\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"variables\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"incoming\\\\\\\\\\\\\\\": {\\\\\\\\n          \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"dummy\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"value\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/@psup/testprebuilt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"author\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Itential Automation Platform\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0.0.1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Test Sanjana\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"scripts\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"test\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Error: no test specifiedu0026\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\u0026 exit 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"deploy\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"echo not needed npm publish --access=public --registry=http://registry.npmjs.org\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"validateSchema\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"node test/manifestTester.js manifest.json manifest-schema.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"validateSchemaLinks\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"node test/manifestLinkTester.js manifest.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"generateImageLinks\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"node utils/generateImageLinks.js\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"repository\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"bitbucket\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"hostname\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"api.bitbucket.org\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"itentialdsup\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"keywords\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Itential\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"IAP\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"artifacts\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  ],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"license\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Apache-2.0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"devDependencies\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"r2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^2.0.1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ajv\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"6.10.0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"better-ajv-errors\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^0.6.1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"fs-extra\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^7.0.1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"IAPDependencies\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"@itential/app-workflow_engine\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"IAPCategories\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": []}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\\n        },\\\\\\\\n        \\\\\\\\\\\\\\\"outgoing\\\\\\\\\\\\\\\": {\\\\\\\\n          \\\\\\\\\\\\\\\"value\\\\\\\\\\\\\\\": null\\\\\\\\n        }\\\\\\\\n      },\\\\\\\\n      \\\\\\\\\\\\\\\"deprecated\\\\\\\\\\\\\\\": false,\\\\\\\\n      \\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\": [],\\\\\\\\n      \\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\": 0.16627450980392156,\\\\\\\\n      \\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\": 0.46580645161290324\\\\\\\\n    },\\\\\\\\n    \\\\\\\\\\\\\\\"46eb\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"makeData\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"canvasName\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"makeData\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"summary\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Convert input into a different data type\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"This task takes an input and converts it to a different data type. For example, converting a number into a string.\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Application\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"locationType\\\\\\\\\\\\\\\": null,\\\\\\\\n      \\\\\\\\\\\\\\\"app\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"automatic\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"displayName\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Tools\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"variables\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"incoming\\\\\\\\\\\\\\\": {\\\\\\\\n          \\\\\\\\\\\\\\\"input\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"$var.5d2e.value\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"outputType\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"json\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"variables\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n        },\\\\\\\\n        \\\\\\\\\\\\\\\"outgoing\\\\\\\\\\\\\\\": {\\\\\\\\n          \\\\\\\\\\\\\\\"output\\\\\\\\\\\\\\\": null\\\\\\\\n        },\\\\\\\\n        \\\\\\\\\\\\\\\"error\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"decorators\\\\\\\\\\\\\\\": []\\\\\\\\n      },\\\\\\\\n      \\\\\\\\\\\\\\\"deprecated\\\\\\\\\\\\\\\": false,\\\\\\\\n      \\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\": [],\\\\\\\\n      \\\\\\\\\\\\\\\"actor\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Pronghorn\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\": 0.5058823529411764,\\\\\\\\n      \\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\": 0.4,\\\\\\\\n      \\\\\\\\\\\\\\\"scheduled\\\\\\\\\\\\\\\": false\\\\\\\\n    },\\\\\\\\n    \\\\\\\\\\\\\\\"cf8e\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"childJob\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"canvasName\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"childJob\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"summary\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Run Child Job\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Runs a child job inside a workflow.\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Application\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"locationType\\\\\\\\\\\\\\\": null,\\\\\\\\n      \\\\\\\\\\\\\\\"app\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"operation\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"displayName\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"variables\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"incoming\\\\\\\\\\\\\\\": {\\\\\\\\n          \\\\\\\\\\\\\\\"task\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"workflow\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Test2\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"variables\\\\\\\\\\\\\\\": {},\\\\\\\\n          \\\\\\\\\\\\\\\"data_array\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"transformation\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"loopType\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n        },\\\\\\\\n        \\\\\\\\\\\\\\\"outgoing\\\\\\\\\\\\\\\": {\\\\\\\\n          \\\\\\\\\\\\\\\"job_details\\\\\\\\\\\\\\\": null\\\\\\\\n        }\\\\\\\\n      },\\\\\\\\n      \\\\\\\\\\\\\\\"deprecated\\\\\\\\\\\\\\\": false,\\\\\\\\n      \\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\": [],\\\\\\\\n      \\\\\\\\\\\\\\\"actor\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"job\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\": 0.3247058823529412,\\\\\\\\n      \\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\": 0.36516129032258066\\\\\\\\n    }\\\\\\\\n  },\\\\\\\\n  \\\\\\\\\\\\\\\"transitions\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"workflow_start\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"5d2e\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"standard\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"state\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"success\\\\\\\\\\\\\\\"\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    \\\\\\\\\\\\\\\"workflow_end\\\\\\\\\\\\\\\": {},\\\\\\\\n    \\\\\\\\\\\\\\\"5d2e\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"cf8e\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"standard\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"state\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"success\\\\\\\\\\\\\\\"\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    \\\\\\\\\\\\\\\"46eb\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"workflow_end\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"standard\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"state\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"success\\\\\\\\\\\\\\\"\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    \\\\\\\\\\\\\\\"cf8e\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"46eb\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"standard\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"state\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"success\\\\\\\\\\\\\\\"\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  },\\\\\\\\n  \\\\\\\\\\\\\\\"font_size\\\\\\\\\\\\\\\": 12,\\\\\\\\n  \\\\\\\\\\\\\\\"last_updated\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"2022-04-27T20:14:02.114Z\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"last_updated_by\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"provenance\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"local_aaa\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"username\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"admin@pronghorn\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"firstname\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"admin\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"inactive\\\\\\\\\\\\\\\": false,\\\\\\\\n    \\\\\\\\\\\\\\\"email\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n  },\\\\\\\\n  \\\\\\\\\\\\\\\"lastUpdatedVersion\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"5.40.5-2021.1.72.0\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"inputSchema\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\": {}\\\\\\\\n  },\\\\\\\\n  \\\\\\\\\\\\\\\"outputSchema\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"_id\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^[0-9a-f]{24}$\\\\\\\\\\\\\\\"\\\\\\\\n      },\\\\\\\\n      \\\\\\\\\\\\\\\"initiator\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n      },\\\\\\\\n      \\\\\\\\\\\\\\\"dummy\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  },\\\\\\\\n  \\\\\\\\\\\\\\\"created\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"2022-04-08T16:13:39.641Z\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"created_by\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"provenance\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"local_aaa\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"username\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"admin@pronghorn\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"firstname\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"admin\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"inactive\\\\\\\\\\\\\\\": false,\\\\\\\\n    \\\\\\\\\\\\\\\"email\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n  },\\\\\\\\n  \\\\\\\\\\\\\\\"createdVersion\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"5.40.5-2021.1.72.0\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"tags\\\\\\\\\\\\\\\": [],\\\\\\\\n  \\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\": []\\\\\\\\n}\\\\\\\"\\\\n            },\\\\n            {\\\\n              \\\\\\\"name\\\\\\\": \\\\\\\"Test2.json\\\\\\\",\\\\n              \\\\\\\"type\\\\\\\": \\\\\\\"file\\\\\\\",\\\\n              \\\\\\\"content\\\\\\\": \\\\\\\"{\\\\\\\\n  \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Test2\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"automation\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"tasks\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"7514\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"renderJinjaTemplate\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"canvasName\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"renderJinjaTemplate\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"summary\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Render Jinja Template\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Renders jinja template output.\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Application\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"locationType\\\\\\\\\\\\\\\": null,\\\\\\\\n      \\\\\\\\\\\\\\\"app\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"TemplateBuilder\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"automatic\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"displayName\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"TemplateBuilder\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"variables\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"incoming\\\\\\\\\\\\\\\": {\\\\\\\\n          \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"filesFormat\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"context\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"$var.job.test\\\\\\\\\\\\\\\"\\\\\\\\n        },\\\\\\\\n        \\\\\\\\\\\\\\\"outgoing\\\\\\\\\\\\\\\": {\\\\\\\\n          \\\\\\\\\\\\\\\"renderedTemplate\\\\\\\\\\\\\\\": null\\\\\\\\n        },\\\\\\\\n        \\\\\\\\\\\\\\\"error\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"decorators\\\\\\\\\\\\\\\": []\\\\\\\\n      },\\\\\\\\n      \\\\\\\\\\\\\\\"deprecated\\\\\\\\\\\\\\\": false,\\\\\\\\n      \\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\": [],\\\\\\\\n      \\\\\\\\\\\\\\\"actor\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Pronghorn\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\": 0.6431372549019608,\\\\\\\\n      \\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\": 0.21806451612903227,\\\\\\\\n      \\\\\\\\\\\\\\\"scheduled\\\\\\\\\\\\\\\": false\\\\\\\\n    },\\\\\\\\n    \\\\\\\\\\\\\\\"workflow_start\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"workflow_start\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\": [],\\\\\\\\n      \\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\": 0.403921568627451,\\\\\\\\n      \\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\": 0.3076923076923077\\\\\\\\n    },\\\\\\\\n    \\\\\\\\\\\\\\\"workflow_end\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"workflow_end\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\": [],\\\\\\\\n      \\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\": 1.0807843137254902,\\\\\\\\n      \\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\": 0.46580645161290324\\\\\\\\n    },\\\\\\\\n    \\\\\\\\\\\\\\\"71fc\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"newVariable\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"canvasName\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"newVariable\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"summary\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Create a Job Variable\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Create a new Job variable by Job ID and assign it a value.\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Application\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"locationType\\\\\\\\\\\\\\\": null,\\\\\\\\n      \\\\\\\\\\\\\\\"app\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"operation\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"displayName\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"variables\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"incoming\\\\\\\\\\\\\\\": {\\\\\\\\n          \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"test\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"value\\\\\\\\\\\\\\\": {\\\\\\\\n            \\\\\\\\\\\\\\\"artifact\\\\\\\\\\\\\\\": {\\\\\\\\n              \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\": [\\\\\\\\n                {\\\\\\\\n                  \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"README.md\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"LICENSE\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Apache-2.0\\\\\\\\\\\\\\\"\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"package.json\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/@psup/testprebuilt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"author\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Itential Automation Platform\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0.0.1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Test Sanjana\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"scripts\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"test\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Error: no test specified\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" && exit 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"deploy\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"echo not needed npm publish --access=public --registry=http://registry.npmjs.org\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"validateSchema\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"node test/manifestTester.js manifest.json manifest-schema.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"validateSchemaLinks\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"node test/manifestLinkTester.js manifest.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"generateImageLinks\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"node utils/generateImageLinks.js\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"repository\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"bitbucket\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"hostname\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"api.bitbucket.org\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"itentialdsup\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"keywords\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Itential\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"IAP\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"artifacts\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n  ],\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"license\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Apache-2.0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"devDependencies\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"r2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^2.0.1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ajv\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"6.10.0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"better-ajv-errors\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^0.6.1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"fs-extra\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^7.0.1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"IAPDependencies\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"@itential/app-workflow_engine\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"IAPCategories\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": []\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\\n                }\\\\\\\\n              ],\\\\\\\\n              \\\\\\\\\\\\\\\"create\\\\\\\\\\\\\\\": [\\\\\\\\n                {\\\\\\\\n                  \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"bundles\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"directory\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": [\\\\\\\\n                    {\\\\\\\\n                      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"ac_agenda_jobs\\\\\\\\\\\\\\\",\\\\\\\\n                      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"directory\\\\\\\\\\\\\\\",\\\\\\\\n                      \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": []\\\\\\\\n                    },\\\\\\\\n                    {\\\\\\\\n                      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"automations\\\\\\\\\\\\\\\",\\\\\\\\n                      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"directory\\\\\\\\\\\\\\\",\\\\\\\\n                      \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": []\\\\\\\\n                    },\\\\\\\\n                    {\\\\\\\\n                      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"workflows\\\\\\\\\\\\\\\",\\\\\\\\n                      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"directory\\\\\\\\\\\\\\\",\\\\\\\\n                      \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": [\\\\\\\\n                        {\\\\\\\\n                          \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Test1.json\\\\\\\\\\\\\\\",\\\\\\\\n                          \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\",\\\\\\\\n                          \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Test1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"automation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tasks\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_start\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_start\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [],\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 0,\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 0.5\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_end\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_end\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [],\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 1,\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 0.5\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"5d2e\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"newVariable\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"canvasName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"newVariable\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"summary\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Create a Job Variable\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Create a new Job variable by Job ID and assign it a value.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Application\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"locationType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": null,\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"app\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"operation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"displayName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"variables\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"incoming\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"dummy\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"value\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": true\\\\\\\\\\\\\\\\n        },\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"outgoing\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"value\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": null\\\\\\\\\\\\\\\\n        }\\\\\\\\\\\\\\\\n      },\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"deprecated\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": false,\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [],\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 0.49747242647058826,\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 0.49935483870967734\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"327d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"childJob\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"canvasName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"childJob\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"summary\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Run Child Job\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Runs a child job inside a workflow.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Application\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"locationType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": null,\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"app\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"operation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"displayName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"variables\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"incoming\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"task\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Test2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"variables\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {},\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"data_array\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"transformation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"loopType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n        },\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"outgoing\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"job_details\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": null\\\\\\\\\\\\\\\\n        }\\\\\\\\\\\\\\\\n      },\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"deprecated\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": false,\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [],\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"actor\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"job\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 0.3349019607843137,\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 0.49032258064516127\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"transitions\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_start\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"327d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"standard\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"state\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"success\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_end\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {},\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"5d2e\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_end\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"standard\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"state\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"success\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"327d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"5d2e\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"standard\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"state\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"success\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"font_size\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 12,\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"last_updated\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"2022-04-11T18:56:00.184Z\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"last_updated_by\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"provenance\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"local_aaa\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"username\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"admin@pronghorn\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"firstname\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"admin\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"inactive\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": false,\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"email\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"lastUpdatedVersion\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"5.40.5-2021.1.72.0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"inputSchema\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {}\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"outputSchema\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"_id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^[0-9a-f]{24}$\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n      },\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"initiator\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n      },\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"dummy\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"boolean\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"created\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"2022-04-08T16:13:39.641Z\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"created_by\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"provenance\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"local_aaa\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"username\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"admin@pronghorn\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"firstname\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"admin\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"inactive\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": false,\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"email\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"createdVersion\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"5.40.5-2021.1.72.0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tags\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [],\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": []\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\\n                        },\\\\\\\\n                        {\\\\\\\\n                          \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Test2.json\\\\\\\\\\\\\\\",\\\\\\\\n                          \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\",\\\\\\\\n                          \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Test2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"automation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tasks\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_start\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_start\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [],\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 0,\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 0.5\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_end\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_end\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [],\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 1,\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 0.5\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"587f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"newVariable\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"canvasName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"newVariable\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"summary\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Create a Job Variable\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Create a new Job variable by Job ID and assign it a value.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Application\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"locationType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": null,\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"app\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"operation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"displayName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"variables\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"incoming\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"test\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"value\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": true\\\\\\\\\\\\\\\\n        },\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"outgoing\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"value\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": null\\\\\\\\\\\\\\\\n        }\\\\\\\\\\\\\\\\n      },\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"deprecated\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": false,\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [],\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 0.49747242647058826,\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 0.49935483870967734\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"transitions\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_start\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"587f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"standard\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"state\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"success\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_end\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {},\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"587f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_end\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"standard\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"state\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"success\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"font_size\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 12,\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"last_updated\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"2022-04-08T16:14:28.018Z\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"last_updated_by\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"provenance\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"local_aaa\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"username\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"admin@pronghorn\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"firstname\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"admin\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"inactive\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": false,\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"email\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"lastUpdatedVersion\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"5.40.5-2021.1.72.0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"inputSchema\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {}\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"outputSchema\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"_id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^[0-9a-f]{24}$\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n      },\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"initiator\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n      },\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"test\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"boolean\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"created\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"2022-04-08T16:14:08.678Z\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"created_by\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"provenance\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"local_aaa\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"username\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"admin@pronghorn\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"firstname\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"admin\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"inactive\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": false,\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"email\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"createdVersion\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"5.40.5-2021.1.72.0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tags\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [],\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": []\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\\n                        }\\\\\\\\n                      ]\\\\\\\\n                    },\\\\\\\\n                    {\\\\\\\\n                      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"json_forms\\\\\\\\\\\\\\\",\\\\\\\\n                      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"directory\\\\\\\\\\\\\\\",\\\\\\\\n                      \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": []\\\\\\\\n                    },\\\\\\\\n                    {\\\\\\\\n                      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"forms\\\\\\\\\\\\\\\",\\\\\\\\n                      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"directory\\\\\\\\\\\\\\\",\\\\\\\\n                      \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": []\\\\\\\\n                    },\\\\\\\\n                    {\\\\\\\\n                      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"templates\\\\\\\\\\\\\\\",\\\\\\\\n                      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"directory\\\\\\\\\\\\\\\",\\\\\\\\n                      \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": []\\\\\\\\n                    },\\\\\\\\n                    {\\\\\\\\n                      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"mop_templates\\\\\\\\\\\\\\\",\\\\\\\\n                      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"directory\\\\\\\\\\\\\\\",\\\\\\\\n                      \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": []\\\\\\\\n                    },\\\\\\\\n                    {\\\\\\\\n                      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"mop_analytic_templates\\\\\\\\\\\\\\\",\\\\\\\\n                      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"directory\\\\\\\\\\\\\\\",\\\\\\\\n                      \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": []\\\\\\\\n                    },\\\\\\\\n                    {\\\\\\\\n                      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"ucm_golden_configs\\\\\\\\\\\\\\\",\\\\\\\\n                      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"directory\\\\\\\\\\\\\\\",\\\\\\\\n                      \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": []\\\\\\\\n                    },\\\\\\\\n                    {\\\\\\\\n                      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"transformations\\\\\\\\\\\\\\\",\\\\\\\\n                      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"directory\\\\\\\\\\\\\\\",\\\\\\\\n                      \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": []\\\\\\\\n                    }\\\\\\\\n                  ]\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"manifest.json\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"bundleName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"@psup/testprebuilt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0.0.1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"fingerprint\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"626046bc8613af0078f1011a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"createdEpoch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"1650476732035\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"artifacts\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\n    {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Test1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Test1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/bundles/workflows/Test1.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"entryPoint\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": false\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\n    {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Test2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Test2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/bundles/workflows/Test2.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"entryPoint\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": false\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  ]\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\\n                }\\\\\\\\n              ]\\\\\\\\n            },\\\\\\\\n            \\\\\\\\\\\\\\\"branch\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"master\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"commitMessage\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"this is a commit message\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"scripts\\\\\\\\\\\\\\\": {\\\\\\\\n              \\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"complete\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"_id\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"157ee33a5fbc4d9ca0b406fa\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"initiator\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"admin@pronghorn\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"scriptFiles\\\\\\\\\\\\\\\": [\\\\\\\\n                {\\\\\\\\n                  \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"generate.js\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"const path = require('path');\\\\\\\\\\\\\\\\nconst fs = require('fs');\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nconst files = ['package.json', 'manifest.json', 'README.md'];\\\\\\\\\\\\\\\\nlet success = true;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nconst PID = process.argv[2];\\\\\\\\\\\\\\\\nconst bitbucketUrl = process.argv[3];\\\\\\\\\\\\\\\\nconst bitbucketBranch = process.argv[4];\\\\\\\\\\\\\\\\nif (PID === null || PID == undefined) {\\\\\\\\\\\\\\\\n  console.error('Please run this script with Bitbucket Repo UUID as an argument');\\\\\\\\\\\\\\\\n  process.exit(2);\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\nconsole.log(`Generating artifact.json file w/ ${PID} as Bitbucket Repo ID`);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n/*function fileTypetoType(fileType) {\\\\\\\\\\\\\\\\n  const underscoreToDash = fileType.replace(/_/g, '-');\\\\\\\\\\\\\\\\n  if (\\\\\\\\\\\\\\\\n    fileType === 'ac_agenda_jobs' ||\\\\\\\\\\\\\\\\n    fileType === 'mop_templates' ||\\\\\\\\\\\\\\\\n    fileType === 'mop_analytic_templates' ||\\\\\\\\\\\\\\\\n    fileType === 'templates' ||\\\\\\\\\\\\\\\\n    fileType === 'workflows'\\\\\\\\\\\\\\\\n  ) {\\\\\\\\\\\\\\\\n    const singularize = underscoreToDash.substring(\\\\\\\\\\\\\\\\n      0,\\\\\\\\\\\\\\\\n      underscoreToDash.length - 1\\\\\\\\\\\\\\\\n    );\\\\\\\\\\\\\\\\n    return singularize;\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n  if (fileType === 'catalog_store') {\\\\\\\\\\\\\\\\n    return 'service-catalog';\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n  return underscoreToDash;\\\\\\\\\\\\\\\\n}*/\\\\\\\\\\\\\\\\nconst filePath = __dirname.replace(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/scripts\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\");\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n  const [packageJSON, manifest, readme] = files.map(entry => {\\\\\\\\\\\\\\\\n    const result = fs.readFileSync(path.join(filePath, `./${entry}`), {\\\\\\\\\\\\\\\\n      encoding: 'utf-8'\\\\\\\\\\\\\\\\n    });\\\\\\\\\\\\\\\\n    console.log(result)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    if (entry !== 'README.md') {\\\\\\\\\\\\\\\\n        const parsedRes = JSON.parse(result);\\\\\\\\\\\\\\\\n        if (entry === 'manifest.json' && Object.prototype.hasOwnProperty.call(parsedRes, 'version')) {\\\\\\\\\\\\\\\\n          delete parsedRes.version;\\\\\\\\\\\\\\\\n        }\\\\\\\\\\\\\\\\n      return parsedRes;\\\\\\\\\\\\\\\\n    } else {\\\\\\\\\\\\\\\\n      return result.replace(/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\//gm, `${bitbucketUrl}/raw/${bitbucketBranch}/`);\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  });\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  // const result = fs.readdirSync(path.join(__dirname, './bundles'));\\\\\\\\\\\\\\\\n  const bundles = [];\\\\\\\\\\\\\\\\n  // result.forEach(entry => {\\\\\\\\\\\\\\\\n  //   console.log(`   ➡ generating ${entry}(s)`);\\\\\\\\\\\\\\\\n  //   const fileNames = fs.readdirSync(path.join(__dirname, `./bundles/${entry}`));\\\\\\\\\\\\\\\\n  //   fileNames.forEach(file => {\\\\\\\\\\\\\\\\n  //     const data = fs.readFileSync(\\\\\\\\\\\\\\\\n  //       path.join(__dirname, `./bundles/${entry}/${file}`),\\\\\\\\\\\\\\\\n  //       { encoding: 'utf-8' }\\\\\\\\\\\\\\\\n  //     );\\\\\\\\\\\\\\\\n  //     try {\\\\\\\\\\\\\\\\n  //       bundles.push({ type: fileTypetoType(entry), data: JSON.parse(data) });\\\\\\\\\\\\\\\\n  //       console.log(`     ⚪ ${file}   -   ✅`);\\\\\\\\\\\\\\\\n  //     } catch(err) {\\\\\\\\\\\\\\\\n  //       success = false;\\\\\\\\\\\\\\\\n  //       console.log(`     ⚪ ${file}   -   ❌  - ${err}`);\\\\\\\\\\\\\\\\n  //     }\\\\\\\\\\\\\\\\n  //   });\\\\\\\\\\\\\\\\n  // });\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  const components = manifest.artifacts;\\\\\\\\\\\\\\\\n  components.forEach(file => {\\\\\\\\\\\\\\\\n    try {\\\\\\\\\\\\\\\\n      const data = fs.readFileSync(\\\\\\\\\\\\\\\\n        path.join(filePath, `./${file.location}`),\\\\\\\\\\\\\\\\n        { encoding: 'utf-8' }\\\\\\\\\\\\\\\\n      );\\\\\\\\\\\\\\\\n      bundles.push({ type: file.type, data: JSON.parse(data) });\\\\\\\\\\\\\\\\n      console.log(`     ⚪ (${file.type})   -   ${file.location}   -   ✅`);\\\\\\\\\\\\\\\\n    } catch (err) {\\\\\\\\\\\\\\\\n      success = false;\\\\\\\\\\\\\\\\n      console.log(`     ⚪  (${file.type})   -   ${file.location}   -   ❌  - ${err}`);\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  });\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  const metadata = {\\\\\\\\\\\\\\\\n    name: packageJSON.name,\\\\\\\\\\\\\\\\n    version: packageJSON.version,\\\\\\\\\\\\\\\\n    description: packageJSON.description,\\\\\\\\\\\\\\\\n    license: packageJSON.license,\\\\\\\\\\\\\\\\n    repository: packageJSON.repository,\\\\\\\\\\\\\\\\n    keywords: packageJSON.keywords,\\\\\\\\\\\\\\\\n    author: packageJSON.author,\\\\\\\\\\\\\\\\n    IAPDependencies: packageJSON.IAPDependencies,\\\\\\\\\\\\\\\\n  };\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  if (success) {\\\\\\\\\\\\\\\\n    console.log(`\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nFinished successfully`);\\\\\\\\\\\\\\\\n  } else {\\\\\\\\\\\\\\\\n    console.log(`\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nFinished with error(s)`);\\\\\\\\\\\\\\\\n    process.exit(1);\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n  const artifact = { metadata, manifest, bundles, readme };\\\\\\\\\\\\\\\\n  fs.writeFileSync(\\\\\\\\\\\\\\\\n    path.join(filePath, './artifact.json'),\\\\\\\\\\\\\\\\n    JSON.stringify(artifact, null, 2)\\\\\\\\\\\\\\\\n  );\\\\\\\\\\\\\\\\n} catch (err) {\\\\\\\\\\\\\\\\n  console.error(`Failed to generate artifact.json file: ${err}`);\\\\\\\\\\\\\\\\n  process.exit(1);\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"commit.sh\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"if ! sh ./scripts/git_setup.sh; then\\\\\\\\\\\\\\\\n  exit 1\\\\\\\\\\\\\\\\nfi\\\\\\\\\\\\\\\\necho \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"BITBUCKET PROJECT ID IS - $BITBUCKET_REPO_UUID\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\ncd scripts\\\\\\\\\\\\\\\\nGENERATE=`node generate $BITBUCKET_REPO_UUID $BITBUCKET_GIT_HTTP_ORIGIN ${BITBUCKET_BRANCH}`\\\\\\\\\\\\\\\\nif [ $? -ne 0 ]\\\\\\\\\\\\\\\\nthen \\\\\\\\\\\\\\\\n  echo $GENERATE\\\\\\\\\\\\\\\\n  exit 1\\\\\\\\\\\\\\\\nfi\\\\\\\\\\\\\\\\ncd ..\\\\\\\\\\\\\\\\ngit add artifact.json\\\\\\\\\\\\\\\\ngit diff --cached --name-only | if grep artifact.json\\\\\\\\\\\\\\\\nthen\\\\\\\\\\\\\\\\n    git commit -m \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"AUTO-GENERATED FILE [skip ci]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    if ! git push origin \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"${BITBUCKET_BRANCH}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"; then\\\\\\\\\\\\\\\\n      echo -e \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\033[0;31mERROR: ***********************************************************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n      echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ERROR: There was an issue pushing artifact.json.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n      echo -e \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ERROR: ***********************************************************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\033[0m\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n      exit 1\\\\\\\\\\\\\\\\n    else\\\\\\\\\\\\\\\\n      echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"A new generated artifact.json file has been checked in to current branch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    fi   \\\\\\\\\\\\\\\\nelse\\\\\\\\\\\\\\\\n    echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"artifact.json file hasn't changed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\nfi\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"create_release_script.sh\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"#!/bin/bash\\\\\\\\\\\\\\\\n#---------------------#\\\\\\\\\\\\\\\\n# Create release note #\\\\\\\\\\\\\\\\n#---------------------#\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nNEW_VERSION=$1\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ncreate_release_note() {\\\\\\\\\\\\\\\\n    # Create a changelog file if there isn't one\\\\\\\\\\\\\\\\n    if [ ! -e CHANGELOG.md ]; then\\\\\\\\\\\\\\\\n        touch CHANGELOG.md\\\\\\\\\\\\\\\\n    fi\\\\\\\\\\\\\\\\n    echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Creating release note...\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    #----------------#\\\\\\\\\\\\\\\\n    # Changelog Body #\\\\\\\\\\\\\\\\n    #----------------#\\\\\\\\\\\\\\\\n    # Get the merge request info\\\\\\\\\\\\\\\\n    CHANGELOG_BODY=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$(git log --merges -1 --format=%b)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    if [ -z \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$CHANGELOG_BODY\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" ]; then\\\\\\\\\\\\\\\\n        CHANGELOG_BODY=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$(git log -1 --format='Bug fixes and performance improvements'%n%n'See commit '%h)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    fi\\\\\\\\\\\\\\\\n    #--------------------#\\\\\\\\\\\\\\\\n    # Write Release Note #\\\\\\\\\\\\\\\\n    #--------------------#\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    # get the current date\\\\\\\\\\\\\\\\n    DATE=$(date +%m-%d-%Y)\\\\\\\\\\\\\\\\n    # create the release note\\\\\\\\\\\\\\\\n    RELEASE_NOTE=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n## $NEW_VERSION [$DATE]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n* $CHANGELOG_BODY\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n---\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    # append Release Note to Top of CHANGELOG\\\\\\\\\\\\\\\\n    if ! echo -e \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$RELEASE_NOTE$(cat CHANGELOG.md)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" > CHANGELOG.md; then\\\\\\\\\\\\\\\\n        echo -e \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\033[0;31mERROR: ***********************************************************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n        echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ERROR: Unable to append release note information to changelog.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n        echo -e \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ERROR: ***********************************************************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\033[0m\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    else\\\\\\\\\\\\\\\\n        echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Created release note:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n        echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$RELEASE_NOTE\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    fi\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ncreate_release_note \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$NEW_VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"deploy_artifact.sh\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"#!/bin/bash\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n# import the artifact\\\\\\\\\\\\\\\\nARTIFACT=$(cat artifact.json)\\\\\\\\\\\\\\\\n# echo $ARTIFACT\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n# generate IAP token\\\\\\\\\\\\\\\\nTOKEN=$(curl --silent --location --request POST 'http://localhost:3000/login' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n--header 'Content-Type: application/json' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n--data-raw '{\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"user\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"username\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"admin@pronghorn\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"password\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"admin\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n}')\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nnode createPayload\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCREATE_RESP=$(curl --silent --location --request POST 'http://localhost:3000/prebuilts/import' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n--header 'Content-Type: application/json' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n--header \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Cookie: token=${TOKEN}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n--data-binary \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"@payload.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\necho $CREATE_RESP\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n# if prebuild already exists, update existing\\\\\\\\\\\\\\\\nif [[ $CREATE_RESP == *\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"already exists\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"* ]]; then\\\\\\\\\\\\\\\\n  PREBUILT=$(curl --silent --location --request GET 'http://localhost:3000/prebuilts?equals=@dsup/jennprebuilt&equalsField=name' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  --header \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Cookie: token=${TOKEN}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  --data-raw '')\\\\\\\\\\\\\\\\n  # echo $PREBUILT\\\\\\\\\\\\\\\\n  echo $(grep '(?<=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")(.+)(?=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",)' artifact.json)\\\\\\\\\\\\\\\\n  echo $(grep '/(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\".+\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"){1}/' artifact.json)\\\\\\\\\\\\\\\\n  # node extractName $PREBUILT\\\\\\\\\\\\\\\\nfi\\\\\\\\\\\\\\\\nrm payload.json\\\\\\\\\\\\\\\\n# # # get prebuilts\\\\\\\\\\\\\\\\n# # PREBUILTS=$(curl --silent --location --request GET 'http://localhost:3000/prebuilts?&equals=@dsup/jennprebuilt&equalsField=name' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# # --header \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Cookie: token=${TOKEN}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n# # # echo $PREBUILTS\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"git_setup.sh\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"#!/bin/bash\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n#-----------#\\\\\\\\\\\\\\\\n# Git Setup #\\\\\\\\\\\\\\\\n#-----------#\\\\\\\\\\\\\\\\necho \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Setting up git credentials\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\nmkdir -p ~/.ssh\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ngit config --global user.email \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$CI_GIT_EMAIL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\ngit config --global user.name \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$CI_GIT_USERNAME\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\necho -e $ID_RSA > ~/.ssh/id_rsa\\\\\\\\\\\\\\\\nchmod 0400 ~/.ssh/id_rsa\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\necho git config --list --show-origin\\\\\\\\\\\\\\\\necho cat ~/.ssh/id_rsa\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\necho -e \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Host bitbucket.com\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\tStrictHostKeyChecking no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\tLogLevel ERROR\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" >> ~/.ssh/config\\\\\\\\\\\\\\\\ngit remote set-url origin http://bitbucket.org/$BITBUCKET_REPO_FULL_NAME\\\\\\\\\\\\\\\\ngit remote -v\\\\\\\\\\\\\\\\necho \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Git credentials configured.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\ngit stash\\\\\\\\\\\\\\\\ngit checkout ${BITBUCKET_BRANCH}\\\\\\\\\\\\\\\\nif ! git pull --rebase --tags; then \\\\\\\\\\\\\\\\n    echo -e \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\033[0;31mERROR: ***********************************************************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ERROR: There was an issue connecting to remote. Check your credentials.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    echo -e \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ERROR: ***********************************************************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\033[0m\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    exit 1\\\\\\\\\\\\\\\\nfi \\\\\\\\\\\\\\\\ngit reset --hard origin/${BITBUCKET_BRANCH}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\necho \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"${BITBUCKET_BRANCH} checked out.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"node_setup.sh\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"#!/bin/bash\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n# check node version:\\\\\\\\\\\\\\\\necho \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"node version: $(node --version)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\necho \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"npm version: $(npm --version)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\necho \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Installing dependencies...\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\nif [ ! -f package-lock.json ]; then\\\\\\\\\\\\\\\\n    PRESENT='false'\\\\\\\\\\\\\\\\n    echo 'package-lock does not exist - generating one now.'\\\\\\\\\\\\\\\\n    npm i --package-lock-only\\\\\\\\\\\\\\\\nelse \\\\\\\\\\\\\\\\n    if ! npm ci -q --unsafe-perm; then\\\\\\\\\\\\\\\\n        exit 1\\\\\\\\\\\\\\\\n    fi\\\\\\\\\\\\\\\\nfi\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nif [ -n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$PRESENT\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" ]; then\\\\\\\\\\\\\\\\n    git add package-lock.json\\\\\\\\\\\\\\\\n    git commit -m 'initialized package-lock.json [ci skip]'\\\\\\\\\\\\\\\\nfi\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\necho \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Dependencies installed.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"promote.py\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"import requests\\\\\\\\\\\\\\\\nimport json\\\\\\\\\\\\\\\\nimport sys\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nhostname = os.environ.get(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"IAP_HOSTNAME\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\nartifact_path = sys.argv[1]\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n# checking if IAP_PUSH_TO_LOCAL env var is set -> if not, default to True\\\\\\\\\\\\\\\\nif not (os.environ.get(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"IAP_PUSH_TO_LOCAL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")):\\\\\\\\\\\\\\\\n  push_to_local = True\\\\\\\\\\\\\\\\nelse:\\\\\\\\\\\\\\\\n  push_to_local = True if os.environ.get(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"IAP_PUSH_TO_LOCAL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\").lower() == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" else False\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n# checking if IAP_TOKEN is set -> if not, use basic auth login\\\\\\\\\\\\\\\\ntoken = os.environ.get(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"IAP_TOKEN\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\nbasic_auth = False\\\\\\\\\\\\\\\\nif not token:\\\\\\\\\\\\\\\\n  basic_auth = True\\\\\\\\\\\\\\\\n  username = os.environ.get(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"IAP_USERNAME\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n  pw = os.environ.get(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"IAP_PW\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nif not (artifact_path and hostname and (token or (username and pw))):\\\\\\\\\\\\\\\\n  print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Missing environmental variables.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMake sure your environmental variables are set properly.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nExiting...\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n  sys.exit(1)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nartifact = json.load(open(f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{artifact_path}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"))\\\\\\\\\\\\\\\\n# Function Definitions\\\\\\\\\\\\\\\\n# Handles getting token to authenticate into IAP\\\\\\\\\\\\\\\\ndef get_token():\\\\\\\\\\\\\\\\n  print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Getting auth token\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n  url = f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{hostname}/login\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n  payload = json.dumps({\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"user\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"username\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": username,\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"password\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": pw\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  })\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  response = requests.request(\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\n    url, \\\\\\\\\\\\\\\\n    headers={'Content-Type': 'application/json'},\\\\\\\\\\\\\\\\n    data=payload)\\\\\\\\\\\\\\\\n  if not response.status_code // 100 == 2:\\\\\\\\\\\\\\\\n    raise Exception(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Error: Unexpected response {}: Failed to get auth token\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\".format(response.text))\\\\\\\\\\\\\\\\n  else: \\\\\\\\\\\\\\\\n    return response.text\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n# Checks if prebuilt already exists\\\\\\\\\\\\\\\\ndef get_prebuilt(name):\\\\\\\\\\\\\\\\n  print(f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Retrieving prebuilt: {name}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n  url = f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{hostname}/prebuilts?equals={name}&equalsField=name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n  response = requests.request(\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"GET\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\n    url,\\\\\\\\\\\\\\\\n    headers={'Cookie': f'token={token}'})\\\\\\\\\\\\\\\\n  if not response.status_code // 100 == 2:\\\\\\\\\\\\\\\\n    raise Exception(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Error: Unexpected response {}: Failed to get prebuilt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\".format(response.text))\\\\\\\\\\\\\\\\n  else: \\\\\\\\\\\\\\\\n    return response.text\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef add_prebuilt(payload): \\\\\\\\\\\\\\\\n  print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Prebuilt does not exist yet - adding to IAP\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n  url = f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{hostname}/prebuilts/import\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n  headers = {\\\\\\\\\\\\\\\\n    'Content-Type': 'application/json',\\\\\\\\\\\\\\\\n    'Cookie': f'token={token}'\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n  response = requests.request(\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    url,\\\\\\\\\\\\\\\\n    headers=headers,\\\\\\\\\\\\\\\\n    data=payload)\\\\\\\\\\\\\\\\n  if \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Invalid repository configuration\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" in response.text:\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Failed to promote to original repository, pushing to local scope.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    updated_payload = json.loads(payload)\\\\\\\\\\\\\\\\n    updated_payload[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"prebuilt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"repository\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"] = {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"local\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"hostname\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"localhost\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    response = requests.request(\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      url,\\\\\\\\\\\\\\\\n      headers=headers,\\\\\\\\\\\\\\\\n      data=json.dumps(updated_payload))\\\\\\\\\\\\\\\\n  if not response.status_code // 100 == 2:\\\\\\\\\\\\\\\\n    raise Exception(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Error: Unexpected response {}: Failed to add prebuilt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\".format(response.text))\\\\\\\\\\\\\\\\n  else: \\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Successfully added prebuilt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    return response.text\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef update_prebuilt(id, payload):\\\\\\\\\\\\\\\\n  print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Updating existing prebuilt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n  url = f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{hostname}/prebuilts/{id}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n  headers = {\\\\\\\\\\\\\\\\n    'Content-Type': 'application/json',\\\\\\\\\\\\\\\\n    'Cookie': f'token={token}'\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n  response = requests.request(\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"PUT\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    url,\\\\\\\\\\\\\\\\n    headers=headers,\\\\\\\\\\\\\\\\n    data=payload)\\\\\\\\\\\\\\\\n  if \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Invalid repository configuration\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" in response.text:\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Failed to promote to original repository, pushing to local scope.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    updated_payload = json.loads(payload)\\\\\\\\\\\\\\\\n    updated_payload[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"prebuilt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"repository\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"] = {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"local\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"hostname\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"localhost\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    response = requests.request(\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"PUT\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      url,\\\\\\\\\\\\\\\\n      headers=headers,\\\\\\\\\\\\\\\\n      data=json.dumps(updated_payload))\\\\\\\\\\\\\\\\n  if not response.status_code // 100 == 2:\\\\\\\\\\\\\\\\n      raise Exception(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Error: Unexpected response {}: Failed to update prebuilt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\".format(response.text))\\\\\\\\\\\\\\\\n  else: \\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Successfully updated prebuilt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    return response.text\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef logout():\\\\\\\\\\\\\\\\n  print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Logging out of IAP\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n  url = f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{hostname}/login?logout=true\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n  headers = {\\\\\\\\\\\\\\\\n    'Content-Type': 'application/json',\\\\\\\\\\\\\\\\n    'Cookie': f'token={token}'\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n  response = requests.request(\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"GET\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    url,\\\\\\\\\\\\\\\\n    headers=headers)\\\\\\\\\\\\\\\\n  response = requests.request(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"GET\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", url, headers=headers)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n# Script starts here\\\\\\\\\\\\\\\\ntry: \\\\\\\\\\\\\\\\n  if (basic_auth):\\\\\\\\\\\\\\\\n    token = get_token()\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  # Set name of prebuilt\\\\\\\\\\\\\\\\n  name = artifact[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  results = get_prebuilt(name)\\\\\\\\\\\\\\\\n  if push_to_local:\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Setting artifact.json repository configuration to local\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    artifact[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"repository\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"] = {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"local\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"hostname\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"localhost\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    print('Promoting to local scope in IAP')\\\\\\\\\\\\\\\\n  payload = json.dumps({\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"prebuilt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": artifact,\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"options\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"overwrite\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": True \\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  })\\\\\\\\\\\\\\\\n  # if prebuilt doesn't exist, add it\\\\\\\\\\\\\\\\n  if json.loads(results)[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"total\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"] == 0:\\\\\\\\\\\\\\\\n    response = add_prebuilt(payload)\\\\\\\\\\\\\\\\n  else: # if prebuilt exists, update it\\\\\\\\\\\\\\\\n      id = json.loads(results)[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"results\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"][0][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"_id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\\n      update_prebuilt(id, payload)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  # logging out\\\\\\\\\\\\\\\\n  logout()\\\\\\\\\\\\\\\\nexcept requests.exceptions.RequestException as e: \\\\\\\\\\\\\\\\n  # A serious problem happened, like an SSLError or InvalidURL\\\\\\\\\\\\\\\\n  print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Error: {}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\".format(e))\\\\\\\\\\\\\\\\n  sys.exit(1)  \\\\\\\\\\\\\\\\nexcept: # error handling to catch any errors that throw a non 200 code\\\\\\\\\\\\\\\\n  e = sys.exc_info()[1]    \\\\\\\\\\\\\\\\n  print(e)\\\\\\\\\\\\\\\\n  sys.exit(1)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"ver_bump.sh\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"#!/bin/bash\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n#-------------------#\\\\\\\\\\\\\\\\n# Get Semver Prefix #\\\\\\\\\\\\\\\\n#-------------------#\\\\\\\\\\\\\\\\nVERSION=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$(git log --format=%s --merges -1|awk -F\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" '{print $2}'|awk -F \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" '{print $1}')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\ncase \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" in\\\\\\\\\\\\\\\\n    # if PATCH transform to patch\\\\\\\\\\\\\\\\n    patch|minor|major) SEMVER=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$(echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" | awk '{print tolower($0)}')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\";;\\\\\\\\\\\\\\\\n    *) SEMVER=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"patch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\";;\\\\\\\\\\\\\\\\nesac\\\\\\\\\\\\\\\\nif [ -z \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" ]; then\\\\\\\\\\\\\\\\n    echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"No branch prefix detected. Defaulting to patch.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\nfi\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\necho \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Semver bump: $SEMVER\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n#---------------------#\\\\\\\\\\\\\\\\n# Get Current Version #\\\\\\\\\\\\\\\\n#---------------------#\\\\\\\\\\\\\\\\nCURRENT_VERSION=$(node -p \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"require('./package.json').version\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\necho \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Last version: $CURRENT_VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\nCURRENT_MAJOR=$(echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$CURRENT_VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"|awk -F'.' '{print $1}')\\\\\\\\\\\\\\\\nCURRENT_MINOR=$(echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$CURRENT_VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"|awk -F'.' '{print $2}')\\\\\\\\\\\\\\\\nCURRENT_PATCH=$(echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$CURRENT_VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"|awk -F'.' '{print $3}'|awk -F'-' '{print $1}')\\\\\\\\\\\\\\\\nCURRENT_PRERELEASE=$(echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$CURRENT_VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"|awk -F'-' '{print $2}')\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n# if [[ $CURRENT_VERSION != *\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"+\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"* ]]; then\\\\\\\\\\\\\\\\n#     CURRENT_PATCH=$(echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$CURRENT_VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"|awk -F'.' '{print $3}'|awk -F'-' '{print $1}')\\\\\\\\\\\\\\\\n#     CURRENT_PRERELEASE=$(echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$CURRENT_VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"|awk -F'-' '{print $2}')\\\\\\\\\\\\\\\\n# else\\\\\\\\\\\\\\\\n#     CURRENT_PATCH=$(echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$CURRENT_VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"|awk -F'.' '{print $3}'|awk -F'+' '{print $1}')\\\\\\\\\\\\\\\\n#     CURRENT_PRERELEASE=$(echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$CURRENT_VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"|awk -F'+' '{print $2}')\\\\\\\\\\\\\\\\n# fi \\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n#---------------------------#\\\\\\\\\\\\\\\\n# Version & Release Package #\\\\\\\\\\\\\\\\n#---------------------------#\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n# create release note before versioning the project\\\\\\\\\\\\\\\\nsh ./scripts/create_release_script.sh \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$NEW_VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n# explicitly add the change log to the version bump commit\\\\\\\\\\\\\\\\ngit add CHANGELOG.md\\\\\\\\\\\\\\\\necho \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Bumping version...\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n# bump version, git tag, commit & then push changes\\\\\\\\\\\\\\\\n# using -f to ignore the added release note\\\\\\\\\\\\\\\\nnpm version -f \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$SEMVER\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" -m \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Updating $SEMVER version to %s. [skip ci]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" --loglevel=error\\\\\\\\\\\\\\\\necho \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Version bump successful\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n# push to gitlab\\\\\\\\\\\\\\\\n# no-verify is used to ignore any pre-push commits that may be used by the project\\\\\\\\\\\\\\\\nif git push -f --tags origin ${BITBUCKET_BRANCH} --follow-tags --no-verify; then\\\\\\\\\\\\\\\\n    echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Version bump pushed successfully.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\nelse\\\\\\\\\\\\\\\\n    echo -e \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\033[0;31mERROR: ***********************************************************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ERROR: Failed to push.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    echo -e \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ERROR: ***********************************************************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\033[0m\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    exit 1\\\\\\\\\\\\\\\\nfi\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"\\\\\\\\n                }\\\\\\\\n              ],\\\\\\\\n              \\\\\\\\\\\\\\\"testFiles\\\\\\\\\\\\\\\": [\\\\\\\\n                {\\\\\\\\n                  \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"manifest-schema.json\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$schema\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"http://json-schema.org/draft-07/schema#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"iap-artifact-bundle\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Artifact Bundle Schema\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": null,\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"additionalProperties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": false,\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"definitions\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tagged\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/properties/properties/tagged\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"array\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Tagged Item\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"These are the items that need to be tagged\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"uniqueItems\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": true,\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"items\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/properties/properties/tagged/items\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Tagged Items\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"examples\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"mop-example-1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"mop-analytic-example-1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow-example-1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n        ],\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^(.*)$\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"required\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"bundleName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"createdEpoch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"artifacts\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n  ],\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"bundleName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/bundleName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Bundle Name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Unique identifier for this bundle of artifacts.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"examples\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ExampleBundle\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n      ],\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^(.*)$\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/version\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Version\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The version of this bundle\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"examples\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"1.2.3\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n      ],\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^(.*)$\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"fingerprint\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/fingerprint\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Fingerprint\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"For use in future implementations of  installable modules where additional security measures need to be implemented. \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"examples\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Some verifiable token\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n      ],\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^(.*)$\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"createdEpoch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/createdEpoch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Created Time\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The date, in milliseconds since the unix epoch, for when this bundle was created/updated. Usually this is value of Date.now() or calling getTime() on a js Date object\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"examples\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"1554836984020\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"result from Date.now()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n      ],\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^(.*)$\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"artifacts\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/artifacts\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"array\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Artifacts \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"List of artifacts in this bundle. Note that each item must be unique and duplicates will fail validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": null,\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"uniqueItems\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": true,\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"items\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/artifacts/items\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Artifact items\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": null,\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"additionalProperties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": false,\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/artifacts/items/properties/id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Artifact Id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Unique Id identifying this artifact. \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"examples\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow-example-1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"mop-template-1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n            ],\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^(.*)$\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n          },\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/artifacts/items/properties/name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Artifact Name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Name identifying this artifact\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"examples\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"My Worflow1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n            ],\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^(.*)$\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n          },\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/artifacts/items/properties/type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"enum\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"mop-analytic-template\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"mop-template\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"json-forms\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tag\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"template\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"forms\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"golden-config\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"service-catalog\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ac-agenda-job\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"adapter\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"app\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"transformation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n            ],\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Artifact Type \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The type of artifact(s) this entry encompasses. Must be one of the supported types listed in the enum\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"examples\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"mop-analytic-template\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"mop-template\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tag\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"forms\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"golden-config\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n            ],\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^(.*)$\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n          },\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/artifacts/items/properties/location\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Artifact Location\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Path, relative to the root of this bundle, to either a specific artifact file or a directory of artifacts of a specific type. Future implementations may allow for URLs to external assets\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"examples\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/bundles/ExampleBundle/workflow/myWorkflow1.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/bundles/workflows/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n            ],\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^(.*)$\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n          },\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/artifacts/items/properties/description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Description \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The description of what this artifact is \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"examples\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"This artifact does things and stuff\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n            ],\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^(.*)$\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n          },\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/artifacts/items/properties/properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Properties Schema\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Additional properties that may be needed for a type during it's installations\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tagged\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$ref\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/definitions/tagged\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n              }\\\\\\\\\\\\\\\\n            }\\\\\\\\\\\\\\\\n          }\\\\\\\\\\\\\\\\n        },\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"if\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"enum\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tag\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n              ]\\\\\\\\\\\\\\\\n            }\\\\\\\\\\\\\\\\n          }\\\\\\\\\\\\\\\\n        },\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"then\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"required\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n          ]\\\\\\\\\\\\\\\\n        },\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"else\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"required\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n          ]\\\\\\\\\\\\\\\\n        }\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"manifestLinkTester.js\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"const path = require('path'),\\\\\\\\\\\\\\\\n      fs = require('fs-extra');\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nconst args = process.argv.filter((element, index) => {\\\\\\\\\\\\\\\\n  return index >=2;\\\\\\\\\\\\\\\\n});\\\\\\\\\\\\\\\\nif (args.length <= 0) {\\\\\\\\\\\\\\\\n  const usage = `\\\\\\\\\\\\\\\\n  ==============================================================\\\\\\\\\\\\\\\\n    Simplified manifest schema validator, using ajv,\\\\\\\\\\\\\\\\n    that can be used for very quick schema validations.\\\\\\\\\\\\\\\\n    This will validate a json file against the schema\\\\\\\\\\\\\\\\n    found in manifest-schema.json\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    Usage: node manifestTester.js someManifestFile.json\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    NOTE: for a graphical JSON schema validator go to\\\\\\\\\\\\\\\\n    https://www.jsonschemavalidator.net/\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  ==============================================================`;\\\\\\\\\\\\\\\\n  console.log(usage);\\\\\\\\\\\\\\\\n  process.exit(1);\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nasync function runLinkValidation() {\\\\\\\\\\\\\\\\n  const filePath = path.normalize(args[0]);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  console.log(`Retrieving ${filePath}`);\\\\\\\\\\\\\\\\n  const manifest = await fs.readFile(filePath, 'utf8');\\\\\\\\\\\\\\\\n  console.log('Converting to JSON object');\\\\\\\\\\\\\\\\n  const data = JSON.parse(manifest);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  console.log('Iterating through artifacts...');\\\\\\\\\\\\\\\\n  let valid=true;\\\\\\\\\\\\\\\\n  for (let i=0; i<data.artifacts.length; i++){\\\\\\\\\\\\\\\\n    const current = data.artifacts[i].location;\\\\\\\\\\\\\\\\n    if (current){\\\\\\\\\\\\\\\\n      if (fs.existsSync(`./${current}`)){\\\\\\\\\\\\\\\\n        console.log(`\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\t✅  Validating ${current}`);\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\n      else{\\\\\\\\\\\\\\\\n        console.log(`\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\t❌  Validating ${current}`);\\\\\\\\\\\\\\\\n        valid = false;\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n  if (!valid) {\\\\\\\\\\\\\\\\n    console.error('Validation Failed  👎');\\\\\\\\\\\\\\\\n    process.exit(1);\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n  else {\\\\\\\\\\\\\\\\n    console.log('Validation passed  👍');\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n  runLinkValidation();\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\ncatch(error) {\\\\\\\\\\\\\\\\n  console.error(`Error occurred running the validator ${error}`);\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"manifestTester.js\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"const AJV = require('ajv'),\\\\\\\\\\\\\\\\n  path = require('path'),\\\\\\\\\\\\\\\\n  fs = require('fs-extra'),\\\\\\\\\\\\\\\\n  r2 = require('r2'),\\\\\\\\\\\\\\\\n  betterAjvErrors = require('better-ajv-errors');\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nconst ajv = new AJV({\\\\\\\\\\\\\\\\n  jsonPointers: true,\\\\\\\\\\\\\\\\n  allErrors: true\\\\\\\\\\\\\\\\n});\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nconst args = process.argv.filter((element, index) => {\\\\\\\\\\\\\\\\n  return index >= 2;\\\\\\\\\\\\\\\\n});\\\\\\\\\\\\\\\\nif (args.length != 2) {\\\\\\\\\\\\\\\\n  const usage = `\\\\\\\\\\\\\\\\n  ==============================================================\\\\\\\\\\\\\\\\n    Simplified manifest schema validator, using ajv,\\\\\\\\\\\\\\\\n    that can be used for very quick schema validations.\\\\\\\\\\\\\\\\n    This will validate a json file against the schema\\\\\\\\\\\\\\\\n    found in manifest-schema.json\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    Examples:\\\\\\\\\\\\\\\\n    Usage: node manifestTester.js someManifestFile.json PATH/TO/SCHEMA/FILE.json\\\\\\\\\\\\\\\\n    Usage: node manifestTester.js someManifestFile.json http://www.PATH.TO/SCHEMA/FILE.json\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    NOTE: for a graphical JSON schema validator go to\\\\\\\\\\\\\\\\n    https://www.jsonschemavalidator.net/\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  ==============================================================`;\\\\\\\\\\\\\\\\n  console.log(usage);\\\\\\\\\\\\\\\\n  process.exit(1);\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nasync function runValidation() {\\\\\\\\\\\\\\\\n  let schema;\\\\\\\\\\\\\\\\n  if (args[1].includes(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"http\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")) {\\\\\\\\\\\\\\\\n    schema = await r2(args[1]).json;\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n  else {\\\\\\\\\\\\\\\\n    schema = require(path.join(__dirname, args[1]));\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n  // console.log(`the schema is : ${JSON.stringify(schema)}`)\\\\\\\\\\\\\\\\n  const filePath = path.normalize(args[0]);\\\\\\\\\\\\\\\\n  console.log(`Retrieving ${filePath}`);\\\\\\\\\\\\\\\\n  try {\\\\\\\\\\\\\\\\n    const manifest = await fs.readFile(filePath, 'utf8');\\\\\\\\\\\\\\\\n    console.log('Converting to JSON object');\\\\\\\\\\\\\\\\n    const data = JSON.parse(manifest);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    console.log('Initializing AJV with schema');\\\\\\\\\\\\\\\\n    ajv.addSchema(schema, 'manifestSchema');\\\\\\\\\\\\\\\\n    console.log(`Validating ${filePath} against the schema`);\\\\\\\\\\\\\\\\n    var valid = ajv.validate('manifestSchema', data);\\\\\\\\\\\\\\\\n    if (!valid) {\\\\\\\\\\\\\\\\n      console.error('❌  Validation Failed');\\\\\\\\\\\\\\\\n      const output = betterAjvErrors(schema, data, ajv.errors, { format: 'js' });\\\\\\\\\\\\\\\\n      console.log(output);\\\\\\\\\\\\\\\\n      process.exit(1);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    else {\\\\\\\\\\\\\\\\n      console.log('✅  Validation passed');\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n  catch (error) {\\\\\\\\\\\\\\\\n    console.error(error);\\\\\\\\\\\\\\\\n    process.exit(1);\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n  runValidation();\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\ncatch (error) {\\\\\\\\\\\\\\\\n  console.error(`❌  Error occurred running the validator ${error}`);\\\\\\\\\\\\\\\\n  process.exit(1);\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"\\\\\\\\n                }\\\\\\\\n              ],\\\\\\\\n              \\\\\\\\\\\\\\\"yml\\\\\\\\\\\\\\\": [\\\\\\\\n                {\\\\\\\\n                  \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"bitbucket-pipelines.yml\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"image: atlassian/default-image:3\\\\\\\\\\\\\\\\nservices:\\\\\\\\\\\\\\\\n  - docker:dind\\\\\\\\\\\\\\\\nafter_script:\\\\\\\\\\\\\\\\n  - rm -rf ~/.ssh\\\\\\\\\\\\\\\\npipelines:\\\\\\\\\\\\\\\\n  default:\\\\\\\\\\\\\\\\n    - step:\\\\\\\\\\\\\\\\n        name: 'quality'\\\\\\\\\\\\\\\\n        runs-on:\\\\\\\\\\\\\\\\n          - self.hosted\\\\\\\\\\\\\\\\n          - linux\\\\\\\\\\\\\\\\n        image: alpine:3.15\\\\\\\\\\\\\\\\n        allow_failure: true\\\\\\\\\\\\\\\\n        script:\\\\\\\\\\\\\\\\n          - npm i\\\\\\\\\\\\\\\\n          # check node version:\\\\\\\\\\\\\\\\n          - 'echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"node version: $(node --version)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'\\\\\\\\\\\\\\\\n          # check npm version\\\\\\\\\\\\\\\\n          - 'echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"npm version: $(npm --version)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'\\\\\\\\\\\\\\\\n          - npm audit fix --force\\\\\\\\\\\\\\\\n          - npm audit --registry=https://registry.npmjs.org\\\\\\\\\\\\\\\\n    - step:\\\\\\\\\\\\\\\\n        name: 'test'\\\\\\\\\\\\\\\\n        runs-on:\\\\\\\\\\\\\\\\n          - self.hosted\\\\\\\\\\\\\\\\n          - linux\\\\\\\\\\\\\\\\n        image: alpine:3.15\\\\\\\\\\\\\\\\n        allow_failure: false\\\\\\\\\\\\\\\\n        script:\\\\\\\\\\\\\\\\n          - npm i\\\\\\\\\\\\\\\\n          # check node version:\\\\\\\\\\\\\\\\n          - 'echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"node version: $(node --version)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'\\\\\\\\\\\\\\\\n          # check npm version\\\\\\\\\\\\\\\\n          - 'echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"npm version: $(npm --version)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'\\\\\\\\\\\\\\\\n          - npm run validateSchema\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n          - npm i\\\\\\\\\\\\\\\\n          # check node version:\\\\\\\\\\\\\\\\n          - 'echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"node version: $(node --version)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'\\\\\\\\\\\\\\\\n          # check npm version\\\\\\\\\\\\\\\\n          - 'echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"npm version: $(npm --version)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'\\\\\\\\\\\\\\\\n          - npm run validateSchemaLinks\\\\\\\\\\\\\\\\n    - step:\\\\\\\\\\\\\\\\n        name: 'bump'\\\\\\\\\\\\\\\\n        runs-on:\\\\\\\\\\\\\\\\n          - self.hosted\\\\\\\\\\\\\\\\n          - linux\\\\\\\\\\\\\\\\n        image: alpine:3.15\\\\\\\\\\\\\\\\n        only:\\\\\\\\\\\\\\\\n          - master\\\\\\\\\\\\\\\\n        script:\\\\\\\\\\\\\\\\n          - sh ./scripts/git_setup.sh\\\\\\\\\\\\\\\\n          - sh ./scripts/node_setup.sh\\\\\\\\\\\\\\\\n          - sh ./scripts/ver_bump.sh\\\\\\\\\\\\\\\\n    - step:\\\\\\\\\\\\\\\\n        name: 'generate'\\\\\\\\\\\\\\\\n        runs-on:\\\\\\\\\\\\\\\\n          - self.hosted\\\\\\\\\\\\\\\\n          - linux\\\\\\\\\\\\\\\\n        image: alpine:3.15\\\\\\\\\\\\\\\\n        allow_failure: false\\\\\\\\\\\\\\\\n        artifacts:\\\\\\\\\\\\\\\\n          paths:\\\\\\\\\\\\\\\\n          - artifact.json\\\\\\\\\\\\\\\\n          expire_in: 5 mins \\\\\\\\\\\\\\\\n        script:\\\\\\\\\\\\\\\\n          - sh ./scripts/commit.sh\\\\\\\\\\\\\\\\n    - step:\\\\\\\\\\\\\\\\n        name: 'promote'\\\\\\\\\\\\\\\\n        runs-on:\\\\\\\\\\\\\\\\n          - self.hosted\\\\\\\\\\\\\\\\n          - linux\\\\\\\\\\\\\\\\n        image: python:3.10.11\\\\\\\\\\\\\\\\n        allow_failure: false\\\\\\\\\\\\\\\\n        only:\\\\\\\\\\\\\\\\n          - master\\\\\\\\\\\\\\\\n        dependencies: \\\\\\\\\\\\\\\\n          - generate_artifact_json\\\\\\\\\\\\\\\\n        script:\\\\\\\\\\\\\\\\n          - pip3 install requests\\\\\\\\\\\\\\\\n          - |\\\\\\\\\\\\\\\\n            if ! python3 ./scripts/promote.py ./artifact.json; then\\\\\\\\\\\\\\\\n              echo -e \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\033[0;31mERROR: ***********************************************************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n              echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ERROR: There was an issue promoting artifact.json to IAP.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n              echo -e \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ERROR: ***********************************************************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\033[0m\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n              exit 1\\\\\\\\\\\\\\\\n            fi \\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"\\\\\\\\n                }\\\\\\\\n              ]\\\\\\\\n            },\\\\\\\\n            \\\\\\\\\\\\\\\"deleteArray\\\\\\\\\\\\\\\": [\\\\\\\\n              \\\\\\\\\\\\\\\"manifest.json\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"/bundles/workflows/Test1.json\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"/bundles/workflows/Test2.json\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"new.json\\\\\\\\\\\\\\\"\\\\\\\\n            ],\\\\\\\\n            \\\\\\\\\\\\\\\"packageJsonName\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"dsup@test\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"packageJsonVersion\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"0.0.1\\\\\\\\\\\\\\\"\\\\\\\\n          }\\\\\\\\n        },\\\\\\\\n        \\\\\\\\\\\\\\\"outgoing\\\\\\\\\\\\\\\": {\\\\\\\\n          \\\\\\\\\\\\\\\"value\\\\\\\\\\\\\\\": null\\\\\\\\n        }\\\\\\\\n      },\\\\\\\\n      \\\\\\\\\\\\\\\"deprecated\\\\\\\\\\\\\\\": false,\\\\\\\\n      \\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\": [],\\\\\\\\n      \\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\": 0.5090196078431373,\\\\\\\\n      \\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\": 0.352258064516129\\\\\\\\n    },\\\\\\\\n    \\\\\\\\\\\\\\\"6c1c\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"query\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"canvasName\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"query\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"summary\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Query Data Using 'json-query' Format\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Query data using a dot/bracket notation string and a matching key/value pair.\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Application\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"locationType\\\\\\\\\\\\\\\": null,\\\\\\\\n      \\\\\\\\\\\\\\\"app\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"operation\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"displayName\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"variables\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"incoming\\\\\\\\\\\\\\\": {\\\\\\\\n          \\\\\\\\\\\\\\\"pass_on_null\\\\\\\\\\\\\\\": false,\\\\\\\\n          \\\\\\\\\\\\\\\"query\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"renderedTemplate\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"obj\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"$var.7514.renderedTemplate\\\\\\\\\\\\\\\"\\\\\\\\n        },\\\\\\\\n        \\\\\\\\\\\\\\\"outgoing\\\\\\\\\\\\\\\": {\\\\\\\\n          \\\\\\\\\\\\\\\"return_data\\\\\\\\\\\\\\\": null\\\\\\\\n        },\\\\\\\\n        \\\\\\\\\\\\\\\"error\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"decorators\\\\\\\\\\\\\\\": []\\\\\\\\n      },\\\\\\\\n      \\\\\\\\\\\\\\\"deprecated\\\\\\\\\\\\\\\": false,\\\\\\\\n      \\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\": [],\\\\\\\\n      \\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\": 0.7349019607843137,\\\\\\\\n      \\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\": 0.21161290322580645,\\\\\\\\n      \\\\\\\\\\\\\\\"scheduled\\\\\\\\\\\\\\\": false\\\\\\\\n    },\\\\\\\\n    \\\\\\\\\\\\\\\"76d8\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"makeData\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"canvasName\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"makeData\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"summary\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Convert input into a different data type\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"This task takes an input and converts it to a different data type. For example, converting a number into a string.\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Application\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"locationType\\\\\\\\\\\\\\\": null,\\\\\\\\n      \\\\\\\\\\\\\\\"app\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"automatic\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"displayName\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Tools\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"variables\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"incoming\\\\\\\\\\\\\\\": {\\\\\\\\n          \\\\\\\\\\\\\\\"input\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"$var.6c1c.return_data\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"outputType\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"json\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"variables\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n        },\\\\\\\\n        \\\\\\\\\\\\\\\"outgoing\\\\\\\\\\\\\\\": {\\\\\\\\n          \\\\\\\\\\\\\\\"output\\\\\\\\\\\\\\\": null\\\\\\\\n        },\\\\\\\\n        \\\\\\\\\\\\\\\"error\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"decorators\\\\\\\\\\\\\\\": []\\\\\\\\n      },\\\\\\\\n      \\\\\\\\\\\\\\\"deprecated\\\\\\\\\\\\\\\": false,\\\\\\\\n      \\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\": [],\\\\\\\\n      \\\\\\\\\\\\\\\"actor\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Pronghorn\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\": 0.8172549019607843,\\\\\\\\n      \\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\": 0.14580645161290323,\\\\\\\\n      \\\\\\\\\\\\\\\"scheduled\\\\\\\\\\\\\\\": false\\\\\\\\n    },\\\\\\\\n    \\\\\\\\\\\\\\\"e3e8\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"query\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"canvasName\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"query\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"summary\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Query Data Using 'json-query' Format\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Query data using a dot/bracket notation string and a matching key/value pair.\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Application\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"locationType\\\\\\\\\\\\\\\": null,\\\\\\\\n      \\\\\\\\\\\\\\\"app\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"operation\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"displayName\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"variables\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"incoming\\\\\\\\\\\\\\\": {\\\\\\\\n          \\\\\\\\\\\\\\\"pass_on_null\\\\\\\\\\\\\\\": false,\\\\\\\\n          \\\\\\\\\\\\\\\"query\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"add\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"obj\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"$var.76d8.output\\\\\\\\\\\\\\\"\\\\\\\\n        },\\\\\\\\n        \\\\\\\\\\\\\\\"outgoing\\\\\\\\\\\\\\\": {\\\\\\\\n          \\\\\\\\\\\\\\\"return_data\\\\\\\\\\\\\\\": null\\\\\\\\n        },\\\\\\\\n        \\\\\\\\\\\\\\\"error\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"decorators\\\\\\\\\\\\\\\": []\\\\\\\\n      },\\\\\\\\n      \\\\\\\\\\\\\\\"deprecated\\\\\\\\\\\\\\\": false,\\\\\\\\n      \\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\": [],\\\\\\\\n      \\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\": 0.8384313725490196,\\\\\\\\n      \\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\": 0.0967741935483871,\\\\\\\\n      \\\\\\\\\\\\\\\"scheduled\\\\\\\\\\\\\\\": false\\\\\\\\n    },\\\\\\\\n    \\\\\\\\\\\\\\\"f884\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"makeData\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"canvasName\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"makeData\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"summary\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Convert input into a different data type\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"This task takes an input and converts it to a different data type. For example, converting a number into a string.\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Application\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"locationType\\\\\\\\\\\\\\\": null,\\\\\\\\n      \\\\\\\\\\\\\\\"app\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"automatic\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"displayName\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Tools\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"variables\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"incoming\\\\\\\\\\\\\\\": {\\\\\\\\n          \\\\\\\\\\\\\\\"input\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"$var.e3e8.return_data\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"outputType\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"json\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"variables\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n        },\\\\\\\\n        \\\\\\\\\\\\\\\"outgoing\\\\\\\\\\\\\\\": {\\\\\\\\n          \\\\\\\\\\\\\\\"output\\\\\\\\\\\\\\\": null\\\\\\\\n        },\\\\\\\\n        \\\\\\\\\\\\\\\"error\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"decorators\\\\\\\\\\\\\\\": []\\\\\\\\n      },\\\\\\\\n      \\\\\\\\\\\\\\\"deprecated\\\\\\\\\\\\\\\": false,\\\\\\\\n      \\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\": [],\\\\\\\\n      \\\\\\\\\\\\\\\"actor\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Pronghorn\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\": 1.0745098039215686,\\\\\\\\n      \\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\": 0.3561290322580645,\\\\\\\\n      \\\\\\\\\\\\\\\"scheduled\\\\\\\\\\\\\\\": false\\\\\\\\n    },\\\\\\\\n    \\\\\\\\\\\\\\\"3df2\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"query\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"canvasName\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"query\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"summary\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Query Data Using 'json-query' Format\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Query data using a dot/bracket notation string and a matching key/value pair.\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Application\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"locationType\\\\\\\\\\\\\\\": null,\\\\\\\\n      \\\\\\\\\\\\\\\"app\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"operation\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"displayName\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"variables\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"incoming\\\\\\\\\\\\\\\": {\\\\\\\\n          \\\\\\\\\\\\\\\"pass_on_null\\\\\\\\\\\\\\\": false,\\\\\\\\n          \\\\\\\\\\\\\\\"query\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"package.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"obj\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"$var.f884.output\\\\\\\\\\\\\\\"\\\\\\\\n        },\\\\\\\\n        \\\\\\\\\\\\\\\"outgoing\\\\\\\\\\\\\\\": {\\\\\\\\n          \\\\\\\\\\\\\\\"return_data\\\\\\\\\\\\\\\": null\\\\\\\\n        },\\\\\\\\n        \\\\\\\\\\\\\\\"error\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"decorators\\\\\\\\\\\\\\\": []\\\\\\\\n      },\\\\\\\\n      \\\\\\\\\\\\\\\"deprecated\\\\\\\\\\\\\\\": false,\\\\\\\\n      \\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\": [],\\\\\\\\n      \\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\": 1.1772549019607843,\\\\\\\\n      \\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\": 0.35870967741935483,\\\\\\\\n      \\\\\\\\\\\\\\\"scheduled\\\\\\\\\\\\\\\": false\\\\\\\\n    },\\\\\\\\n    \\\\\\\\\\\\\\\"ba9b\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"keys\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"canvasName\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"keys\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"summary\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Gets the keys of an object.\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Returns an array of a given object's property names, in the same order as we get with a normal loop.\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Application\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"locationType\\\\\\\\\\\\\\\": null,\\\\\\\\n      \\\\\\\\\\\\\\\"app\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"automatic\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"displayName\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Object\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"variables\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"incoming\\\\\\\\\\\\\\\": {\\\\\\\\n          \\\\\\\\\\\\\\\"obj\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"$var.e3e8.return_data\\\\\\\\\\\\\\\"\\\\\\\\n        },\\\\\\\\n        \\\\\\\\\\\\\\\"outgoing\\\\\\\\\\\\\\\": {\\\\\\\\n          \\\\\\\\\\\\\\\"keys\\\\\\\\\\\\\\\": null\\\\\\\\n        },\\\\\\\\n        \\\\\\\\\\\\\\\"error\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"decorators\\\\\\\\\\\\\\\": []\\\\\\\\n      },\\\\\\\\n      \\\\\\\\\\\\\\\"deprecated\\\\\\\\\\\\\\\": false,\\\\\\\\n      \\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\": [],\\\\\\\\n      \\\\\\\\\\\\\\\"actor\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Pronghorn\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\": 0.9623529411764706,\\\\\\\\n      \\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\": 0.08129032258064516,\\\\\\\\n      \\\\\\\\\\\\\\\"scheduled\\\\\\\\\\\\\\\": false\\\\\\\\n    }\\\\\\\\n  },\\\\\\\\n  \\\\\\\\\\\\\\\"transitions\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"7514\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"6c1c\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"standard\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"state\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"success\\\\\\\\\\\\\\\"\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    \\\\\\\\\\\\\\\"workflow_start\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"71fc\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"standard\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"state\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"success\\\\\\\\\\\\\\\"\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    \\\\\\\\\\\\\\\"workflow_end\\\\\\\\\\\\\\\": {},\\\\\\\\n    \\\\\\\\\\\\\\\"71fc\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"7514\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"standard\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"state\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"success\\\\\\\\\\\\\\\"\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    \\\\\\\\\\\\\\\"6c1c\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"76d8\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"standard\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"state\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"success\\\\\\\\\\\\\\\"\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    \\\\\\\\\\\\\\\"76d8\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"e3e8\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"standard\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"state\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"success\\\\\\\\\\\\\\\"\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    \\\\\\\\\\\\\\\"e3e8\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"ba9b\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"standard\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"state\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"success\\\\\\\\\\\\\\\"\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    \\\\\\\\\\\\\\\"f884\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"3df2\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"standard\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"state\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"success\\\\\\\\\\\\\\\"\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    \\\\\\\\\\\\\\\"3df2\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"workflow_end\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"standard\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"state\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"success\\\\\\\\\\\\\\\"\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    \\\\\\\\\\\\\\\"ba9b\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"f884\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"standard\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"state\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"success\\\\\\\\\\\\\\\"\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    \\\\\\\\\\\\\\\"e041\\\\\\\\\\\\\\\": {}\\\\\\\\n  },\\\\\\\\n  \\\\\\\\\\\\\\\"font_size\\\\\\\\\\\\\\\": 12,\\\\\\\\n  \\\\\\\\\\\\\\\"last_updated\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"2022-04-27T20:17:45.249Z\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"last_updated_by\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"provenance\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"local_aaa\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"username\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"admin@pronghorn\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"firstname\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"admin\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"inactive\\\\\\\\\\\\\\\": false,\\\\\\\\n    \\\\\\\\\\\\\\\"email\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n  },\\\\\\\\n  \\\\\\\\\\\\\\\"lastUpdatedVersion\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"5.40.5-2021.1.72.0\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"inputSchema\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\": {}\\\\\\\\n  },\\\\\\\\n  \\\\\\\\\\\\\\\"outputSchema\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\": {\\\\\\\\n      \\\\\\\\\\\\\\\"_id\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^[0-9a-f]{24}$\\\\\\\\\\\\\\\"\\\\\\\\n      },\\\\\\\\n      \\\\\\\\\\\\\\\"initiator\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n      },\\\\\\\\n      \\\\\\\\\\\\\\\"test\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\": {\\\\\\\\n          \\\\\\\\\\\\\\\"artifact\\\\\\\\\\\\\\\": {\\\\\\\\n            \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\": {\\\\\\\\n              \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\": {\\\\\\\\n                \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"array\\\\\\\\\\\\\\\",\\\\\\\\n                \\\\\\\\\\\\\\\"items\\\\\\\\\\\\\\\": {\\\\\\\\n                  \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\": {\\\\\\\\n                    \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": {\\\\\\\\n                      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n                    },\\\\\\\\n                    \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": {\\\\\\\\n                      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n                    },\\\\\\\\n                    \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": {\\\\\\\\n                      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n                    }\\\\\\\\n                  }\\\\\\\\n                }\\\\\\\\n              },\\\\\\\\n              \\\\\\\\\\\\\\\"create\\\\\\\\\\\\\\\": {\\\\\\\\n                \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"array\\\\\\\\\\\\\\\",\\\\\\\\n                \\\\\\\\\\\\\\\"items\\\\\\\\\\\\\\\": {\\\\\\\\n                  \\\\\\\\\\\\\\\"anyOf\\\\\\\\\\\\\\\": [\\\\\\\\n                    {\\\\\\\\n                      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\",\\\\\\\\n                      \\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\": {\\\\\\\\n                        \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": {\\\\\\\\n                          \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n                        },\\\\\\\\n                        \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": {\\\\\\\\n                          \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n                        },\\\\\\\\n                        \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": {\\\\\\\\n                          \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"array\\\\\\\\\\\\\\\",\\\\\\\\n                          \\\\\\\\\\\\\\\"items\\\\\\\\\\\\\\\": {\\\\\\\\n                            \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\",\\\\\\\\n                            \\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\": {\\\\\\\\n                              \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": {\\\\\\\\n                                \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n                              },\\\\\\\\n                              \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": {\\\\\\\\n                                \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n                              },\\\\\\\\n                              \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": {\\\\\\\\n                                \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"array\\\\\\\\\\\\\\\"\\\\\\\\n                              }\\\\\\\\n                            }\\\\\\\\n                          }\\\\\\\\n                        }\\\\\\\\n                      }\\\\\\\\n                    },\\\\\\\\n                    {\\\\\\\\n                      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\",\\\\\\\\n                      \\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\": {\\\\\\\\n                        \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": {\\\\\\\\n                          \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n                        },\\\\\\\\n                        \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": {\\\\\\\\n                          \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n                        },\\\\\\\\n                        \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": {\\\\\\\\n                          \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n                        }\\\\\\\\n                      }\\\\\\\\n                    }\\\\\\\\n                  ]\\\\\\\\n                }\\\\\\\\n              }\\\\\\\\n            }\\\\\\\\n          },\\\\\\\\n          \\\\\\\\\\\\\\\"branch\\\\\\\\\\\\\\\": {\\\\\\\\n            \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n          },\\\\\\\\n          \\\\\\\\\\\\\\\"commitMessage\\\\\\\\\\\\\\\": {\\\\\\\\n            \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n          },\\\\\\\\n          \\\\\\\\\\\\\\\"scripts\\\\\\\\\\\\\\\": {\\\\\\\\n            \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\": {\\\\\\\\n              \\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\": {\\\\\\\\n                \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n              },\\\\\\\\n              \\\\\\\\\\\\\\\"_id\\\\\\\\\\\\\\\": {\\\\\\\\n                \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n              },\\\\\\\\n              \\\\\\\\\\\\\\\"initiator\\\\\\\\\\\\\\\": {\\\\\\\\n                \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n              },\\\\\\\\n              \\\\\\\\\\\\\\\"scriptFiles\\\\\\\\\\\\\\\": {\\\\\\\\n                \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"array\\\\\\\\\\\\\\\",\\\\\\\\n                \\\\\\\\\\\\\\\"items\\\\\\\\\\\\\\\": {\\\\\\\\n                  \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\": {\\\\\\\\n                    \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": {\\\\\\\\n                      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n                    },\\\\\\\\n                    \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": {\\\\\\\\n                      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n                    }\\\\\\\\n                  }\\\\\\\\n                }\\\\\\\\n              },\\\\\\\\n              \\\\\\\\\\\\\\\"testFiles\\\\\\\\\\\\\\\": {\\\\\\\\n                \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"array\\\\\\\\\\\\\\\",\\\\\\\\n                \\\\\\\\\\\\\\\"items\\\\\\\\\\\\\\\": {\\\\\\\\n                  \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\": {\\\\\\\\n                    \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": {\\\\\\\\n                      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n                    },\\\\\\\\n                    \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": {\\\\\\\\n                      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n                    }\\\\\\\\n                  }\\\\\\\\n                }\\\\\\\\n              },\\\\\\\\n              \\\\\\\\\\\\\\\"yml\\\\\\\\\\\\\\\": {\\\\\\\\n                \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"array\\\\\\\\\\\\\\\",\\\\\\\\n                \\\\\\\\\\\\\\\"items\\\\\\\\\\\\\\\": {\\\\\\\\n                  \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\",\\\\\\\\n                  \\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\": {\\\\\\\\n                    \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": {\\\\\\\\n                      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n                    },\\\\\\\\n                    \\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\": {\\\\\\\\n                      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n                    }\\\\\\\\n                  }\\\\\\\\n                }\\\\\\\\n              }\\\\\\\\n            }\\\\\\\\n          },\\\\\\\\n          \\\\\\\\\\\\\\\"deleteArray\\\\\\\\\\\\\\\": {\\\\\\\\n            \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"array\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"items\\\\\\\\\\\\\\\": {\\\\\\\\n              \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n            }\\\\\\\\n          },\\\\\\\\n          \\\\\\\\\\\\\\\"packageJsonName\\\\\\\\\\\\\\\": {\\\\\\\\n            \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n          },\\\\\\\\n          \\\\\\\\\\\\\\\"packageJsonVersion\\\\\\\\\\\\\\\": {\\\\\\\\n            \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\"\\\\\\\\n          }\\\\\\\\n        }\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  },\\\\\\\\n  \\\\\\\\\\\\\\\"created\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"2022-04-08T16:14:08.678Z\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"created_by\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"provenance\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"local_aaa\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"username\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"admin@pronghorn\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"firstname\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"admin\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"inactive\\\\\\\\\\\\\\\": false,\\\\\\\\n    \\\\\\\\\\\\\\\"email\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n  },\\\\\\\\n  \\\\\\\\\\\\\\\"createdVersion\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"5.40.5-2021.1.72.0\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"tags\\\\\\\\\\\\\\\": [],\\\\\\\\n  \\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\": []\\\\\\\\n}\\\\\\\"\\\\n            }\\\\n          ]\\\\n        },\\\\n        {\\\\n          \\\\\\\"name\\\\\\\": \\\\\\\"json_forms\\\\\\\",\\\\n          \\\\\\\"type\\\\\\\": \\\\\\\"directory\\\\\\\",\\\\n          \\\\\\\"content\\\\\\\": []\\\\n        },\\\\n        {\\\\n          \\\\\\\"name\\\\\\\": \\\\\\\"forms\\\\\\\",\\\\n          \\\\\\\"type\\\\\\\": \\\\\\\"directory\\\\\\\",\\\\n          \\\\\\\"content\\\\\\\": []\\\\n        },\\\\n        {\\\\n          \\\\\\\"name\\\\\\\": \\\\\\\"templates\\\\\\\",\\\\n          \\\\\\\"type\\\\\\\": \\\\\\\"directory\\\\\\\",\\\\n          \\\\\\\"content\\\\\\\": [\\\\n            {\\\\n              \\\\\\\"name\\\\\\\": \\\\\\\"filesFormat.json\\\\\\\",\\\\n              \\\\\\\"type\\\\\\\": \\\\\\\"file\\\\\\\",\\\\n              \\\\\\\"content\\\\\\\": \\\\\\\"{\\\\\\\\n  \\\\\\\\\\\\\\\"_id\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"625dcb70acd5d400a6e45565\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"command\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"template\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"{%set finalOutput = {} %}\\\\\\\\\\\\\\\\n{%for file in artifact%}\\\\\\\\\\\\\\\\n{%if file.content is string%}\\\\\\\\\\\\\\\\n{%set _ = finalOutput.update({file.name: file.content}) %}\\\\\\\\\\\\\\\\n{%else%}\\\\\\\\\\\\\\\\n{%for file1 in file.content%}\\\\\\\\\\\\\\\\n{%if file1.content is string%}\\\\\\\\\\\\\\\\n{%set _ = finalOutput.update({\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"+ file.name + \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" + file1.name: file1.content}) %}\\\\\\\\\\\\\\\\n{%else%}\\\\\\\\\\\\\\\\n{%for file2 in file1.content%}\\\\\\\\\\\\\\\\n{%set _ = finalOutput.update({\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"+ file.name + \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" + file1.name + \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" + file2.name: file2.content}) %}\\\\\\\\\\\\\\\\n{%endfor%}\\\\\\\\\\\\\\\\n{%endif%}\\\\\\\\\\\\\\\\n{%endfor%}\\\\\\\\\\\\\\\\n{%endif%}\\\\\\\\\\\\\\\\n{%endfor%}\\\\\\\\\\\\\\\\n{%for file in scripts[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"scriptFiles\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]%}\\\\\\\\\\\\\\\\n{%set _ = finalOutput.update({\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/scripts/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" + file.name: file.content}) %}\\\\\\\\\\\\\\\\n{%endfor%}\\\\\\\\\\\\\\\\n{%for file in scripts[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"testFiles\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]%}\\\\\\\\\\\\\\\\n{%set _ = finalOutput.update({\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/test/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" + file.name: file.content}) %}\\\\\\\\\\\\\\\\n{%endfor%}\\\\\\\\\\\\\\\\n{%for file in scripts[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"yml\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]%}\\\\\\\\\\\\\\\\n{%set _ = finalOutput.update({file.name: file.content}) %}\\\\\\\\\\\\\\\\n{%endfor%}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n{%set _ = finalOutput.update({\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"branch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": branch}) %}\\\\\\\\\\\\\\\\n{%set _ = finalOutput.update({\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"message\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": commitMessage}) %}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n{% for key, value in finalOutput.items() %}\\\\\\\\\\\\\\\\n{%if key in deleteArray%}\\\\\\\\\\\\\\\\n{%set _ = deleteArray.remove(key)%}\\\\\\\\\\\\\\\\n{%endif%}\\\\\\\\\\\\\\\\n{% endfor %}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"add\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {{finalOutput | tojson }},\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"delete\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":{{deleteArray | tojson}} }\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"data\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"artifact\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\n[\\\\\\\\\\\\\\\\n  {\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"README.md\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\n  {\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"LICENSE\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Apache-2.0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\n  {\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"package.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/@psup/testprebuilt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"author\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Itential Automation Platform\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0.0.1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Test Sanjana\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"scripts\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"test\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Error: no test specified\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" && exit 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"deploy\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"echo not needed npm publish --access=public --registry=http://registry.npmjs.org\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"validateSchema\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"node test/manifestTester.js manifest.json manifest-schema.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"validateSchemaLinks\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"node test/manifestLinkTester.js manifest.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"generateImageLinks\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"node utils/generateImageLinks.js\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"repository\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"bitbucket\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"hostname\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"api.bitbucket.org\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"itentialdsup\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"keywords\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Itential\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"IAP\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"artifacts\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n ],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"license\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Apache-2.0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"devDependencies\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"r2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^2.0.1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ajv\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"6.10.0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"better-ajv-errors\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^0.6.1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"fs-extra\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^7.0.1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"IAPDependencies\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"@itential/app-workflow_engine\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"@itentialopensource/adapter-bitbucket\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"IAPCategories\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\n  {\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"bundles\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"directory\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\n      {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ac_agenda_jobs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"directory\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": []\\\\\\\\\\\\\\\\n      },\\\\\\\\\\\\\\\\n      {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"automations\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"directory\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": []\\\\\\\\\\\\\\\\n      },\\\\\\\\\\\\\\\\n      {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflows\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"directory\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\n          {\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Test1.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Test1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"automation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tasks\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_start\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_start\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 0,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 0.5\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_end\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_end\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 1,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 0.5\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"5d2e\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"newVariable\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"canvasName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"newVariable\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"summary\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Create a Job Variable\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Create a new Job variable by Job ID and assign it a value.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Application\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"locationType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": null,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"app\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"operation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"displayName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"variables\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"incoming\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"dummy\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"value\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": true\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"outgoing\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"value\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": null\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"deprecated\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": false,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 0.6925490196078431,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 0.44471153846153844\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"327d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"childJob\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"canvasName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"childJob\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"summary\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Run Child Job\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Runs a child job inside a workflow.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Application\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"locationType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": null,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"app\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"operation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"displayName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"WorkFlowEngine\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"variables\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"incoming\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"task\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Test2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"variables\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {},\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"data_array\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"transformation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"loopType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"outgoing\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"job_details\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": null\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"deprecated\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": false,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"actor\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"job\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 0.3349019607843137,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 0.49032258064516127\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"transitions\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_start\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"327d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"standard\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"state\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"success\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_end\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {},\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"5d2e\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_end\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"standard\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"state\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"success\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"327d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"5d2e\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"standard\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"state\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"success\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"font_size\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 12,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"last_updated\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"2022-04-27T16:53:41.371Z\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"last_updated_by\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"provenance\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"local_aaa\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"username\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"admin@pronghorn\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"firstname\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"admin\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"inactive\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": false,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"email\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"lastUpdatedVersion\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"5.40.5-2021.1.72.0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"inputSchema\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"outputSchema\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"_id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^[0-9a-f]{24}$\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"initiator\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"dummy\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"boolean\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"created\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"2022-04-08T16:13:39.641Z\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"created_by\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"provenance\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"local_aaa\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"username\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"admin@pronghorn\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"firstname\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"admin\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"inactive\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": false,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"email\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"createdVersion\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"5.40.5-2021.1.72.0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tags\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n          },\\\\\\\\\\\\\\\\n          {\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Test2.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Test2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"automation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tasks\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_start\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_start\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 0.403921568627451,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 0.3076923076923077\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_end\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_end\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 1,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 0.5\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"51fe\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"postRepositoriesUsernameRepoSlugSrc\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"canvasName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"postRepositoriesUsernameRepoSlugSrc\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"summary\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Creates a new repository.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNote: In order to set the project for the newly created repository,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\npass in either the project key or the project UUID as part of the\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nrequest body as shown in the examples below:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n$ curl -X POST -H \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Content-Type: application/json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" -d '{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"scm\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"git\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"project\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"key\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"MARS\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n}' https://api.bitbucket.org/2.0/repositories/teamsinspace/hablanding\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nor\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n$ curl -X POST -H \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Content-Type: application/json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" -d '{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"scm\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"git\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"project\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": ...(description truncated)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Creates a new repository.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNote: In order to set the project for the newly created repository,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\npass in either the project key or the project UUID as part of the\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nrequest body as shown in the examples below:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n$ curl -X POST -H \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Content-Type: application/json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" -d '{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"scm\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"git\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"project\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"key\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"MARS\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n}' https://api.bitbucket.org/2.0/repositories/teamsinspace/hablanding\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nor\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n$ curl -X POST -H \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Content-Type: application/json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" -d '{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"scm\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"git\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"project\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": ...(description truncated)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Adapter\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"locationType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Bitbucket\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"app\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Bitbucket\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"automatic\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"displayName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Bitbucket\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"variables\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"incoming\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"username\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"itentialdsup\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"repoSlug\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"test5\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"body\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{'files': ['manifest.json, 'package.json']}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"filename\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"attribute\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"adapter_id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"adapter-bitbucket\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"outgoing\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": null\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"error\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"decorators\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"deprecated\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": false,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"actor\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Pronghorn\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"x\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 0.6580392156862745,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 0.47596153846153844,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"scheduled\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": false\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"transitions\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_start\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"51fe\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"standard\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"state\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"success\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_end\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {},\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"51fe\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow_end\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"standard\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"state\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"success\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"font_size\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": 12,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"last_updated\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"2022-04-27T15:53:47.523Z\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"last_updated_by\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"provenance\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"local_aaa\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"username\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"admin@pronghorn\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"firstname\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"admin\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"inactive\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": false,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"email\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"lastUpdatedVersion\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"5.40.5-2021.1.72.0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"inputSchema\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"outputSchema\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"_id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^[0-9a-f]{24}$\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"initiator\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"created\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"2022-04-08T16:14:08.678Z\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"created_by\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"provenance\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"local_aaa\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"username\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"admin@pronghorn\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"firstname\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"admin\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"inactive\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": false,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"email\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"createdVersion\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"5.40.5-2021.1.72.0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tags\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"groups\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n          }\\\\\\\\\\\\\\\\n        ]\\\\\\\\\\\\\\\\n      },\\\\\\\\\\\\\\\\n      {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"json_forms\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"directory\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": []\\\\\\\\\\\\\\\\n      },\\\\\\\\\\\\\\\\n      {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"forms\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"directory\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": []\\\\\\\\\\\\\\\\n      },\\\\\\\\\\\\\\\\n      {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"templates\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"directory\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": []\\\\\\\\\\\\\\\\n      },\\\\\\\\\\\\\\\\n      {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"mop_templates\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"directory\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": []\\\\\\\\\\\\\\\\n      },\\\\\\\\\\\\\\\\n      {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"mop_analytic_templates\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"directory\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": []\\\\\\\\\\\\\\\\n      },\\\\\\\\\\\\\\\\n      {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ucm_golden_configs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"directory\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": []\\\\\\\\\\\\\\\\n      },\\\\\\\\\\\\\\\\n      {\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"transformations\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"directory\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": []\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\n    ]\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\n  {\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"manifest.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"bundleName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"@psup/testprebuilt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0.0.1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"fingerprint\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"6269760f8613af0078f10129\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"createdEpoch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"1651078671593\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"artifacts\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Test1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Test1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/bundles/workflows/Test1.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"entryPoint\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": false\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Test2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Test2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/bundles/workflows/Test2.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"entryPoint\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": false\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n ]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n],\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"branch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"master\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commitMessage\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"this is a commit message\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"scripts\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"complete\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"_id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"157ee33a5fbc4d9ca0b406fa\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"initiator\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"admin@pronghorn\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"scriptFiles\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\n    {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"generate.js\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"const path = require('path');\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nconst fs = require('fs');\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nconst files = ['package.json', 'manifest.json', 'README.md'];\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nlet success = true;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nconst PID = process.argv[2];\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nconst bitbucketUrl = process.argv[3];\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nconst bitbucketBranch = process.argv[4];\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nif (PID === null || PID == undefined) {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  console.error('Please run this script with Bitbucket Repo UUID as an argument');\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  process.exit(2);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nconsole.log(`Generating artifact.json file w/ ${PID} as Bitbucket Repo ID`);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n/*function fileTypetoType(fileType) {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  const underscoreToDash = fileType.replace(/_/g, '-');\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  if (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    fileType === 'ac_agenda_jobs' ||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    fileType === 'mop_templates' ||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    fileType === 'mop_analytic_templates' ||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    fileType === 'templates' ||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    fileType === 'workflows'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  ) {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    const singularize = underscoreToDash.substring(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      0,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      underscoreToDash.length - 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    );\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return singularize;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  if (fileType === 'catalog_store') {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return 'service-catalog';\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  return underscoreToDash;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n}*/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nconst filePath = __dirname.replace(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/scripts\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\");\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  const [packageJSON, manifest, readme] = files.map(entry => {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    const result = fs.readFileSync(path.join(filePath, `./${entry}`), {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      encoding: 'utf-8'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    });\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    console.log(result)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if (entry !== 'README.md') {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        const parsedRes = JSON.parse(result);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if (entry === 'manifest.json' && Object.prototype.hasOwnProperty.call(parsedRes, 'version')) {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          delete parsedRes.version;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      return parsedRes;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    } else {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      return result.replace(/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\//gm, `${bitbucketUrl}/raw/${bitbucketBranch}/`);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  });\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  // const result = fs.readdirSync(path.join(__dirname, './bundles'));\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  const bundles = [];\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  // result.forEach(entry => {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  //   console.log(`   ➡ generating ${entry}(s)`);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  //   const fileNames = fs.readdirSync(path.join(__dirname, `./bundles/${entry}`));\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  //   fileNames.forEach(file => {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  //     const data = fs.readFileSync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  //       path.join(__dirname, `./bundles/${entry}/${file}`),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  //       { encoding: 'utf-8' }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  //     );\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  //     try {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  //       bundles.push({ type: fileTypetoType(entry), data: JSON.parse(data) });\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  //       console.log(`     ⚪ ${file}   -   ✅`);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  //     } catch(err) {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  //       success = false;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  //       console.log(`     ⚪ ${file}   -   ❌  - ${err}`);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  //     }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  //   });\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  // });\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  const components = manifest.artifacts;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  components.forEach(file => {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      const data = fs.readFileSync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        path.join(filePath, `./${file.location}`),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        { encoding: 'utf-8' }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      );\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      bundles.push({ type: file.type, data: JSON.parse(data) });\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      console.log(`     ⚪ (${file.type})   -   ${file.location}   -   ✅`);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    } catch (err) {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      success = false;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      console.log(`     ⚪  (${file.type})   -   ${file.location}   -   ❌  - ${err}`);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  });\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  const metadata = {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    name: packageJSON.name,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    version: packageJSON.version,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    description: packageJSON.description,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    license: packageJSON.license,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    repository: packageJSON.repository,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    keywords: packageJSON.keywords,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    author: packageJSON.author,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    IAPDependencies: packageJSON.IAPDependencies,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  };\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  if (success) {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    console.log(`\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nFinished successfully`);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  } else {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    console.log(`\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nFinished with error(s)`);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    process.exit(1);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  const artifact = { metadata, manifest, bundles, readme };\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  fs.writeFileSync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    path.join(filePath, './artifact.json'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    JSON.stringify(artifact, null, 2)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  );\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n} catch (err) {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  console.error(`Failed to generate artifact.json file: ${err}`);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  process.exit(1);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\n    {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"commit.sh\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"if ! sh ./scripts/git_setup.sh; then\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  exit 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfi\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\necho \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"BITBUCKET PROJECT ID IS - $BITBUCKET_REPO_UUID\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ncd scripts\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nGENERATE=`node generate $BITBUCKET_REPO_UUID $BITBUCKET_GIT_HTTP_ORIGIN ${BITBUCKET_BRANCH}`\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nif [ $? -ne 0 ]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nthen \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  echo $GENERATE\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  exit 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfi\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ncd ..\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ngit add artifact.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ngit diff --cached --name-only | if grep artifact.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nthen\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    git commit -m \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"AUTO-GENERATED FILE [skip ci]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if ! git push origin \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"${BITBUCKET_BRANCH}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"; then\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      echo -e \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\033[0;31mERROR: ***********************************************************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ERROR: There was an issue pushing artifact.json.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      echo -e \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ERROR: ***********************************************************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\033[0m\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      exit 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"A new generated artifact.json file has been checked in to current branch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    fi   \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nelse\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"artifact.json file hasn't changed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfi\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\n    {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"create_release_script.sh\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#!/bin/bash\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#---------------------#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Create release note #\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#---------------------#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNEW_VERSION=$1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ncreate_release_note() {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Create a changelog file if there isn't one\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if [ ! -e CHANGELOG.md ]; then\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        touch CHANGELOG.md\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    fi\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Creating release note...\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    #----------------#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Changelog Body #\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    #----------------#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Get the merge request info\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    CHANGELOG_BODY=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$(git log --merges -1 --format=%b)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if [ -z \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$CHANGELOG_BODY\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" ]; then\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        CHANGELOG_BODY=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$(git log -1 --format='Bug fixes and performance improvements'%n%n'See commit '%h)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    fi\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    #--------------------#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Write Release Note #\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    #--------------------#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # get the current date\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    DATE=$(date +%m-%d-%Y)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # create the release note\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    RELEASE_NOTE=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n## $NEW_VERSION [$DATE]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n* $CHANGELOG_BODY\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n---\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # append Release Note to Top of CHANGELOG\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if ! echo -e \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$RELEASE_NOTE$(cat CHANGELOG.md)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" > CHANGELOG.md; then\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        echo -e \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\033[0;31mERROR: ***********************************************************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ERROR: Unable to append release note information to changelog.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        echo -e \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ERROR: ***********************************************************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\033[0m\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Created release note:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$RELEASE_NOTE\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    fi\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ncreate_release_note \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$NEW_VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\n    {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"deploy_artifact.sh\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#!/bin/bash\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# import the artifact\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nARTIFACT=$(cat artifact.json)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# echo $ARTIFACT\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# generate IAP token\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTOKEN=$(curl --silent --location --request POST 'http://localhost:3000/login' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n--header 'Content-Type: application/json' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n--data-raw '{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"user\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"username\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"admin@pronghorn\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"password\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"admin\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n}')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnode createPayload\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCREATE_RESP=$(curl --silent --location --request POST 'http://localhost:3000/prebuilts/import' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n--header 'Content-Type: application/json' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n--header \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Cookie: token=${TOKEN}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n--data-binary \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"@payload.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\necho $CREATE_RESP\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# if prebuild already exists, update existing\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nif [[ $CREATE_RESP == *\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"already exists\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"* ]]; then\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  PREBUILT=$(curl --silent --location --request GET 'http://localhost:3000/prebuilts?equals=@dsup/jennprebuilt&equalsField=name' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  --header \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Cookie: token=${TOKEN}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  --data-raw '')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  # echo $PREBUILT\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  echo $(grep '(?<=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")(.+)(?=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",)' artifact.json)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  echo $(grep '/(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\".+\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"){1}/' artifact.json)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  # node extractName $PREBUILT\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfi\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nrm payload.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# # # get prebuilts\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# # PREBUILTS=$(curl --silent --location --request GET 'http://localhost:3000/prebuilts?&equals=@dsup/jennprebuilt&equalsField=name' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# # --header \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Cookie: token=${TOKEN}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# # # echo $PREBUILTS\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\n    {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"git_setup.sh\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#!/bin/bash\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#-----------#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Git Setup #\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#-----------#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\necho \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Setting up git credentials\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nmkdir -p ~/.ssh\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ngit config --global user.email \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$CI_GIT_EMAIL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ngit config --global user.name \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$CI_GIT_USERNAME\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\necho -e $ID_RSA > ~/.ssh/id_rsa\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nchmod 0400 ~/.ssh/id_rsa\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\necho git config --list --show-origin\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\necho cat ~/.ssh/id_rsa\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\necho -e \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Host bitbucket.com\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\tStrictHostKeyChecking no\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\tLogLevel ERROR\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" >> ~/.ssh/config\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ngit remote set-url origin http://bitbucket.org/$BITBUCKET_REPO_FULL_NAME\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ngit remote -v\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\necho \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Git credentials configured.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ngit stash\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ngit checkout ${BITBUCKET_BRANCH}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nif ! git pull --rebase --tags; then \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    echo -e \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\033[0;31mERROR: ***********************************************************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ERROR: There was an issue connecting to remote. Check your credentials.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    echo -e \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ERROR: ***********************************************************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\033[0m\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    exit 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfi \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ngit reset --hard origin/${BITBUCKET_BRANCH}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\necho \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"${BITBUCKET_BRANCH} checked out.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\n    {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"node_setup.sh\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#!/bin/bash\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# check node version:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\necho \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"node version: $(node --version)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\necho \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"npm version: $(npm --version)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\necho \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Installing dependencies...\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nif [ ! -f package-lock.json ]; then\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    PRESENT='false'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    echo 'package-lock does not exist - generating one now.'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    npm i --package-lock-only\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nelse \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if ! npm ci -q --unsafe-perm; then\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        exit 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    fi\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfi\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nif [ -n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$PRESENT\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" ]; then\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    git add package-lock.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    git commit -m 'initialized package-lock.json [ci skip]'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfi\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\necho \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Dependencies installed.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\n    {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"promote.py\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"import requests\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport sys\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nhostname = os.environ.get(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"IAP_HOSTNAME\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nartifact_path = sys.argv[1]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# checking if IAP_PUSH_TO_LOCAL env var is set -> if not, default to True\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nif not (os.environ.get(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"IAP_PUSH_TO_LOCAL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  push_to_local = True\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nelse:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  push_to_local = True if os.environ.get(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"IAP_PUSH_TO_LOCAL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\").lower() == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" else False\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# checking if IAP_TOKEN is set -> if not, use basic auth login\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ntoken = os.environ.get(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"IAP_TOKEN\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nbasic_auth = False\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nif not token:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  basic_auth = True\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  username = os.environ.get(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"IAP_USERNAME\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  pw = os.environ.get(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"IAP_PW\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nif not (artifact_path and hostname and (token or (username and pw))):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Missing environmental variables.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMake sure your environmental variables are set properly.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nExiting...\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  sys.exit(1)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nartifact = json.load(open(f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{artifact_path}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Function Definitions\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Handles getting token to authenticate into IAP\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_token():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Getting auth token\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  url = f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{hostname}/login\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  payload = json.dumps({\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"user\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"username\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": username,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"password\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": pw\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  })\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  response = requests.request(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    url, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    headers={'Content-Type': 'application/json'},\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    data=payload)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  if not response.status_code // 100 == 2:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    raise Exception(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Error: Unexpected response {}: Failed to get auth token\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\".format(response.text))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  else: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return response.text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Checks if prebuilt already exists\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_prebuilt(name):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  print(f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Retrieving prebuilt: {name}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  url = f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{hostname}/prebuilts?equals={name}&equalsField=name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  response = requests.request(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"GET\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    url,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    headers={'Cookie': f'token={token}'})\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  if not response.status_code // 100 == 2:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    raise Exception(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Error: Unexpected response {}: Failed to get prebuilt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\".format(response.text))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  else: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return response.text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef add_prebuilt(payload): \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Prebuilt does not exist yet - adding to IAP\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  url = f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{hostname}/prebuilts/import\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  headers = {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    'Content-Type': 'application/json',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    'Cookie': f'token={token}'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  response = requests.request(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    url,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    headers=headers,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    data=payload)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  if \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Invalid repository configuration\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" in response.text:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Failed to promote to original repository, pushing to local scope.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    updated_payload = json.loads(payload)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    updated_payload[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"prebuilt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"repository\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"] = {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"local\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"hostname\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"localhost\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    response = requests.request(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      url,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      headers=headers,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      data=json.dumps(updated_payload))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  if not response.status_code // 100 == 2:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    raise Exception(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Error: Unexpected response {}: Failed to add prebuilt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\".format(response.text))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  else: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Successfully added prebuilt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return response.text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef update_prebuilt(id, payload):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Updating existing prebuilt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  url = f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{hostname}/prebuilts/{id}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  headers = {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    'Content-Type': 'application/json',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    'Cookie': f'token={token}'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  response = requests.request(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"PUT\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    url,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    headers=headers,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    data=payload)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  if \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Invalid repository configuration\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" in response.text:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Failed to promote to original repository, pushing to local scope.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    updated_payload = json.loads(payload)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    updated_payload[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"prebuilt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"repository\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"] = {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"local\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"hostname\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"localhost\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    response = requests.request(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"PUT\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      url,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      headers=headers,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      data=json.dumps(updated_payload))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  if not response.status_code // 100 == 2:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      raise Exception(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Error: Unexpected response {}: Failed to update prebuilt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\".format(response.text))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  else: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Successfully updated prebuilt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return response.text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef logout():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Logging out of IAP\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  url = f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{hostname}/login?logout=true\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  headers = {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    'Content-Type': 'application/json',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    'Cookie': f'token={token}'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  response = requests.request(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"GET\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    url,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    headers=headers)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  response = requests.request(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"GET\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", url, headers=headers)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Script starts here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ntry: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  if (basic_auth):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    token = get_token()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  # Set name of prebuilt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  name = artifact[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  results = get_prebuilt(name)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  if push_to_local:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Setting artifact.json repository configuration to local\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    artifact[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"repository\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"] = {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"local\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"hostname\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"localhost\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print('Promoting to local scope in IAP')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  payload = json.dumps({\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"prebuilt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": artifact,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"options\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"overwrite\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": True \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  })\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  # if prebuilt doesn't exist, add it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  if json.loads(results)[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"total\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"] == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    response = add_prebuilt(payload)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  else: # if prebuilt exists, update it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      id = json.loads(results)[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"results\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"][0][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"_id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      update_prebuilt(id, payload)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  # logging out\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  logout()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nexcept requests.exceptions.RequestException as e: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  # A serious problem happened, like an SSLError or InvalidURL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Error: {}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\".format(e))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  sys.exit(1)  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nexcept: # error handling to catch any errors that throw a non 200 code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  e = sys.exc_info()[1]    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  print(e)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  sys.exit(1)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\n    {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ver_bump.sh\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#!/bin/bash\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#-------------------#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Get Semver Prefix #\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#-------------------#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nVERSION=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$(git log --format=%s --merges -1|awk -F\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" '{print $2}'|awk -F \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" '{print $1}')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ncase \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" in\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # if PATCH transform to patch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    patch|minor|major) SEMVER=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$(echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" | awk '{print tolower($0)}')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\";;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    *) SEMVER=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"patch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\";;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nesac\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nif [ -z \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" ]; then\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"No branch prefix detected. Defaulting to patch.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfi\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\necho \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Semver bump: $SEMVER\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#---------------------#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Get Current Version #\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#---------------------#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCURRENT_VERSION=$(node -p \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"require('./package.json').version\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\necho \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Last version: $CURRENT_VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCURRENT_MAJOR=$(echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$CURRENT_VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"|awk -F'.' '{print $1}')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCURRENT_MINOR=$(echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$CURRENT_VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"|awk -F'.' '{print $2}')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCURRENT_PATCH=$(echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$CURRENT_VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"|awk -F'.' '{print $3}'|awk -F'-' '{print $1}')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCURRENT_PRERELEASE=$(echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$CURRENT_VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"|awk -F'-' '{print $2}')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# if [[ $CURRENT_VERSION != *\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"+\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"* ]]; then\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#     CURRENT_PATCH=$(echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$CURRENT_VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"|awk -F'.' '{print $3}'|awk -F'-' '{print $1}')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#     CURRENT_PRERELEASE=$(echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$CURRENT_VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"|awk -F'-' '{print $2}')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# else\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#     CURRENT_PATCH=$(echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$CURRENT_VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"|awk -F'.' '{print $3}'|awk -F'+' '{print $1}')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#     CURRENT_PRERELEASE=$(echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$CURRENT_VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"|awk -F'+' '{print $2}')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# fi \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#---------------------------#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Version & Release Package #\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#---------------------------#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# create release note before versioning the project\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nsh ./scripts/create_release_script.sh \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$NEW_VERSION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# explicitly add the change log to the version bump commit\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ngit add CHANGELOG.md\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\necho \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Bumping version...\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# bump version, git tag, commit & then push changes\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# using -f to ignore the added release note\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnpm version -f \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$SEMVER\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" -m \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Updating $SEMVER version to %s. [skip ci]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" --loglevel=error\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\necho \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Version bump successful\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# push to gitlab\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# no-verify is used to ignore any pre-push commits that may be used by the project\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nif git push -f --tags origin ${BITBUCKET_BRANCH} --follow-tags --no-verify; then\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Version bump pushed successfully.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nelse\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    echo -e \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\033[0;31mERROR: ***********************************************************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ERROR: Failed to push.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    echo -e \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ERROR: ***********************************************************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\033[0m\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    exit 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfi\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  ],\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"testFiles\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\n    {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"manifest-schema.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$schema\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"http://json-schema.org/draft-07/schema#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"iap-artifact-bundle\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Artifact Bundle Schema\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": null,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"additionalProperties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": false,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"definitions\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tagged\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/properties/properties/tagged\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"array\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Tagged Item\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"These are the items that need to be tagged\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"uniqueItems\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": true,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"items\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/properties/properties/tagged/items\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Tagged Items\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"examples\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"mop-example-1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"mop-analytic-example-1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow-example-1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^(.*)$\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"required\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"bundleName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"createdEpoch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"artifacts\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  ],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"bundleName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/bundleName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Bundle Name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Unique identifier for this bundle of artifacts.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"examples\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ExampleBundle\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      ],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^(.*)$\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/version\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Version\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The version of this bundle\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"examples\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"1.2.3\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      ],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^(.*)$\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"fingerprint\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/fingerprint\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Fingerprint\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"For use in future implementations of  installable modules where additional security measures need to be implemented. \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"examples\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Some verifiable token\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      ],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^(.*)$\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"createdEpoch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/createdEpoch\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Created Time\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The date, in milliseconds since the unix epoch, for when this bundle was created/updated. Usually this is value of Date.now() or calling getTime() on a js Date object\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"examples\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"1554836984020\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"result from Date.now()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      ],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^(.*)$\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"artifacts\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/artifacts\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"array\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Artifacts \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"List of artifacts in this bundle. Note that each item must be unique and duplicates will fail validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": null,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"uniqueItems\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": true,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"items\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/artifacts/items\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Artifact items\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": null,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"additionalProperties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": false,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/artifacts/items/properties/id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Artifact Id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Unique Id identifying this artifact. \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"examples\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow-example-1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"mop-template-1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^(.*)$\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/artifacts/items/properties/name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Artifact Name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Name identifying this artifact\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"examples\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"My Worflow1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^(.*)$\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/artifacts/items/properties/type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"enum\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"mop-analytic-template\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"mop-template\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"json-forms\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tag\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"template\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"forms\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"golden-config\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"service-catalog\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ac-agenda-job\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"adapter\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"app\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"transformation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Artifact Type \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The type of artifact(s) this entry encompasses. Must be one of the supported types listed in the enum\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"examples\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"mop-analytic-template\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"mop-template\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"workflow\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tag\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"forms\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"golden-config\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^(.*)$\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/artifacts/items/properties/location\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Artifact Location\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Path, relative to the root of this bundle, to either a specific artifact file or a directory of artifacts of a specific type. Future implementations may allow for URLs to external assets\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"examples\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/bundles/ExampleBundle/workflow/myWorkflow1.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/bundles/workflows/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^(.*)$\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/artifacts/items/properties/description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Description \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The description of what this artifact is \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"examples\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"This artifact does things and stuff\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pattern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"^(.*)$\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/properties/artifacts/items/properties/properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"The Properties Schema\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Additional properties that may be needed for a type during it's installations\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tagged\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"$ref\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"#/definitions/tagged\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"if\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"enum\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"tag\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              ]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"then\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"required\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          ]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        },\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"else\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"required\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          ]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\n    {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"manifestLinkTester.js\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"const path = require('path'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      fs = require('fs-extra');\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nconst args = process.argv.filter((element, index) => {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  return index >=2;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n});\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nif (args.length <= 0) {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  const usage = `\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  ==============================================================\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Simplified manifest schema validator, using ajv,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    that can be used for very quick schema validations.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    This will validate a json file against the schema\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    found in manifest-schema.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Usage: node manifestTester.js someManifestFile.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    NOTE: for a graphical JSON schema validator go to\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    https://www.jsonschemavalidator.net/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  ==============================================================`;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  console.log(usage);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  process.exit(1);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nasync function runLinkValidation() {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  const filePath = path.normalize(args[0]);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  console.log(`Retrieving ${filePath}`);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  const manifest = await fs.readFile(filePath, 'utf8');\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  console.log('Converting to JSON object');\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  const data = JSON.parse(manifest);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  console.log('Iterating through artifacts...');\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  let valid=true;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  for (let i=0; i<data.artifacts.length; i++){\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    const current = data.artifacts[i].location;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if (current){\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      if (fs.existsSync(`./${current}`)){\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        console.log(`\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\t✅  Validating ${current}`);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      else{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        console.log(`\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\t❌  Validating ${current}`);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        valid = false;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  if (!valid) {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    console.error('Validation Failed  👎');\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    process.exit(1);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  else {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    console.log('Validation passed  👍');\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  runLinkValidation();\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ncatch(error) {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  console.error(`Error occurred running the validator ${error}`);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\n    {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"manifestTester.js\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"const AJV = require('ajv'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  path = require('path'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  fs = require('fs-extra'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  r2 = require('r2'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  betterAjvErrors = require('better-ajv-errors');\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nconst ajv = new AJV({\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  jsonPointers: true,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  allErrors: true\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n});\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nconst args = process.argv.filter((element, index) => {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  return index >= 2;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n});\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nif (args.length != 2) {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  const usage = `\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  ==============================================================\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Simplified manifest schema validator, using ajv,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    that can be used for very quick schema validations.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    This will validate a json file against the schema\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    found in manifest-schema.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Examples:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Usage: node manifestTester.js someManifestFile.json PATH/TO/SCHEMA/FILE.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Usage: node manifestTester.js someManifestFile.json http://www.PATH.TO/SCHEMA/FILE.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    NOTE: for a graphical JSON schema validator go to\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    https://www.jsonschemavalidator.net/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  ==============================================================`;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  console.log(usage);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  process.exit(1);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nasync function runValidation() {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  let schema;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  if (args[1].includes(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"http\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")) {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    schema = await r2(args[1]).json;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  else {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    schema = require(path.join(__dirname, args[1]));\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  // console.log(`the schema is : ${JSON.stringify(schema)}`)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  const filePath = path.normalize(args[0]);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  console.log(`Retrieving ${filePath}`);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  try {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    const manifest = await fs.readFile(filePath, 'utf8');\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    console.log('Converting to JSON object');\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    const data = JSON.parse(manifest);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    console.log('Initializing AJV with schema');\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    ajv.addSchema(schema, 'manifestSchema');\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    console.log(`Validating ${filePath} against the schema`);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    var valid = ajv.validate('manifestSchema', data);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if (!valid) {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      console.error('❌  Validation Failed');\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      const output = betterAjvErrors(schema, data, ajv.errors, { format: 'js' });\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      console.log(output);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      process.exit(1);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n      console.log('✅  Validation passed');\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  catch (error) {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    console.error(error);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    process.exit(1);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  runValidation();\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ncatch (error) {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  console.error(`❌  Error occurred running the validator ${error}`);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  process.exit(1);\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  ],\\\\\\\\\\\\\\\\n  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"yml\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\n    {\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"bitbucket-pipelines.yml\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"image: atlassian/default-image:3\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nservices:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  - docker:dind\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nafter_script:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  - rm -rf ~/.ssh\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\npipelines:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n  default:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    - step:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        name: 'quality'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        runs-on:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - self.hosted\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - linux\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        image: alpine:3.15\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        allow_failure: true\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        script:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - npm i\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          # check node version:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - 'echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"node version: $(node --version)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          # check npm version\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - 'echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"npm version: $(npm --version)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - npm audit fix --force\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - npm audit --registry=https://registry.npmjs.org\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    - step:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        name: 'test'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        runs-on:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - self.hosted\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - linux\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        image: alpine:3.15\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        allow_failure: false\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        script:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - npm i\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          # check node version:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - 'echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"node version: $(node --version)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          # check npm version\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - 'echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"npm version: $(npm --version)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - npm run validateSchema\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - npm i\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          # check node version:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - 'echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"node version: $(node --version)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          # check npm version\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - 'echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"npm version: $(npm --version)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - npm run validateSchemaLinks\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    - step:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        name: 'bump'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        runs-on:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - self.hosted\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - linux\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        image: alpine:3.15\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        only:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - master\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        script:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - sh ./scripts/git_setup.sh\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - sh ./scripts/node_setup.sh\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - sh ./scripts/ver_bump.sh\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    - step:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        name: 'generate'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        runs-on:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - self.hosted\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - linux\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        image: alpine:3.15\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        allow_failure: false\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        artifacts:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          paths:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - artifact.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          expire_in: 5 mins \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        script:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - sh ./scripts/commit.sh\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    - step:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        name: 'promote'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        runs-on:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - self.hosted\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - linux\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        image: python:3.10.11\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        allow_failure: false\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        only:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - master\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        dependencies: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - generate_artifact_json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        script:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - pip3 install requests\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n          - |\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if ! python3 ./scripts/promote.py ./artifact.json; then\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              echo -e \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\033[0;31mERROR: ***********************************************************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ERROR: There was an issue promoting artifact.json to IAP.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              echo -e \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ERROR: ***********************************************************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\033[0m\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n              exit 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            fi \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  ]\\\\\\\\\\\\\\\\n},\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"deleteArray\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"manifest.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/bundles/workflows/Test1.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/bundles/workflows/Test2.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"new.json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"],\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"packageJsonName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"dsup@test\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"packageJsonVersion\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0.0.1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"jinja2\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"filesFormat\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"BitBucket\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"created\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"2022-04-27T19:57:07.628Z\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"lastUpdated\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"2022-04-27T19:57:07.628Z\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"createdBy\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"_id\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"624f0978d31d7774a0ea7462\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"provenance\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"local_aaa\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"username\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"admin@pronghorn\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"firstname\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"admin\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"inactive\\\\\\\\\\\\\\\": false,\\\\\\\\n    \\\\\\\\\\\\\\\"email\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n  },\\\\\\\\n  \\\\\\\\\\\\\\\"lastUpdatedBy\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"_id\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"624f0978d31d7774a0ea7462\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"provenance\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"local_aaa\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"username\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"admin@pronghorn\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"firstname\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"admin\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"inactive\\\\\\\\\\\\\\\": false,\\\\\\\\n    \\\\\\\\\\\\\\\"email\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n  }\\\\\\\\n}\\\\\\\"\\\\n            }\\\\n          ]\\\\n        },\\\\n        {\\\\n          \\\\\\\"name\\\\\\\": \\\\\\\"mop_templates\\\\\\\",\\\\n          \\\\\\\"type\\\\\\\": \\\\\\\"directory\\\\\\\",\\\\n          \\\\\\\"content\\\\\\\": []\\\\n        },\\\\n        {\\\\n          \\\\\\\"name\\\\\\\": \\\\\\\"mop_analytic_templates\\\\\\\",\\\\n          \\\\\\\"type\\\\\\\": \\\\\\\"directory\\\\\\\",\\\\n          \\\\\\\"content\\\\\\\": []\\\\n        },\\\\n        {\\\\n          \\\\\\\"name\\\\\\\": \\\\\\\"ucm_golden_configs\\\\\\\",\\\\n          \\\\\\\"type\\\\\\\": \\\\\\\"directory\\\\\\\",\\\\n          \\\\\\\"content\\\\\\\": []\\\\n        },\\\\n        {\\\\n          \\\\\\\"name\\\\\\\": \\\\\\\"transformations\\\\\\\",\\\\n          \\\\\\\"type\\\\\\\": \\\\\\\"directory\\\\\\\",\\\\n          \\\\\\\"content\\\\\\\": []\\\\n        }\\\\n      ]\\\\n    },\\\\n    {\\\\n      \\\\\\\"name\\\\\\\": \\\\\\\"manifest.json\\\\\\\",\\\\n      \\\\\\\"type\\\\\\\": \\\\\\\"file\\\\\\\",\\\\n      \\\\\\\"content\\\\\\\": \\\\\\\"{\\\\\\\\n  \\\\\\\\\\\\\\\"bundleName\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"@psup/bitbuckettest\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"0.0.1\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"fingerprint\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"6269a53d8613af0078f10135\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"createdEpoch\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"1651090749489\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"artifacts\\\\\\\\\\\\\\\": [\\\\\\\\n    {\\\\\\\\n      \\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Test1\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Test1\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"workflow\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"/bundles/workflows/Test1.json\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"entryPoint\\\\\\\\\\\\\\\": false\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    {\\\\\\\\n      \\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Test2\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Test2\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"workflow\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"/bundles/workflows/Test2.json\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"entryPoint\\\\\\\\\\\\\\\": false\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    {\\\\\\\\n      \\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"filesFormat\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"filesFormat\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"template\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"location\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"/bundles/templates/filesFormat.json\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"properties\\\\\\\\\\\\\\\": {\\\\\\\\n        \\\\\\\\\\\\\\\"entryPoint\\\\\\\\\\\\\\\": false\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  ]\\\\\\\\n}\\\\\\\"\\\\n    }\\\\n  ],\\\\n  \\\\\\\"branch\\\\\\\": \\\\\\\"ad6b6665650c0b6875a823b6812162f5c6d0c254\\\\\\\",\\\\n  \\\\\\\"commitMessage\\\\\\\": \\\\\\\"change\\\\\\\",\\\\n  \\\\\\\"deleteFiles\\\\\\\": [\\\\n    \\\\\\\"/manifest.json\\\\\\\",\\\\n    \\\\\\\"bundles/templates/filesFormat.json\\\\\\\",\\\\n    \\\\\\\"bundles/workflows/Test1.json\\\\\\\",\\\\n    \\\\\\\"bundles/workflows/Test2.json\\\\\\\"\\\\n  ],\\\\n  \\\\\\\"scripts\\\\\\\": {}\\\\n}\\\",\\n  \\\"type\\\": \\\"jinja2\\\",\\n  \\\"name\\\": \\\"filesFormat\\\",\\n  \\\"description\\\": \\\"\\\",\\n  \\\"group\\\": \\\"BitBucket\\\",\\n  \\\"created\\\": \\\"2022-04-28T13:52:46.249Z\\\",\\n  \\\"lastUpdated\\\": \\\"2022-04-28T13:52:46.249Z\\\",\\n  \\\"createdBy\\\": {\\n    \\\"_id\\\": \\\"624f0978d31d7774a0ea7462\\\",\\n    \\\"provenance\\\": \\\"local_aaa\\\",\\n    \\\"username\\\": \\\"admin@pronghorn\\\",\\n    \\\"firstname\\\": \\\"admin\\\",\\n    \\\"inactive\\\": false,\\n    \\\"email\\\": \\\"\\\"\\n  },\\n  \\\"lastUpdatedBy\\\": {\\n    \\\"_id\\\": \\\"624f0978d31d7774a0ea7462\\\",\\n    \\\"provenance\\\": \\\"local_aaa\\\",\\n    \\\"username\\\": \\\"admin@pronghorn\\\",\\n    \\\"firstname\\\": \\\"admin\\\",\\n    \\\"inactive\\\": false,\\n    \\\"email\\\": \\\"\\\"\\n  }\\n}\"\n            }\n          ]\n        },\n        {\n          \"name\": \"mop_templates\",\n          \"type\": \"directory\",\n          \"content\": []\n        },\n        {\n          \"name\": \"mop_analytic_templates\",\n          \"type\": \"directory\",\n          \"content\": []\n        },\n        {\n          \"name\": \"ucm_golden_configs\",\n          \"type\": \"directory\",\n          \"content\": []\n        },\n        {\n          \"name\": \"transformations\",\n          \"type\": \"directory\",\n          \"content\": []\n        }\n      ]\n    },\n    {\n      \"name\": \"manifest.json\",\n      \"type\": \"file\",\n      \"content\": \"{\\n  \\\"bundleName\\\": \\\"@psup/finalbitbuckettest\\\",\\n  \\\"version\\\": \\\"0.0.1\\\",\\n  \\\"fingerprint\\\": \\\"626aadd78613af0078f1013d\\\",\\n  \\\"createdEpoch\\\": \\\"1651158487525\\\",\\n  \\\"artifacts\\\": [\\n    {\\n      \\\"id\\\": \\\"Test1\\\",\\n      \\\"name\\\": \\\"Test1\\\",\\n      \\\"type\\\": \\\"workflow\\\",\\n      \\\"location\\\": \\\"/bundles/workflows/Test1.json\\\",\\n      \\\"properties\\\": {\\n        \\\"entryPoint\\\": false\\n      }\\n    },\\n    {\\n      \\\"id\\\": \\\"Test2\\\",\\n      \\\"name\\\": \\\"Test2\\\",\\n      \\\"type\\\": \\\"workflow\\\",\\n      \\\"location\\\": \\\"/bundles/workflows/Test2.json\\\",\\n      \\\"properties\\\": {\\n        \\\"entryPoint\\\": false\\n      }\\n    },\\n    {\\n      \\\"id\\\": \\\"filesFormat\\\",\\n      \\\"name\\\": \\\"filesFormat\\\",\\n      \\\"type\\\": \\\"template\\\",\\n      \\\"location\\\": \\\"/bundles/templates/filesFormat.json\\\",\\n      \\\"properties\\\": {\\n        \\\"entryPoint\\\": false\\n      }\\n    }\\n  ]\\n}\"\n    }\n  ],\n  \"branch\": \"minor/2022-04-28T10-08-07\",\n  \"commitMessage\": \"delete var\",\n  \"deleteFiles\": [\n    \"manifest.json\",\n    \"bundles/templates/filesFormat.json\",\n    \"bundles/workflows/Test1.json\",\n    \"bundles/workflows/Test2.json\"\n  ],\n  \"scripts\": {}\n}\n",
        "group": "BitBucket",
        "description": "",
        "created": "2023-07-10T20:01:07.234Z",
        "lastUpdated": "2025-02-06T18:32:44.137Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false
        },
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false
        }
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "605a0b9299ae1b00eb7c74e9",
        "name": "convertObjecttoString",
        "description": "",
        "incoming": [
          {
            "$id": "inputObject",
            "type": "object",
            "properties": {
              "action": {
                "type": "string",
                "examples": [
                  "Create"
                ]
              },
              "file_path": {
                "type": "string",
                "examples": [
                  "bundles/transformations/filterArrayOfObjects%2Ejson"
                ]
              },
              "content": {
                "type": "string",
                "examples": [
                  "{\n  \"_id\": \"5f08c8b5fd7aaf755869ff35\",\n  \"name\": \"filterArrayOfObjects\",\n  \"incoming\": [\n    {\n      \"$id\": \"filterableArray\",\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\": [],\n        \"additionalProperties\": true\n      }\n    },\n    {\n      \"$id\": \"keyToFilterOn\",\n      \"type\": \"string\",\n      \"default\": \"keyToFilterOn\",\n      \"examples\": [\n        \"keyToFilterOn\"\n      ]\n    },\n    {\n      \"$id\": \"valueToFind\",\n      \"type\": \"string\",\n      \"default\": \"valueToFind\",\n      \"examples\": [\n        \"valueToFind\"\n      ]\n    },\n    {\n      \"$id\": \"discardMatching\",\n      \"type\": \"boolean\",\n      \"examples\": [\n        true,\n        false\n      ]\n    }\n  ],\n  \"outgoing\": [\n    {\n      \"$id\": \"filteredArray\",\n      \"type\": \"array\"\n    },\n    {\n      \"$id\": \"firstFilteredElement\",\n      \"type\": \"object\",\n      \"properties\": {},\n      \"required\": []\n    }\n  ],\n  \"steps\": [\n    {\n      \"id\": 6,\n      \"type\": \"assign\",\n      \"from\": {\n        \"location\": \"incoming\",\n        \"name\": \"filterableArray\",\n        \"ptr\": \"\"\n      },\n      \"to\": {\n        \"location\": \"method\",\n        \"name\": 1,\n        \"ptr\": \"/args/0/value\"\n      }\n    },\n    {\n      \"id\": 7,\n      \"type\": \"assign\",\n      \"from\": {\n        \"location\": \"incoming\",\n        \"name\": \"keyToFilterOn\",\n        \"ptr\": \"\"\n      },\n      \"to\": {\n        \"location\": \"method\",\n        \"name\": 1,\n        \"ptr\": \"/args/2/value\"\n      }\n    },\n    {\n      \"id\": 8,\n      \"type\": \"assign\",\n      \"from\": {\n        \"location\": \"incoming\",\n        \"name\": \"valueToFind\",\n        \"ptr\": \"\"\n      },\n      \"to\": {\n        \"location\": \"method\",\n        \"name\": 1,\n        \"ptr\": \"/args/3/value\"\n      }\n    },\n    {\n      \"id\": 9,\n      \"type\": \"assign\",\n      \"from\": {\n        \"location\": \"incoming\",\n        \"name\": \"discardMatching\",\n        \"ptr\": \"\"\n      },\n      \"to\": {\n        \"location\": \"method\",\n        \"name\": 1,\n        \"ptr\": \"/args/4/value\"\n      }\n    },\n    {\n      \"id\": 1,\n      \"type\": \"method\",\n      \"library\": \"Array\",\n      \"method\": \"filter\",\n      \"args\": [\n        null,\n        \"ƒ_query_1\",\n        null,\n        null,\n        null\n      ],\n      \"view\": {\n        \"row\": 1,\n        \"col\": 1\n      }\n    },\n    {\n      \"id\": 3,\n      \"type\": \"assign\",\n      \"from\": {\n        \"location\": \"method\",\n        \"name\": 1,\n        \"ptr\": \"/return\"\n      },\n      \"to\": {\n        \"location\": \"method\",\n        \"name\": 2,\n        \"ptr\": \"/args/0/value\"\n      }\n    },\n    {\n      \"id\": 5,\n      \"type\": \"assign\",\n      \"from\": {\n        \"location\": \"method\",\n        \"name\": 1,\n        \"ptr\": \"/return\"\n      },\n      \"to\": {\n        \"location\": \"outgoing\",\n        \"name\": \"filteredArray\",\n        \"ptr\": \"\"\n      }\n    },\n    {\n      \"id\": 2,\n      \"type\": \"method\",\n      \"library\": \"Array\",\n      \"method\": \"getIndex\",\n      \"args\": [\n        null,\n        0\n      ],\n      \"view\": {\n        \"row\": 2,\n        \"col\": 2\n      }\n    },\n    {\n      \"id\": 4,\n      \"type\": \"assign\",\n      \"from\": {\n        \"location\": \"method\",\n        \"name\": 2,\n        \"ptr\": \"/return\"\n      },\n      \"to\": {\n        \"location\": \"outgoing\",\n        \"name\": \"firstFilteredElement\",\n        \"ptr\": \"\"\n      }\n    }\n  ],\n  \"functions\": [\n    {\n      \"incoming\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {},\n          \"required\": [],\n          \"additionalProperties\": true,\n          \"$id\": \"element\"\n        },\n        {\n          \"title\": \"index\",\n          \"type\": \"number\",\n          \"$id\": \"index\"\n        },\n        {\n          \"$id\": \"array\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {},\n            \"required\": [],\n            \"additionalProperties\": true\n          }\n        },\n        {\n          \"$id\": \"thisArg\",\n          \"type\": \"object\",\n          \"properties\": {\n            \"keyToFilterOn\": {\n              \"$id\": \"keyToFilterOn\",\n              \"type\": \"string\",\n              \"default\": \"keyToFilterOn\",\n              \"examples\": [\n                \"keyToFilterOn\"\n              ]\n            },\n            \"valueToFind\": {\n              \"$id\": \"valueToFind\",\n              \"type\": \"string\",\n              \"default\": \"valueToFind\",\n              \"examples\": [\n                \"valueToFind\"\n              ]\n            },\n            \"discardMatching\": {\n              \"$id\": \"discardMatching\",\n              \"type\": \"boolean\",\n              \"examples\": [\n                true,\n                false\n              ]\n            }\n          },\n          \"isContext\": true\n        }\n      ],\n      \"outgoing\": [\n        {\n          \"title\": \"return\",\n          \"type\": \"boolean\",\n          \"$id\": \"return\"\n        }\n      ],\n      \"functions\": [],\n      \"name\": \"ƒ_query_1\",\n      \"steps\": [\n        {\n          \"id\": 2,\n          \"type\": \"assign\",\n          \"from\": {\n            \"location\": \"incoming\",\n            \"name\": \"element\",\n            \"ptr\": \"\"\n          },\n          \"to\": {\n            \"location\": \"method\",\n            \"name\": 1,\n            \"ptr\": \"/args/0/value\"\n          }\n        },\n        {\n          \"id\": 3,\n          \"type\": \"assign\",\n          \"from\": {\n            \"location\": \"incoming\",\n            \"name\": \"thisArg\",\n            \"ptr\": \"/keyToFilterOn\"\n          },\n          \"to\": {\n            \"location\": \"method\",\n            \"name\": 1,\n            \"ptr\": \"/args/1/value\"\n          }\n        },\n        {\n          \"id\": 15,\n          \"type\": \"assign\",\n          \"from\": {\n            \"location\": \"incoming\",\n            \"name\": \"thisArg\",\n            \"ptr\": \"/discardMatching\"\n          },\n          \"to\": {\n            \"location\": \"method\",\n            \"name\": 14,\n            \"ptr\": \"/args/0/value\"\n          }\n        },\n        {\n          \"id\": 31,\n          \"type\": \"assign\",\n          \"from\": {\n            \"location\": \"incoming\",\n            \"name\": \"thisArg\",\n            \"ptr\": \"/discardMatching\"\n          },\n          \"to\": {\n            \"location\": \"method\",\n            \"name\": 10,\n            \"ptr\": \"/args/1/value\"\n          }\n        },\n        {\n          \"id\": 34,\n          \"type\": \"assign\",\n          \"from\": {\n            \"location\": \"incoming\",\n            \"name\": \"thisArg\",\n            \"ptr\": \"/valueToFind\"\n          },\n          \"to\": {\n            \"location\": \"method\",\n            \"name\": 32,\n            \"ptr\": \"/args/1/value\"\n          }\n        },\n        {\n          \"id\": 14,\n          \"type\": \"method\",\n          \"library\": \"Logical\",\n          \"method\": \"not\",\n          \"args\": [\n            null\n          ],\n          \"view\": {\n            \"row\": 2,\n            \"col\": 2\n          }\n        },\n        {\n          \"id\": 1,\n          \"type\": \"method\",\n          \"library\": \"Object\",\n          \"method\": \"getProperty\",\n          \"args\": [\n            null,\n            null\n          ],\n          \"view\": {\n            \"row\": 1,\n            \"col\": 1\n          }\n        },\n        {\n          \"id\": 30,\n          \"type\": \"assign\",\n          \"from\": {\n            \"location\": \"method\",\n            \"name\": 14,\n            \"ptr\": \"/return\"\n          },\n          \"to\": {\n            \"location\": \"method\",\n            \"name\": 7,\n            \"ptr\": \"/args/1/value\"\n          }\n        },\n        {\n          \"id\": 33,\n          \"type\": \"assign\",\n          \"from\": {\n            \"location\": \"method\",\n            \"name\": 1,\n            \"ptr\": \"/return\"\n          },\n          \"to\": {\n            \"location\": \"method\",\n            \"name\": 32,\n            \"ptr\": \"/args/0/value\"\n          }\n        },\n        {\n          \"id\": 32,\n          \"type\": \"method\",\n          \"library\": \"Equality\",\n          \"method\": \"deepEquals\",\n          \"args\": [\n            null,\n            null\n          ],\n          \"view\": {\n            \"row\": 1,\n            \"col\": 2\n          }\n        },\n        {\n          \"id\": 35,\n          \"type\": \"assign\",\n          \"from\": {\n            \"location\": \"method\",\n            \"name\": 32,\n            \"ptr\": \"/return\"\n          },\n          \"to\": {\n            \"location\": \"method\",\n            \"name\": 7,\n            \"ptr\": \"/args/0/value\"\n          }\n        },\n        {\n          \"id\": 36,\n          \"type\": \"assign\",\n          \"from\": {\n            \"location\": \"method\",\n            \"name\": 32,\n            \"ptr\": \"/return\"\n          },\n          \"to\": {\n            \"location\": \"method\",\n            \"name\": 22,\n            \"ptr\": \"/args/0/value\"\n          }\n        },\n        {\n          \"id\": 22,\n          \"type\": \"method\",\n          \"library\": \"Logical\",\n          \"method\": \"not\",\n          \"args\": [\n            null\n          ],\n          \"view\": {\n            \"row\": 1,\n            \"col\": 3\n          }\n        },\n        {\n          \"id\": 24,\n          \"type\": \"assign\",\n          \"from\": {\n            \"location\": \"method\",\n            \"name\": 22,\n            \"ptr\": \"/return\"\n          },\n          \"to\": {\n            \"location\": \"method\",\n            \"name\": 10,\n            \"ptr\": \"/args/0/value\"\n          }\n        },\n        {\n          \"id\": 7,\n          \"type\": \"method\",\n          \"library\": \"Logical\",\n          \"method\": \"and\",\n          \"args\": [\n            null,\n            null\n          ],\n          \"view\": {\n            \"row\": 2,\n            \"col\": 3\n          }\n        },\n        {\n          \"id\": 10,\n          \"type\": \"method\",\n          \"library\": \"Logical\",\n          \"method\": \"and\",\n          \"args\": [\n            null,\n            null\n          ],\n          \"view\": {\n            \"row\": 3,\n            \"col\": 3\n          }\n        },\n        {\n          \"id\": 27,\n          \"type\": \"assign\",\n          \"from\": {\n            \"location\": \"method\",\n            \"name\": 7,\n            \"ptr\": \"/return\"\n          },\n          \"to\": {\n            \"location\": \"method\",\n            \"name\": 26,\n            \"ptr\": \"/args/0/value\"\n          }\n        },\n        {\n          \"id\": 28,\n          \"type\": \"assign\",\n          \"from\": {\n            \"location\": \"method\",\n            \"name\": 10,\n            \"ptr\": \"/return\"\n          },\n          \"to\": {\n            \"location\": \"method\",\n            \"name\": 26,\n            \"ptr\": \"/args/1/value\"\n          }\n        },\n        {\n          \"id\": 26,\n          \"type\": \"method\",\n          \"library\": \"Logical\",\n          \"method\": \"or\",\n          \"args\": [\n            null,\n            null\n          ],\n          \"view\": {\n            \"row\": 2,\n            \"col\": 4\n          }\n        },\n        {\n          \"id\": 29,\n          \"type\": \"assign\",\n          \"from\": {\n            \"location\": \"method\",\n            \"name\": 26,\n            \"ptr\": \"/return\"\n          },\n          \"to\": {\n            \"location\": \"outgoing\",\n            \"name\": \"return\",\n            \"ptr\": \"\"\n          }\n        }\n      ],\n      \"view\": {\n        \"col\": 4,\n        \"row\": 5\n      },\n      \"id\": \"ƒ_query_1\",\n      \"comments\": []\n    }\n  ],\n  \"comments\": [],\n  \"view\": {\n    \"col\": 3,\n    \"row\": 6\n  },\n  \"created\": \"2021-03-10T20:41:21.443Z\",\n  \"createdBy\": {\n    \"_id\": \"601424815f970e44a97f394a\",\n    \"provenance\": \"local_aaa\",\n    \"username\": \"admin@pronghorn\"\n  },\n  \"lastUpdated\": \"2021-03-10T20:41:21.443Z\",\n  \"lastUpdatedBy\": {\n    \"_id\": \"601424815f970e44a97f394a\",\n    \"provenance\": \"local_aaa\",\n    \"username\": \"admin@pronghorn\"\n  }\n}"
                ]
              }
            },
            "required": []
          }
        ],
        "outgoing": [
          {
            "$id": "action",
            "type": "string",
            "examples": [
              "Action"
            ]
          },
          {
            "$id": "filePath",
            "type": "string",
            "examples": [
              "filePath"
            ]
          },
          {
            "$id": "content",
            "type": "string",
            "examples": [
              "content"
            ]
          }
        ],
        "steps": [
          {
            "id": 1,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "inputObject",
              "ptr": "/action"
            },
            "to": {
              "location": "outgoing",
              "name": "action",
              "ptr": ""
            }
          },
          {
            "id": 2,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "inputObject",
              "ptr": "/file_path"
            },
            "to": {
              "location": "outgoing",
              "name": "filePath",
              "ptr": ""
            }
          },
          {
            "id": 3,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "inputObject",
              "ptr": "/content"
            },
            "to": {
              "location": "outgoing",
              "name": "content",
              "ptr": ""
            }
          }
        ],
        "functions": [],
        "comments": [],
        "view": {
          "col": 0,
          "row": 5
        },
        "created": "2025-02-06T18:32:40.638Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:40.638Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "6287f3480f8090010e7a4b89",
        "name": "filterArtifactArrayToOnlyCreateFiles",
        "description": "",
        "incoming": [
          {
            "$id": "artifactArray",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "string",
                  "examples": [
                    "update"
                  ]
                },
                "file_path": {
                  "type": "string",
                  "examples": [
                    "README%2Emd"
                  ]
                },
                "content": {
                  "type": "string",
                  "examples": [
                    "<!-- This is a comment in md (Markdown) format, it will not be visible to the end user -->\n\n<!-- Update the below line with your Pre-Built name -->\n# Pre-Built Name\n\n<!-- Leave TOC intact unless you've added or removed headers -->\n## Table of Contents\n\n* [Overview](#overview)\n* [Installation Prerequisites](#installation-prerequisites)\n* [Requirements](#requirements)\n* [Features](#features)\n* [Future Enhancements](#future-enhancements)\n* [How to Install](#how-to-install)\n* [How to Run](#how-to-run)\n* [Additional Information](#additional-information)\n\n## Overview\n\n<!-- Write a few sentences about the Pre-Built and explain the use case(s) -->\n<!-- Avoid using the word Artifact%2E Please use Pre-Built, Pre-Built Transformation or Pre-Built Automation -->\n<!-- Ex%2E: The Migration Wizard enables IAP users to conveniently move their automation use cases between different IAP environments -->\n<!-- (e%2Eg%2E from Dev to Pre-Production or from Lab to Production)%2E -->\n\n<!-- Workflow(s) Image Placeholder - TO BE ADDED DIRECTLY TO GitLab -->\n<!-- REPLACE COMMENT BELOW WITH IMAGE OF YOUR MAIN WORKFLOW -->\n<!--\n<table><tr><td>\n  <img src=\"./images/workflow.png\" alt=\"workflow\" width=\"800px\">\n</td></tr></table>\n-->\n<!-- REPLACE COMMENT ABOVE WITH IMAGE OF YOUR MAIN WORKFLOW -->\n\n<!-- ADD ESTIMATED RUN TIME HERE -->\n<!-- e%2Eg%2E Estimated Run Time: 34 min%2E -->\n_Estimated Run Time_:\n\n## Installation Prerequisites\n\nUsers must satisfy the following pre-requisites:\n\n<!-- Include any other required apps or adapters in this list -->\n<!-- Ex%2E: EC2 Adapter -->\n* Itential Automation Platform\n  * `^2021%2E1`\n\n## Requirements\n\nThis Pre-Built requires the following:\n\n<!-- Unordered list highlighting the requirements of the Pre-Built -->\n<!-- EXAMPLE -->\n<!-- * cisco ios device -->\n<!-- * Ansible or NSO (with F5 NED) * -->\n\n## Features\n\nThe main benefits and features of the Pre-Built are outlined below%2E\n\n<!-- Unordered list highlighting the most exciting features of the Pre-Built -->\n<!-- EXAMPLE -->\n<!-- * Automatically checks for device type -->\n<!-- * Displays dry-run to user (asking for confirmation) prior to pushing config to the device -->\n<!-- * Verifies downloaded file integrity (using md5), will try to download again if failed -->\n\n\n## Future Enhancements\n\n<!-- OPTIONAL - Mention if the Pre-Built will be enhanced with additional features on the road map -->\n<!-- Ex%2E: This Pre-Built would support Cisco XR and F5 devices -->\n\n## How to Install\n\nTo install the Pre-Built:\n\n* Verify you are running a supported version of the Itential Automation Platform (IAP) as listed above in the [Requirements](#requirements) section in order to install the Pre-Built%2E \n* The Pre-Built can be installed from within App-Admin_Essential%2E Simply search for the name of your desired Pre-Built and click the install button (as shown below)%2E\n\n<!-- REPLACE BELOW WITH IMAGE OF YOUR PUBLISHED PRE-BUILT -->\n<!--\n<table><tr><td>\n  <img src=\"./images/install.png\" alt=\"install\" width=\"600px\">\n</td></tr></table>\n-->\n<!-- REPLACE ABOVE WITH IMAGE OF YOUR PUBLISHED PRE-BUILT -->\n\n<!-- OPTIONAL - Explain if external components are required outside of IAP -->\n<!-- Ex%2E: The Ansible roles required for this Pre-Built can be found in the repository located at https://gitlab%2Ecom/itentialopensource/pre-built-automations/hello-world -->\n\n## How to Run\n\nUse the following to run the Pre-Built:\n\n<!-- Explain the main entrypoint(s) for this Pre-Built: Automation Catalog item, Workflow, Postman, etc%2E -->\n\n## Additional Information\n\nPlease use your Itential Customer Success account if you need support when using this Pre-Built%2E"
                  ]
                }
              },
              "required": []
            }
          },
          {
            "$id": "addRepositoryDependencyFiles",
            "type": "string",
            "examples": []
          }
        ],
        "outgoing": [
          {
            "$id": "createFiles",
            "type": "array"
          }
        ],
        "steps": [
          {
            "id": 3,
            "type": "method",
            "library": "Array",
            "method": "filter",
            "args": [
              null,
              "ƒ_map_1"
            ],
            "view": {
              "row": 1,
              "col": 1
            }
          },
          {
            "id": 4,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "artifactArray",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 3,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 6,
            "type": "method",
            "library": "Conditional",
            "method": "ternary",
            "args": [
              null,
              null,
              null
            ],
            "view": {
              "row": 2,
              "col": 2
            },
            "context": "#"
          },
          {
            "id": 8,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 3,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 6,
              "ptr": "/args/2/value"
            },
            "context": "#"
          },
          {
            "id": 9,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "artifactArray",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 6,
              "ptr": "/args/1/value"
            },
            "context": "#"
          },
          {
            "id": 10,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 6,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "createFiles",
              "ptr": ""
            },
            "context": "#"
          },
          {
            "id": 11,
            "type": "method",
            "library": "Equality",
            "method": "equality",
            "args": [
              null,
              "yes"
            ],
            "view": {
              "row": 2,
              "col": 1
            },
            "context": "#"
          },
          {
            "id": 12,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "addRepositoryDependencyFiles",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 11,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 13,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 11,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 6,
              "ptr": "/args/0/value"
            },
            "context": "#"
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "action": {
                    "type": "string",
                    "examples": [
                      "update"
                    ]
                  },
                  "file_path": {
                    "type": "string",
                    "examples": [
                      "README%2Emd"
                    ]
                  },
                  "content": {
                    "type": "string",
                    "examples": [
                      "<!-- This is a comment in md (Markdown) format, it will not be visible to the end user -->\n\n<!-- Update the below line with your Pre-Built name -->\n# Pre-Built Name\n\n<!-- Leave TOC intact unless you've added or removed headers -->\n## Table of Contents\n\n* [Overview](#overview)\n* [Installation Prerequisites](#installation-prerequisites)\n* [Requirements](#requirements)\n* [Features](#features)\n* [Future Enhancements](#future-enhancements)\n* [How to Install](#how-to-install)\n* [How to Run](#how-to-run)\n* [Additional Information](#additional-information)\n\n## Overview\n\n<!-- Write a few sentences about the Pre-Built and explain the use case(s) -->\n<!-- Avoid using the word Artifact%2E Please use Pre-Built, Pre-Built Transformation or Pre-Built Automation -->\n<!-- Ex%2E: The Migration Wizard enables IAP users to conveniently move their automation use cases between different IAP environments -->\n<!-- (e%2Eg%2E from Dev to Pre-Production or from Lab to Production)%2E -->\n\n<!-- Workflow(s) Image Placeholder - TO BE ADDED DIRECTLY TO GitLab -->\n<!-- REPLACE COMMENT BELOW WITH IMAGE OF YOUR MAIN WORKFLOW -->\n<!--\n<table><tr><td>\n  <img src=\"./images/workflow.png\" alt=\"workflow\" width=\"800px\">\n</td></tr></table>\n-->\n<!-- REPLACE COMMENT ABOVE WITH IMAGE OF YOUR MAIN WORKFLOW -->\n\n<!-- ADD ESTIMATED RUN TIME HERE -->\n<!-- e%2Eg%2E Estimated Run Time: 34 min%2E -->\n_Estimated Run Time_:\n\n## Installation Prerequisites\n\nUsers must satisfy the following pre-requisites:\n\n<!-- Include any other required apps or adapters in this list -->\n<!-- Ex%2E: EC2 Adapter -->\n* Itential Automation Platform\n  * `^2021%2E1`\n\n## Requirements\n\nThis Pre-Built requires the following:\n\n<!-- Unordered list highlighting the requirements of the Pre-Built -->\n<!-- EXAMPLE -->\n<!-- * cisco ios device -->\n<!-- * Ansible or NSO (with F5 NED) * -->\n\n## Features\n\nThe main benefits and features of the Pre-Built are outlined below%2E\n\n<!-- Unordered list highlighting the most exciting features of the Pre-Built -->\n<!-- EXAMPLE -->\n<!-- * Automatically checks for device type -->\n<!-- * Displays dry-run to user (asking for confirmation) prior to pushing config to the device -->\n<!-- * Verifies downloaded file integrity (using md5), will try to download again if failed -->\n\n\n## Future Enhancements\n\n<!-- OPTIONAL - Mention if the Pre-Built will be enhanced with additional features on the road map -->\n<!-- Ex%2E: This Pre-Built would support Cisco XR and F5 devices -->\n\n## How to Install\n\nTo install the Pre-Built:\n\n* Verify you are running a supported version of the Itential Automation Platform (IAP) as listed above in the [Requirements](#requirements) section in order to install the Pre-Built%2E \n* The Pre-Built can be installed from within App-Admin_Essential%2E Simply search for the name of your desired Pre-Built and click the install button (as shown below)%2E\n\n<!-- REPLACE BELOW WITH IMAGE OF YOUR PUBLISHED PRE-BUILT -->\n<!--\n<table><tr><td>\n  <img src=\"./images/install.png\" alt=\"install\" width=\"600px\">\n</td></tr></table>\n-->\n<!-- REPLACE ABOVE WITH IMAGE OF YOUR PUBLISHED PRE-BUILT -->\n\n<!-- OPTIONAL - Explain if external components are required outside of IAP -->\n<!-- Ex%2E: The Ansible roles required for this Pre-Built can be found in the repository located at https://gitlab%2Ecom/itentialopensource/pre-built-automations/hello-world -->\n\n## How to Run\n\nUse the following to run the Pre-Built:\n\n<!-- Explain the main entrypoint(s) for this Pre-Built: Automation Catalog item, Workflow, Postman, etc%2E -->\n\n## Additional Information\n\nPlease use your Itential Customer Success account if you need support when using this Pre-Built%2E"
                    ]
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "action": {
                      "type": "string",
                      "examples": [
                        "update"
                      ]
                    },
                    "file_path": {
                      "type": "string",
                      "examples": [
                        "README%2Emd"
                      ]
                    },
                    "content": {
                      "type": "string",
                      "examples": [
                        "<!-- This is a comment in md (Markdown) format, it will not be visible to the end user -->\n\n<!-- Update the below line with your Pre-Built name -->\n# Pre-Built Name\n\n<!-- Leave TOC intact unless you've added or removed headers -->\n## Table of Contents\n\n* [Overview](#overview)\n* [Installation Prerequisites](#installation-prerequisites)\n* [Requirements](#requirements)\n* [Features](#features)\n* [Future Enhancements](#future-enhancements)\n* [How to Install](#how-to-install)\n* [How to Run](#how-to-run)\n* [Additional Information](#additional-information)\n\n## Overview\n\n<!-- Write a few sentences about the Pre-Built and explain the use case(s) -->\n<!-- Avoid using the word Artifact%2E Please use Pre-Built, Pre-Built Transformation or Pre-Built Automation -->\n<!-- Ex%2E: The Migration Wizard enables IAP users to conveniently move their automation use cases between different IAP environments -->\n<!-- (e%2Eg%2E from Dev to Pre-Production or from Lab to Production)%2E -->\n\n<!-- Workflow(s) Image Placeholder - TO BE ADDED DIRECTLY TO GitLab -->\n<!-- REPLACE COMMENT BELOW WITH IMAGE OF YOUR MAIN WORKFLOW -->\n<!--\n<table><tr><td>\n  <img src=\"./images/workflow.png\" alt=\"workflow\" width=\"800px\">\n</td></tr></table>\n-->\n<!-- REPLACE COMMENT ABOVE WITH IMAGE OF YOUR MAIN WORKFLOW -->\n\n<!-- ADD ESTIMATED RUN TIME HERE -->\n<!-- e%2Eg%2E Estimated Run Time: 34 min%2E -->\n_Estimated Run Time_:\n\n## Installation Prerequisites\n\nUsers must satisfy the following pre-requisites:\n\n<!-- Include any other required apps or adapters in this list -->\n<!-- Ex%2E: EC2 Adapter -->\n* Itential Automation Platform\n  * `^2021%2E1`\n\n## Requirements\n\nThis Pre-Built requires the following:\n\n<!-- Unordered list highlighting the requirements of the Pre-Built -->\n<!-- EXAMPLE -->\n<!-- * cisco ios device -->\n<!-- * Ansible or NSO (with F5 NED) * -->\n\n## Features\n\nThe main benefits and features of the Pre-Built are outlined below%2E\n\n<!-- Unordered list highlighting the most exciting features of the Pre-Built -->\n<!-- EXAMPLE -->\n<!-- * Automatically checks for device type -->\n<!-- * Displays dry-run to user (asking for confirmation) prior to pushing config to the device -->\n<!-- * Verifies downloaded file integrity (using md5), will try to download again if failed -->\n\n\n## Future Enhancements\n\n<!-- OPTIONAL - Mention if the Pre-Built will be enhanced with additional features on the road map -->\n<!-- Ex%2E: This Pre-Built would support Cisco XR and F5 devices -->\n\n## How to Install\n\nTo install the Pre-Built:\n\n* Verify you are running a supported version of the Itential Automation Platform (IAP) as listed above in the [Requirements](#requirements) section in order to install the Pre-Built%2E \n* The Pre-Built can be installed from within App-Admin_Essential%2E Simply search for the name of your desired Pre-Built and click the install button (as shown below)%2E\n\n<!-- REPLACE BELOW WITH IMAGE OF YOUR PUBLISHED PRE-BUILT -->\n<!--\n<table><tr><td>\n  <img src=\"./images/install.png\" alt=\"install\" width=\"600px\">\n</td></tr></table>\n-->\n<!-- REPLACE ABOVE WITH IMAGE OF YOUR PUBLISHED PRE-BUILT -->\n\n<!-- OPTIONAL - Explain if external components are required outside of IAP -->\n<!-- Ex%2E: The Ansible roles required for this Pre-Built can be found in the repository located at https://gitlab%2Ecom/itentialopensource/pre-built-automations/hello-world -->\n\n## How to Run\n\nUse the following to run the Pre-Built:\n\n<!-- Explain the main entrypoint(s) for this Pre-Built: Automation Catalog item, Workflow, Postman, etc%2E -->\n\n## Additional Information\n\nPlease use your Itential Customer Success account if you need support when using this Pre-Built%2E"
                      ]
                    }
                  },
                  "required": []
                },
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "newValue",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "editable": true,
                "$id": "newValue"
              }
            ],
            "steps": [
              {
                "id": 3,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  "create"
                ],
                "view": {
                  "row": 2,
                  "col": 1
                }
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/action"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "newValue",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "ƒ_map_1",
            "view": {
              "col": 2,
              "row": 4
            },
            "id": "ƒ_map_1",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 2,
          "row": 5
        },
        "created": "2025-02-06T18:32:40.783Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:40.783Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "605d2b11d1976e009291a74d",
        "name": "updatePackageGitHubJSON",
        "description": "",
        "incoming": [
          {
            "$id": "filesArray",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "examples": [
                    "bundles"
                  ]
                },
                "type": {
                  "type": "string",
                  "examples": [
                    "directory"
                  ]
                },
                "content": {
                  "type": [
                    "string",
                    "array"
                  ]
                }
              },
              "required": []
            }
          },
          {
            "$id": "packageJsonName",
            "type": "string",
            "examples": [
              "sdfsa"
            ]
          },
          {
            "$id": "packageJsonVersion",
            "type": "string",
            "examples": [
              "dsfds"
            ]
          }
        ],
        "outgoing": [
          {
            "$id": "fixedArray",
            "type": "array"
          }
        ],
        "steps": [
          {
            "id": 2,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "filesArray",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 8,
            "type": "declaration",
            "library": "Object",
            "method": "new Object",
            "args": [
              "{         \"type\": \"gitlab\",         \"hostname\": \"gitlab.com\",         \"path\": \"itentialopensource/pre-built-automations\"     }"
            ],
            "view": {
              "row": 4,
              "col": 3
            }
          },
          {
            "id": 23,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "filesArray",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 22,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 27,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "packageJsonName",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 26,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 42,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "packageJsonVersion",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 39,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 1,
            "type": "method",
            "library": "Array",
            "method": "find",
            "args": [
              null,
              "ƒ_query_1",
              null
            ],
            "view": {
              "row": 1,
              "col": 1
            }
          },
          {
            "id": 5,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 4,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 4,
            "type": "method",
            "library": "Object",
            "method": "getProperty",
            "args": [
              null,
              "content"
            ],
            "view": {
              "row": 2,
              "col": 2
            }
          },
          {
            "id": 7,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 4,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 6,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 6,
            "type": "method",
            "library": "JSON",
            "method": "parse",
            "args": [
              null,
              null
            ],
            "view": {
              "row": 2,
              "col": 3
            }
          },
          {
            "id": 40,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 6,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 39,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 39,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "version",
              null
            ],
            "view": {
              "row": 5,
              "col": 4
            }
          },
          {
            "id": 41,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 39,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 17,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 17,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "repository",
              null
            ],
            "view": {
              "row": 4,
              "col": 4
            }
          },
          {
            "id": 28,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 17,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 26,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 26,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "name",
              null
            ],
            "view": {
              "row": 3,
              "col": 4
            }
          },
          {
            "id": 29,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 26,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 16,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 16,
            "type": "method",
            "library": "JSON",
            "method": "stringify",
            "args": [
              null,
              null,
              "  "
            ],
            "view": {
              "row": 2,
              "col": 4
            }
          },
          {
            "id": 24,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 16,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 22,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 22,
            "type": "method",
            "library": "Array",
            "method": "map",
            "args": [
              null,
              "ƒ_map_2",
              null
            ],
            "view": {
              "row": 1,
              "col": 5
            }
          },
          {
            "id": 25,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 22,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "fixedArray",
              "ptr": ""
            }
          },
          {
            "id": 43,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 8,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 17,
              "ptr": "/args/2/value"
            }
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "examples": [
                      "bundles"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "examples": [
                      "directory"
                    ]
                  },
                  "content": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "ac_agenda_jobs"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "examples": [
                            "directory"
                          ]
                        },
                        "content": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "IAP Artifacts ASA Firewall Object Group Update.json"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "file"
                                ]
                              },
                              "content": {
                                "type": "string",
                                "examples": [
                                  "{\n  \"_id\": \"5f3c38e78236fd5385c31bbd\",\n  \"name\": \"IAP Artifacts ASA Firewall Object Group Update\",\n  \"data\": {\n    \"lastUpdated\": \"2020-03-23T19:45:50.899Z\",\n    \"formData\": {\n      \"zeroTouch\": true,\n      \"asaFirewallDevice\": \"asa-aws-ansible\",\n      \"hostList\": [],\n      \"checkbox1\": true\n    },\n    \"formId\": \"IAP Artifacts ASA Firewall Object Group Update\",\n    \"workflowId\": \"IAP Artifacts ASA Firewall Object Group Update\",\n    \"description\": \"IAP Artifacts ASA Firewall Object Group Update\",\n    \"gbac\": {\n      \"write\": [],\n      \"read\": []\n    },\n    \"modifiedById\": \"5f3bda043e82cb0740b460d6\",\n    \"modifiedByUsername\": \"justin.cotton\"\n  },\n  \"lastModifiedBy\": \"DSUP-IAP20201:11193\",\n  \"lastRunAt\": null,\n  \"nextRunAt\": null,\n  \"priority\": 0,\n  \"repeatInterval\": null,\n  \"repeatTimezone\": null,\n  \"type\": \"normal\"\n}"
                                ]
                              }
                            },
                            "required": []
                          }
                        }
                      },
                      "required": []
                    }
                  }
                },
                "required": [],
                "$id": "element"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "bundles"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "examples": [
                        "directory"
                      ]
                    },
                    "content": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "examples": [
                              "ac_agenda_jobs"
                            ]
                          },
                          "type": {
                            "type": "string",
                            "examples": [
                              "directory"
                            ]
                          },
                          "content": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "examples": [
                                    "IAP Artifacts ASA Firewall Object Group Update.json"
                                  ]
                                },
                                "type": {
                                  "type": "string",
                                  "examples": [
                                    "file"
                                  ]
                                },
                                "content": {
                                  "type": "string",
                                  "examples": [
                                    "{\n  \"_id\": \"5f3c38e78236fd5385c31bbd\",\n  \"name\": \"IAP Artifacts ASA Firewall Object Group Update\",\n  \"data\": {\n    \"lastUpdated\": \"2020-03-23T19:45:50.899Z\",\n    \"formData\": {\n      \"zeroTouch\": true,\n      \"asaFirewallDevice\": \"asa-aws-ansible\",\n      \"hostList\": [],\n      \"checkbox1\": true\n    },\n    \"formId\": \"IAP Artifacts ASA Firewall Object Group Update\",\n    \"workflowId\": \"IAP Artifacts ASA Firewall Object Group Update\",\n    \"description\": \"IAP Artifacts ASA Firewall Object Group Update\",\n    \"gbac\": {\n      \"write\": [],\n      \"read\": []\n    },\n    \"modifiedById\": \"5f3bda043e82cb0740b460d6\",\n    \"modifiedByUsername\": \"justin.cotton\"\n  },\n  \"lastModifiedBy\": \"DSUP-IAP20201:11193\",\n  \"lastRunAt\": null,\n  \"nextRunAt\": null,\n  \"priority\": 0,\n  \"repeatInterval\": null,\n  \"repeatTimezone\": null,\n  \"type\": \"normal\"\n}"
                                  ]
                                }
                              },
                              "required": []
                            }
                          }
                        },
                        "required": []
                      }
                    }
                  },
                  "required": []
                },
                "optional": true
              },
              {
                "$id": "constantValue1",
                "type": "string",
                "isConstValue": true
              }
            ],
            "outgoing": [
              {
                "title": "return",
                "type": "boolean",
                "$id": "return"
              }
            ],
            "steps": [
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "element",
                  "ptr": "/name"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 1,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  "package.json"
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "return",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "ƒ_query_1",
            "view": {
              "col": 3,
              "row": 5
            },
            "id": "ƒ_query_1",
            "comments": []
          },
          {
            "incoming": [
              {
                "$id": "accumulator",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "examples": [
                      "bundles"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "examples": [
                      "directory"
                    ]
                  },
                  "content": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "ac_agenda_jobs"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "examples": [
                            "directory"
                          ]
                        },
                        "content": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "IAP Artifacts ASA Firewall Object Group Update.json"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "file"
                                ]
                              },
                              "content": {
                                "type": "string",
                                "examples": [
                                  "{\n  \"_id\": \"5f3c38e78236fd5385c31bbd\",\n  \"name\": \"IAP Artifacts ASA Firewall Object Group Update\",\n  \"data\": {\n    \"lastUpdated\": \"2020-03-23T19:45:50.899Z\",\n    \"formData\": {\n      \"zeroTouch\": true,\n      \"asaFirewallDevice\": \"asa-aws-ansible\",\n      \"hostList\": [],\n      \"checkbox1\": true\n    },\n    \"formId\": \"IAP Artifacts ASA Firewall Object Group Update\",\n    \"workflowId\": \"IAP Artifacts ASA Firewall Object Group Update\",\n    \"description\": \"IAP Artifacts ASA Firewall Object Group Update\",\n    \"gbac\": {\n      \"write\": [],\n      \"read\": []\n    },\n    \"modifiedById\": \"5f3bda043e82cb0740b460d6\",\n    \"modifiedByUsername\": \"justin.cotton\"\n  },\n  \"lastModifiedBy\": \"DSUP-IAP20201:11193\",\n  \"lastRunAt\": null,\n  \"nextRunAt\": null,\n  \"priority\": 0,\n  \"repeatInterval\": null,\n  \"repeatTimezone\": null,\n  \"type\": \"normal\"\n}"
                                ]
                              }
                            },
                            "required": []
                          }
                        }
                      },
                      "required": []
                    }
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "bundles"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "examples": [
                        "directory"
                      ]
                    },
                    "content": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "examples": [
                              "ac_agenda_jobs"
                            ]
                          },
                          "type": {
                            "type": "string",
                            "examples": [
                              "directory"
                            ]
                          },
                          "content": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "examples": [
                                    "IAP Artifacts ASA Firewall Object Group Update.json"
                                  ]
                                },
                                "type": {
                                  "type": "string",
                                  "examples": [
                                    "file"
                                  ]
                                },
                                "content": {
                                  "type": "string",
                                  "examples": [
                                    "{\n  \"_id\": \"5f3c38e78236fd5385c31bbd\",\n  \"name\": \"IAP Artifacts ASA Firewall Object Group Update\",\n  \"data\": {\n    \"lastUpdated\": \"2020-03-23T19:45:50.899Z\",\n    \"formData\": {\n      \"zeroTouch\": true,\n      \"asaFirewallDevice\": \"asa-aws-ansible\",\n      \"hostList\": [],\n      \"checkbox1\": true\n    },\n    \"formId\": \"IAP Artifacts ASA Firewall Object Group Update\",\n    \"workflowId\": \"IAP Artifacts ASA Firewall Object Group Update\",\n    \"description\": \"IAP Artifacts ASA Firewall Object Group Update\",\n    \"gbac\": {\n      \"write\": [],\n      \"read\": []\n    },\n    \"modifiedById\": \"5f3bda043e82cb0740b460d6\",\n    \"modifiedByUsername\": \"justin.cotton\"\n  },\n  \"lastModifiedBy\": \"DSUP-IAP20201:11193\",\n  \"lastRunAt\": null,\n  \"nextRunAt\": null,\n  \"priority\": 0,\n  \"repeatInterval\": null,\n  \"repeatTimezone\": null,\n  \"type\": \"normal\"\n}"
                                  ]
                                }
                              },
                              "required": []
                            }
                          }
                        },
                        "required": []
                      }
                    }
                  },
                  "required": []
                },
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "accumulator",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              }
            ],
            "steps": [],
            "functions": [],
            "name": "ƒ_reduce_1",
            "view": {
              "col": 2,
              "row": 5
            },
            "id": "ƒ_reduce_1",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "examples": [
                      "bundles"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "examples": [
                      "directory"
                    ]
                  },
                  "content": {
                    "type": "string"
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "bundles"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "examples": [
                        "directory"
                      ]
                    },
                    "content": {
                      "type": "string"
                    }
                  },
                  "required": []
                },
                "optional": true
              },
              {
                "$id": "constantValue1",
                "type": "string",
                "isConstValue": true
              }
            ],
            "outgoing": [
              {
                "title": "newValue",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "editable": true,
                "$id": "newValue"
              }
            ],
            "steps": [
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/name"
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 8,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "constantValue1",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 4,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  "package.json"
                ],
                "view": {
                  "row": 2,
                  "col": 1
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 7,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "content",
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 2
                }
              },
              {
                "id": 10,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 1,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 3
                }
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "newValue",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "ƒ_map_1",
            "view": {
              "col": 3,
              "row": 5
            },
            "id": "ƒ_map_1",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "examples": [
                      "bundles"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "examples": [
                      "directory"
                    ]
                  },
                  "content": {
                    "type": [
                      "string",
                      "array"
                    ]
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "bundles"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "examples": [
                        "directory"
                      ]
                    },
                    "content": {
                      "type": [
                        "string",
                        "array"
                      ]
                    }
                  },
                  "required": []
                },
                "optional": true
              },
              {
                "$id": "constantValue1",
                "type": "string",
                "isConstValue": true
              }
            ],
            "outgoing": [
              {
                "title": "newValue",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "editable": true,
                "$id": "newValue"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "content",
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 2
                }
              },
              {
                "id": 2,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  "package.json"
                ],
                "view": {
                  "row": 2,
                  "col": 2
                }
              },
              {
                "id": 3,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 3
                }
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/name"
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 8,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "newValue",
                  "ptr": ""
                }
              },
              {
                "id": 10,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "constantValue1",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/2/value"
                }
              }
            ],
            "functions": [],
            "name": "ƒ_map_2",
            "view": {
              "col": 3,
              "row": 4
            },
            "id": "ƒ_map_2",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 6,
          "row": 6
        },
        "created": "2025-02-06T18:32:40.798Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:40.798Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "605b86f821c795008dc26118",
        "name": "mergeFormWithDiscovery",
        "description": "",
        "incoming": [
          {
            "$id": "formOutput",
            "type": "object",
            "properties": {
              "components": {
                "type": "object",
                "properties": {
                  "workflows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        }
                      },
                      "required": []
                    },
                    "$id": "workflows"
                  },
                  "catalogAutomations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        }
                      },
                      "required": []
                    },
                    "$id": "catalogAutomations"
                  },
                  "operationsAutomations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        }
                      },
                      "required": []
                    },
                    "$id": "operationsAutomations"
                  },
                  "jsonForms": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        }
                      },
                      "required": []
                    },
                    "$id": "jsonForms"
                  },
                  "templates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        }
                      },
                      "required": []
                    },
                    "$id": "templates"
                  },
                  "forms": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        }
                      },
                      "required": []
                    },
                    "$id": "forms"
                  },
                  "commandTemplates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        }
                      },
                      "required": []
                    },
                    "$id": "commandTemplates"
                  },
                  "analyticTemplates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        }
                      },
                      "required": []
                    },
                    "$id": "analyticTemplates"
                  },
                  "goldenConfigTrees": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      }
                    },
                    "$id": "goldenConfigTrees"
                  },
                  "transformations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "id": {
                          "type": "string",
                          "examples": [
                            "5f7c62b43451a606c2fb0305"
                          ]
                        }
                      },
                      "required": []
                    },
                    "$id": "transformations"
                  }
                },
                "required": []
              }
            },
            "required": []
          },
          {
            "$id": "discoveryOutput",
            "type": "object",
            "properties": {
              "componentMap": {
                "type": "object",
                "properties": {
                  "workflow": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "parent": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "zackAll"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "ac-agenda-job"
                                ]
                              }
                            },
                            "required": []
                          },
                          "$id": "parent"
                        }
                      },
                      "required": []
                    },
                    "$id": "workflow"
                  },
                  "ac-agenda-job": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f7c622d038374d99a024d66"
                          ]
                        }
                      },
                      "required": []
                    },
                    "$id": "ac-agenda-job"
                  },
                  "automation": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f7c622d038374d99a024d66"
                          ]
                        }
                      },
                      "required": []
                    },
                    "$id": "automation"
                  },
                  "transformation": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "examples": [
                            "5f7c62b43451a606c2fb0305"
                          ]
                        },
                        "name": {
                          "type": "string"
                        },
                        "parent": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "zackAll"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "workflow"
                                ]
                              }
                            },
                            "required": []
                          },
                          "$id": "parent"
                        }
                      },
                      "required": []
                    },
                    "$id": "transformation"
                  },
                  "mop-template": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "parent": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "zackAll"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "workflow"
                                ]
                              }
                            },
                            "required": []
                          },
                          "$id": "parent"
                        }
                      },
                      "required": []
                    },
                    "$id": "mop-template"
                  },
                  "template": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "parent": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "zackAll"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "workflow"
                                ]
                              }
                            },
                            "required": []
                          },
                          "$id": "parent"
                        }
                      },
                      "required": []
                    },
                    "$id": "template"
                  },
                  "mop-analytic-template": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "parent": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "zackAll"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "workflow"
                                ]
                              }
                            },
                            "required": []
                          },
                          "$id": "parent"
                        }
                      },
                      "required": []
                    },
                    "$id": "mop-analytic-template"
                  },
                  "forms": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "parent": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "zackAll"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "workflow"
                                ]
                              }
                            },
                            "required": []
                          },
                          "$id": "parent"
                        }
                      },
                      "required": []
                    },
                    "$id": "forms"
                  },
                  "json-forms": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "parent": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "zackAll"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "workflow"
                                ]
                              }
                            },
                            "required": []
                          },
                          "$id": "parent"
                        }
                      },
                      "required": []
                    },
                    "$id": "json-forms"
                  },
                  "golden-config": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "parent": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "zackAll"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "workflow"
                                ]
                              }
                            },
                            "required": []
                          },
                          "$id": "parent"
                        }
                      },
                      "required": []
                    },
                    "$id": "golden-config"
                  }
                },
                "required": []
              },
              "dependencies": {
                "type": "array",
                "items": {
                  "type": "string",
                  "examples": [
                    "@itential/app-workflow_engine"
                  ]
                },
                "$id": "dependencies"
              },
              "invalidComponents": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "examples": [
                        "golden-config"
                      ]
                    },
                    "component": {
                      "type": "object",
                      "properties": {
                        "treeId": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "parent": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "zackAll"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "workflow"
                                ]
                              }
                            },
                            "required": []
                          },
                          "$id": "parent"
                        }
                      },
                      "required": []
                    }
                  },
                  "required": []
                },
                "$id": "invalidComponents"
              }
            },
            "required": []
          }
        ],
        "outgoing": [
          {
            "$id": "formInput",
            "type": "object",
            "properties": {
              "components": {
                "type": "object",
                "properties": {
                  "workflows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "catalogAutomations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "operationsAutomations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "jsonForms": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "templates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "forms": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "commandTemplates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "analyticTemplates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "goldenConfigTrees": {
                    "type": "array"
                  },
                  "transformations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "id": {
                          "type": "string",
                          "examples": [
                            "5f7c62b43451a606c2fb0305"
                          ]
                        }
                      },
                      "required": []
                    }
                  }
                },
                "required": []
              }
            },
            "required": []
          }
        ],
        "steps": [
          {
            "id": 2,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "discoveryOutput",
              "ptr": "/componentMap/workflow"
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 3,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formOutput",
              "ptr": "/components/workflows"
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 12,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formOutput",
              "ptr": "/components/jsonForms"
            },
            "to": {
              "location": "method",
              "name": 6,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 13,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "discoveryOutput",
              "ptr": "/componentMap/json-forms"
            },
            "to": {
              "location": "method",
              "name": 6,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 14,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formOutput",
              "ptr": "/components/templates"
            },
            "to": {
              "location": "method",
              "name": 7,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 15,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "discoveryOutput",
              "ptr": "/componentMap/template"
            },
            "to": {
              "location": "method",
              "name": 7,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 16,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formOutput",
              "ptr": "/components/forms"
            },
            "to": {
              "location": "method",
              "name": 8,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 17,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "discoveryOutput",
              "ptr": "/componentMap/forms"
            },
            "to": {
              "location": "method",
              "name": 8,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 18,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formOutput",
              "ptr": "/components/commandTemplates"
            },
            "to": {
              "location": "method",
              "name": 9,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 19,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "discoveryOutput",
              "ptr": "/componentMap/mop-template"
            },
            "to": {
              "location": "method",
              "name": 9,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 21,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formOutput",
              "ptr": "/components/analyticTemplates"
            },
            "to": {
              "location": "method",
              "name": 20,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 22,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "discoveryOutput",
              "ptr": "/componentMap/mop-analytic-template"
            },
            "to": {
              "location": "method",
              "name": 20,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 30,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "discoveryOutput",
              "ptr": "/componentMap/transformation"
            },
            "to": {
              "location": "method",
              "name": 29,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 31,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formOutput",
              "ptr": "/components/transformations"
            },
            "to": {
              "location": "method",
              "name": 29,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 1,
            "type": "method",
            "library": "Array",
            "method": "reduce",
            "args": [
              null,
              "ƒ_reduce_1",
              null
            ],
            "view": {
              "row": 1,
              "col": 2
            }
          },
          {
            "id": 6,
            "type": "method",
            "library": "Array",
            "method": "reduce",
            "args": [
              null,
              "ƒ_reduce_1",
              null
            ],
            "view": {
              "row": 3,
              "col": 2
            }
          },
          {
            "id": 7,
            "type": "method",
            "library": "Array",
            "method": "reduce",
            "args": [
              null,
              "ƒ_reduce_1",
              null
            ],
            "view": {
              "row": 4,
              "col": 2
            }
          },
          {
            "id": 8,
            "type": "method",
            "library": "Array",
            "method": "reduce",
            "args": [
              null,
              "ƒ_reduce_1",
              null
            ],
            "view": {
              "row": 5,
              "col": 2
            }
          },
          {
            "id": 9,
            "type": "method",
            "library": "Array",
            "method": "reduce",
            "args": [
              null,
              "ƒ_reduce_1",
              null
            ],
            "view": {
              "row": 6,
              "col": 2
            }
          },
          {
            "id": 20,
            "type": "method",
            "library": "Array",
            "method": "reduce",
            "args": [
              null,
              "ƒ_reduce_1",
              null
            ],
            "view": {
              "row": 7,
              "col": 2
            }
          },
          {
            "id": 29,
            "type": "method",
            "library": "Array",
            "method": "reduce",
            "args": [
              null,
              "ƒ_reduce_2",
              null
            ],
            "view": {
              "row": 9,
              "col": 2
            }
          },
          {
            "id": 4,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "formInput",
              "ptr": "/components/workflows"
            }
          },
          {
            "id": 24,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 6,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "formInput",
              "ptr": "/components/jsonForms"
            }
          },
          {
            "id": 25,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 7,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "formInput",
              "ptr": "/components/templates"
            }
          },
          {
            "id": 26,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 8,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "formInput",
              "ptr": "/components/forms"
            }
          },
          {
            "id": 27,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 9,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "formInput",
              "ptr": "/components/commandTemplates"
            }
          },
          {
            "id": 28,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 20,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "formInput",
              "ptr": "/components/analyticTemplates"
            }
          },
          {
            "id": 32,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 29,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "formInput",
              "ptr": "/components/transformations"
            }
          },
          {
            "id": 33,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "discoveryOutput",
              "ptr": "/componentMap/ac-agenda-job"
            },
            "to": {
              "location": "outgoing",
              "name": "formInput",
              "ptr": "/components/catalogAutomations"
            }
          },
          {
            "id": 34,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "discoveryOutput",
              "ptr": "/componentMap/automation"
            },
            "to": {
              "location": "outgoing",
              "name": "formInput",
              "ptr": "/components/operationsAutomations"
            }
          },
          {
            "id": 35,
            "type": "method",
            "library": "Array",
            "method": "reduce",
            "args": [
              null,
              "ƒ_reduce_1",
              null
            ],
            "view": {
              "row": 10,
              "col": 2
            }
          },
          {
            "id": 36,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "discoveryOutput",
              "ptr": "/componentMap/golden-config"
            },
            "to": {
              "location": "method",
              "name": 35,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 37,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formOutput",
              "ptr": "/components/goldenConfigTrees"
            },
            "to": {
              "location": "method",
              "name": 35,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 38,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 35,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "formInput",
              "ptr": "/components/goldenConfigTrees"
            }
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "zackAll"
                      ]
                    }
                  },
                  "required": []
                },
                "$id": "accumulator"
              },
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "examples": [
                      "zackAll"
                    ]
                  },
                  "parent": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "examples": [
                            "ac-agenda-job"
                          ]
                        }
                      },
                      "required": []
                    }
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "zackAll"
                      ]
                    },
                    "parent": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "examples": [
                              "zackAll"
                            ]
                          },
                          "type": {
                            "type": "string",
                            "examples": [
                              "ac-agenda-job"
                            ]
                          }
                        },
                        "required": []
                      }
                    }
                  },
                  "required": []
                },
                "$id": "array",
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "accumulator",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              }
            ],
            "steps": [
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 7,
                "type": "declaration",
                "library": "Object",
                "method": "new Object",
                "args": [
                  "{         \"name\": \"\"       }"
                ],
                "view": {
                  "row": 3,
                  "col": 1
                }
              },
              {
                "id": 11,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/name"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 12,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 9,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 10,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 7,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 1,
                "type": "function",
                "function": "userFunc_1",
                "args": [
                  "",
                  ""
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/return/isNewComponent"
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 8,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "name",
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 2
                }
              },
              {
                "id": 9,
                "type": "method",
                "library": "Array",
                "method": "push",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 3
                }
              },
              {
                "id": 4,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 4
                }
              },
              {
                "id": 15,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "accumulator",
                  "ptr": ""
                }
              },
              {
                "id": 21,
                "type": "method",
                "library": "Object",
                "method": "keys",
                "args": [
                  null
                ],
                "view": {
                  "row": 4,
                  "col": 1
                }
              },
              {
                "id": 22,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 21,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 23,
                "type": "method",
                "library": "Array",
                "method": "includes",
                "args": [
                  null,
                  "treeId",
                  null
                ],
                "view": {
                  "row": 4,
                  "col": 2
                }
              },
              {
                "id": 24,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 21,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 23,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 25,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 4,
                  "col": 3
                }
              },
              {
                "id": 26,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 23,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 25,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 29,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "treeId",
                  null
                ],
                "view": {
                  "row": 5,
                  "col": 2
                }
              },
              {
                "id": 30,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 29,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 31,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 25,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 9,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 32,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 9,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 33,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 25,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 34,
                "type": "method",
                "library": "Object",
                "method": "getProperty",
                "args": [
                  null,
                  "treeId"
                ],
                "view": {
                  "row": 5,
                  "col": 1
                }
              },
              {
                "id": 35,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 34,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 36,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 34,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 29,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 37,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 29,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 25,
                  "ptr": "/args/1/value"
                }
              }
            ],
            "functions": [],
            "name": "ƒ_reduce_1",
            "view": {
              "col": 4,
              "row": 6
            },
            "id": "ƒ_reduce_1",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "zackAll"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "examples": [
                        "5f7c62b43451a606c2fb0305"
                      ]
                    }
                  },
                  "required": []
                },
                "$id": "accumulator"
              },
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "examples": [
                      "5f7c62b43451a606c2fb0305"
                    ]
                  },
                  "parent": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "examples": [
                            "workflow"
                          ]
                        }
                      },
                      "required": []
                    }
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "examples": [
                        "5f7c62b43451a606c2fb0305"
                      ]
                    },
                    "parent": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "examples": [
                              "zackAll"
                            ]
                          },
                          "type": {
                            "type": "string",
                            "examples": [
                              "workflow"
                            ]
                          }
                        },
                        "required": []
                      }
                    }
                  },
                  "required": []
                },
                "$id": "array",
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "accumulator",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              }
            ],
            "steps": [
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 7,
                "type": "declaration",
                "library": "Object",
                "method": "new Object",
                "args": [
                  "{}"
                ],
                "view": {
                  "row": 3,
                  "col": 1
                }
              },
              {
                "id": 10,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/id"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 13,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 7,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 1,
                "type": "function",
                "function": "newComponentCheck_transformations (1)",
                "args": [
                  "",
                  ""
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/return/inNewComponent"
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 8,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "id",
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 2
                }
              },
              {
                "id": 11,
                "type": "method",
                "library": "Array",
                "method": "push",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 3
                }
              },
              {
                "id": 14,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 4,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 4
                }
              },
              {
                "id": 15,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "accumulator",
                  "ptr": ""
                }
              },
              {
                "id": 16,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "name",
                  null
                ],
                "view": {
                  "row": 4,
                  "col": 2
                }
              },
              {
                "id": 17,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 16,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 18,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 16,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 19,
                "type": "method",
                "library": "Object",
                "method": "getProperty",
                "args": [
                  null,
                  "name"
                ],
                "view": {
                  "row": 4,
                  "col": 1
                }
              },
              {
                "id": 20,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 19,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 21,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 19,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 16,
                  "ptr": "/args/2/value"
                }
              }
            ],
            "functions": [],
            "name": "ƒ_reduce_2",
            "view": {
              "col": 4,
              "row": 6
            },
            "id": "ƒ_reduce_2",
            "comments": []
          },
          {
            "incoming": [
              {
                "$id": "accumulator",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "zackAll"
                      ]
                    }
                  },
                  "required": []
                }
              },
              {
                "$id": "currentDiscoveredElement",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "examples": [
                      "zackAll"
                    ]
                  },
                  "parent": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "examples": [
                            "ac-agenda-job"
                          ]
                        }
                      },
                      "required": []
                    }
                  }
                },
                "required": []
              }
            ],
            "outgoing": [
              {
                "$id": "isNewComponent",
                "type": "boolean",
                "examples": [
                  true,
                  false
                ]
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "declaration",
                "library": "Boolean",
                "method": "new Boolean",
                "args": [
                  "1"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentDiscoveredElement",
                  "ptr": "/name"
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/3/value"
                }
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 2,
                "type": "method",
                "library": "Array",
                "method": "reduce",
                "args": [
                  null,
                  "newCompunentCheck_reduce (1)",
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 2
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "isNewComponent",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "newComponentCheck",
            "view": {
              "col": 2,
              "row": 6
            },
            "id": "userFunc_1",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              },
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "examples": [
                      "zackAll"
                    ]
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "zackAll"
                      ]
                    }
                  },
                  "required": []
                },
                "optional": true
              },
              {
                "$id": "constantValue1",
                "type": "string",
                "isConstValue": true
              }
            ],
            "outgoing": [
              {
                "title": "accumulator",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              }
            ],
            "steps": [
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "constantValue1",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/name"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 10,
                "type": "declaration",
                "library": "Number",
                "method": "new Number",
                "args": [
                  "0"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 11,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 10,
                  "ptr": "/return"
                },
                "to": {
                  "location": "declaration",
                  "name": 8,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 8,
                "type": "declaration",
                "library": "Boolean",
                "method": "new Boolean",
                "args": [
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 3,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 1
                }
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 8,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 1,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 4
                }
              },
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "accumulator",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "newCompunentCheck_reduce (1)",
            "view": {
              "col": 4,
              "row": 6
            },
            "id": "newCompunentCheck_reduce (1)",
            "comments": []
          },
          {
            "incoming": [
              {
                "$id": "accumulator",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "zackAll"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "examples": [
                        "5f7c62b43451a606c2fb0305"
                      ]
                    }
                  },
                  "required": []
                }
              },
              {
                "$id": "curentDiscoveredJST",
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "examples": [
                      "5f7c62b43451a606c2fb0305"
                    ]
                  }
                },
                "required": []
              }
            ],
            "outgoing": [
              {
                "$id": "inNewComponent",
                "type": "boolean",
                "examples": [
                  true,
                  false
                ]
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "declaration",
                "library": "Boolean",
                "method": "new Boolean",
                "args": [
                  "1"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "curentDiscoveredJST",
                  "ptr": "/id"
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/3/value"
                }
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 2,
                "type": "method",
                "library": "Array",
                "method": "reduce",
                "args": [
                  null,
                  "newComponentCheck_JST_reduce (1)",
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 2
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "inNewComponent",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "newComponentCheck_transformations (1)",
            "view": {
              "col": 3,
              "row": 6
            },
            "id": "newComponentCheck_transformations (1)",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              },
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "examples": [
                      "zackAll"
                    ]
                  },
                  "id": {
                    "type": "string",
                    "examples": [
                      "5f7c62b43451a606c2fb0305"
                    ]
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "zackAll"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "examples": [
                        "5f7c62b43451a606c2fb0305"
                      ]
                    }
                  },
                  "required": []
                },
                "optional": true
              },
              {
                "$id": "constantValue1",
                "type": "string",
                "isConstValue": true
              }
            ],
            "outgoing": [
              {
                "title": "accumulator",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              }
            ],
            "steps": [
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/id"
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "constantValue1",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 8,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 10,
                "type": "declaration",
                "library": "Number",
                "method": "new Number",
                "args": [
                  "0"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 11,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 10,
                  "ptr": "/return"
                },
                "to": {
                  "location": "declaration",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 1,
                "type": "declaration",
                "library": "Boolean",
                "method": "new Boolean",
                "args": [
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 4,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 1
                }
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 2,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 2
                }
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "accumulator",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "newComponentCheck_JST_reduce (1)",
            "view": {
              "col": 3,
              "row": 6
            },
            "id": "newComponentCheck_JST_reduce (1)",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 4,
          "row": 11
        },
        "created": "2025-02-06T18:32:40.685Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:40.685Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "6075bcc58c016f0098c72846",
        "name": "filterActionsGitlab",
        "description": "",
        "incoming": [
          {
            "$id": "branch",
            "type": "string"
          },
          {
            "$id": "commit_message",
            "type": "string"
          },
          {
            "$id": "filterActions",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "string",
                  "examples": [
                    "update"
                  ]
                },
                "file_path": {
                  "type": "string",
                  "examples": [
                    "scripts/generate.js"
                  ]
                },
                "content": {
                  "type": "string",
                  "examples": [
                    "const path = require('path');\nconst fs = require('fs');\n\nconst files = ['package.json', 'manifest.json', 'README.md'];\nlet success = true;\n\nconst PID = process.argv[2];\nconst gitlabURL = process.argv[3];\nconst gitlabBranch = process.argv[4];\nif (PID === null || PID == undefined || Number.isNaN(parseInt(PID, 10))) {\n  console.error('Please run this script with Gitlab Project ID (integer) as an argument');\n  process.exit(2);\n}\nconsole.log(`Generating artifact.json file w/ ${PID} as GitLab Project ID`);\n\n/*function fileTypetoType(fileType) {\n  const underscoreToDash = fileType.replace(/_/g, '-');\n  if (\n    fileType === 'ac_agenda_jobs' ||\n    fileType === 'mop_templates' ||\n    fileType === 'mop_analytic_templates' ||\n    fileType === 'templates' ||\n    fileType === 'workflows'\n  ) {\n    const singularize = underscoreToDash.substring(\n      0,\n      underscoreToDash.length - 1\n    );\n    return singularize;\n  }\n  if (fileType === 'catalog_store') {\n    return 'service-catalog';\n  }\n  return underscoreToDash;\n}*/\nconst filePath = __dirname.replace(\"/scripts\", \"\");\ntry {\n  const [packageJSON, manifest, readme] = files.map(entry => {\n    const result = fs.readFileSync(path.join(filePath, `./${entry}`), {\n      encoding: 'utf-8'\n    });\n\n    if (entry !== 'README.md') {\n        const parsedRes = JSON.parse(result);\n        if (entry === 'manifest.json' && Object.prototype.hasOwnProperty.call(parsedRes, 'version')) {\n          delete parsedRes.version;\n        }\n      return parsedRes;\n    } else {\n      return result.replace(/\\.\\//gm, `${gitlabURL}/-/raw/${gitlabBranch}/`);\n    }\n  });\n\n  // const result = fs.readdirSync(path.join(__dirname, './bundles'));\n  const bundles = [];\n  // result.forEach(entry => {\n  //   console.log(`   ➡ generating ${entry}(s)`);\n  //   const fileNames = fs.readdirSync(path.join(__dirname, `./bundles/${entry}`));\n  //   fileNames.forEach(file => {\n  //     const data = fs.readFileSync(\n  //       path.join(__dirname, `./bundles/${entry}/${file}`),\n  //       { encoding: 'utf-8' }\n  //     );\n  //     try {\n  //       bundles.push({ type: fileTypetoType(entry), data: JSON.parse(data) });\n  //       console.log(`     ⚪ ${file}   -   ✅`);\n  //     } catch(err) {\n  //       success = false;\n  //       console.log(`     ⚪ ${file}   -   ❌  - ${err}`);\n  //     }\n  //   });\n  // });\n\n  const components = manifest.artifacts;\n  components.forEach(file => {\n    try {\n      const data = fs.readFileSync(\n        path.join(filePath, `./${file.location}`),\n        { encoding: 'utf-8' }\n      );\n      bundles.push({ type: file.type, data: JSON.parse(data) });\n      console.log(`     ⚪ (${file.type})   -   ${file.location}   -   ✅`);\n    } catch (err) {\n      success = false;\n      console.log(`     ⚪  (${file.type})   -   ${file.location}   -   ❌  - ${err}`);\n    }\n  });\n\n  const metadata = {\n    name: packageJSON.name,\n    version: packageJSON.version,\n    description: packageJSON.description,\n    license: packageJSON.license,\n    repository: packageJSON.repository,\n    keywords: packageJSON.keywords,\n    author: packageJSON.author,\n    IAPDependencies: packageJSON.IAPDependencies,\n    gitlabId: parseInt(PID, 10),\n  };\n\n  if (success) {\n    console.log(`\\n\\nFinished successfully`);\n  } else {\n    console.log(`\\n\\nFinished with error(s)`);\n    process.exit(1);\n  }\n  const artifact = { metadata, manifest, bundles, readme };\n  fs.writeFileSync(\n    path.join(filePath, './artifact.json'),\n    JSON.stringify(artifact, null, 2)\n  );\n} catch (err) {\n  console.error(`Failed to generate artifact.json file: ${err}`);\n  process.exit(1);\n}"
                  ]
                }
              },
              "required": []
            }
          }
        ],
        "outgoing": [
          {
            "$id": "filteredCommit",
            "type": "object",
            "properties": {
              "branch": {
                "type": "string",
                "examples": [
                  "major/2020-10-08T07-48-36"
                ]
              },
              "commit_message": {
                "type": "string",
                "examples": [
                  "10/8 I added a child job to the workflow and am now running the push to gitlab with re-discovery"
                ]
              },
              "actions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "action": {
                      "type": "string",
                      "examples": [
                        "update"
                      ]
                    },
                    "file_path": {
                      "type": "string",
                      "examples": [
                        "scripts/generate.js"
                      ]
                    },
                    "content": {
                      "type": "string",
                      "examples": [
                        "const path = require('path');\nconst fs = require('fs');\n\nconst files = ['package.json', 'manifest.json', 'README.md'];\nlet success = true;\n\nconst PID = process.argv[2];\nconst gitlabURL = process.argv[3];\nconst gitlabBranch = process.argv[4];\nif (PID === null || PID == undefined || Number.isNaN(parseInt(PID, 10))) {\n  console.error('Please run this script with Gitlab Project ID (integer) as an argument');\n  process.exit(2);\n}\nconsole.log(`Generating artifact.json file w/ ${PID} as GitLab Project ID`);\n\n/*function fileTypetoType(fileType) {\n  const underscoreToDash = fileType.replace(/_/g, '-');\n  if (\n    fileType === 'ac_agenda_jobs' ||\n    fileType === 'mop_templates' ||\n    fileType === 'mop_analytic_templates' ||\n    fileType === 'templates' ||\n    fileType === 'workflows'\n  ) {\n    const singularize = underscoreToDash.substring(\n      0,\n      underscoreToDash.length - 1\n    );\n    return singularize;\n  }\n  if (fileType === 'catalog_store') {\n    return 'service-catalog';\n  }\n  return underscoreToDash;\n}*/\nconst filePath = __dirname.replace(\"/scripts\", \"\");\ntry {\n  const [packageJSON, manifest, readme] = files.map(entry => {\n    const result = fs.readFileSync(path.join(filePath, `./${entry}`), {\n      encoding: 'utf-8'\n    });\n\n    if (entry !== 'README.md') {\n        const parsedRes = JSON.parse(result);\n        if (entry === 'manifest.json' && Object.prototype.hasOwnProperty.call(parsedRes, 'version')) {\n          delete parsedRes.version;\n        }\n      return parsedRes;\n    } else {\n      return result.replace(/\\.\\//gm, `${gitlabURL}/-/raw/${gitlabBranch}/`);\n    }\n  });\n\n  // const result = fs.readdirSync(path.join(__dirname, './bundles'));\n  const bundles = [];\n  // result.forEach(entry => {\n  //   console.log(`   ➡ generating ${entry}(s)`);\n  //   const fileNames = fs.readdirSync(path.join(__dirname, `./bundles/${entry}`));\n  //   fileNames.forEach(file => {\n  //     const data = fs.readFileSync(\n  //       path.join(__dirname, `./bundles/${entry}/${file}`),\n  //       { encoding: 'utf-8' }\n  //     );\n  //     try {\n  //       bundles.push({ type: fileTypetoType(entry), data: JSON.parse(data) });\n  //       console.log(`     ⚪ ${file}   -   ✅`);\n  //     } catch(err) {\n  //       success = false;\n  //       console.log(`     ⚪ ${file}   -   ❌  - ${err}`);\n  //     }\n  //   });\n  // });\n\n  const components = manifest.artifacts;\n  components.forEach(file => {\n    try {\n      const data = fs.readFileSync(\n        path.join(filePath, `./${file.location}`),\n        { encoding: 'utf-8' }\n      );\n      bundles.push({ type: file.type, data: JSON.parse(data) });\n      console.log(`     ⚪ (${file.type})   -   ${file.location}   -   ✅`);\n    } catch (err) {\n      success = false;\n      console.log(`     ⚪  (${file.type})   -   ${file.location}   -   ❌  - ${err}`);\n    }\n  });\n\n  const metadata = {\n    name: packageJSON.name,\n    version: packageJSON.version,\n    description: packageJSON.description,\n    license: packageJSON.license,\n    repository: packageJSON.repository,\n    keywords: packageJSON.keywords,\n    author: packageJSON.author,\n    IAPDependencies: packageJSON.IAPDependencies,\n    gitlabId: parseInt(PID, 10),\n  };\n\n  if (success) {\n    console.log(`\\n\\nFinished successfully`);\n  } else {\n    console.log(`\\n\\nFinished with error(s)`);\n    process.exit(1);\n  }\n  const artifact = { metadata, manifest, bundles, readme };\n  fs.writeFileSync(\n    path.join(filePath, './artifact.json'),\n    JSON.stringify(artifact, null, 2)\n  );\n} catch (err) {\n  console.error(`Failed to generate artifact.json file: ${err}`);\n  process.exit(1);\n}"
                      ]
                    }
                  },
                  "required": []
                }
              }
            },
            "required": []
          }
        ],
        "steps": [
          {
            "id": 2,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "filterActions",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 1,
            "type": "method",
            "library": "Array",
            "method": "filter",
            "args": [
              null,
              "ƒ_query_1"
            ],
            "view": {
              "row": 2,
              "col": 2
            }
          },
          {
            "id": 3,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "filteredCommit",
              "ptr": "/actions"
            }
          },
          {
            "id": 4,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "commit_message",
              "ptr": ""
            },
            "to": {
              "location": "outgoing",
              "name": "filteredCommit",
              "ptr": "/commit_message"
            }
          },
          {
            "id": 5,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "branch",
              "ptr": ""
            },
            "to": {
              "location": "outgoing",
              "name": "filteredCommit",
              "ptr": "/branch"
            }
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "action": {
                    "type": "string",
                    "examples": [
                      "update"
                    ]
                  },
                  "file_path": {
                    "type": "string",
                    "examples": [
                      "scripts/generate.js"
                    ]
                  },
                  "content": {
                    "type": "string",
                    "examples": [
                      "const path = require('path');\nconst fs = require('fs');\n\nconst files = ['package.json', 'manifest.json', 'README.md'];\nlet success = true;\n\nconst PID = process.argv[2];\nconst gitlabURL = process.argv[3];\nconst gitlabBranch = process.argv[4];\nif (PID === null || PID == undefined || Number.isNaN(parseInt(PID, 10))) {\n  console.error('Please run this script with Gitlab Project ID (integer) as an argument');\n  process.exit(2);\n}\nconsole.log(`Generating artifact.json file w/ ${PID} as GitLab Project ID`);\n\n/*function fileTypetoType(fileType) {\n  const underscoreToDash = fileType.replace(/_/g, '-');\n  if (\n    fileType === 'ac_agenda_jobs' ||\n    fileType === 'mop_templates' ||\n    fileType === 'mop_analytic_templates' ||\n    fileType === 'templates' ||\n    fileType === 'workflows'\n  ) {\n    const singularize = underscoreToDash.substring(\n      0,\n      underscoreToDash.length - 1\n    );\n    return singularize;\n  }\n  if (fileType === 'catalog_store') {\n    return 'service-catalog';\n  }\n  return underscoreToDash;\n}*/\nconst filePath = __dirname.replace(\"/scripts\", \"\");\ntry {\n  const [packageJSON, manifest, readme] = files.map(entry => {\n    const result = fs.readFileSync(path.join(filePath, `./${entry}`), {\n      encoding: 'utf-8'\n    });\n\n    if (entry !== 'README.md') {\n        const parsedRes = JSON.parse(result);\n        if (entry === 'manifest.json' && Object.prototype.hasOwnProperty.call(parsedRes, 'version')) {\n          delete parsedRes.version;\n        }\n      return parsedRes;\n    } else {\n      return result.replace(/\\.\\//gm, `${gitlabURL}/-/raw/${gitlabBranch}/`);\n    }\n  });\n\n  // const result = fs.readdirSync(path.join(__dirname, './bundles'));\n  const bundles = [];\n  // result.forEach(entry => {\n  //   console.log(`   ➡ generating ${entry}(s)`);\n  //   const fileNames = fs.readdirSync(path.join(__dirname, `./bundles/${entry}`));\n  //   fileNames.forEach(file => {\n  //     const data = fs.readFileSync(\n  //       path.join(__dirname, `./bundles/${entry}/${file}`),\n  //       { encoding: 'utf-8' }\n  //     );\n  //     try {\n  //       bundles.push({ type: fileTypetoType(entry), data: JSON.parse(data) });\n  //       console.log(`     ⚪ ${file}   -   ✅`);\n  //     } catch(err) {\n  //       success = false;\n  //       console.log(`     ⚪ ${file}   -   ❌  - ${err}`);\n  //     }\n  //   });\n  // });\n\n  const components = manifest.artifacts;\n  components.forEach(file => {\n    try {\n      const data = fs.readFileSync(\n        path.join(filePath, `./${file.location}`),\n        { encoding: 'utf-8' }\n      );\n      bundles.push({ type: file.type, data: JSON.parse(data) });\n      console.log(`     ⚪ (${file.type})   -   ${file.location}   -   ✅`);\n    } catch (err) {\n      success = false;\n      console.log(`     ⚪  (${file.type})   -   ${file.location}   -   ❌  - ${err}`);\n    }\n  });\n\n  const metadata = {\n    name: packageJSON.name,\n    version: packageJSON.version,\n    description: packageJSON.description,\n    license: packageJSON.license,\n    repository: packageJSON.repository,\n    keywords: packageJSON.keywords,\n    author: packageJSON.author,\n    IAPDependencies: packageJSON.IAPDependencies,\n    gitlabId: parseInt(PID, 10),\n  };\n\n  if (success) {\n    console.log(`\\n\\nFinished successfully`);\n  } else {\n    console.log(`\\n\\nFinished with error(s)`);\n    process.exit(1);\n  }\n  const artifact = { metadata, manifest, bundles, readme };\n  fs.writeFileSync(\n    path.join(filePath, './artifact.json'),\n    JSON.stringify(artifact, null, 2)\n  );\n} catch (err) {\n  console.error(`Failed to generate artifact.json file: ${err}`);\n  process.exit(1);\n}"
                    ]
                  }
                },
                "required": [],
                "$id": "element"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "action": {
                      "type": "string",
                      "examples": [
                        "update"
                      ]
                    },
                    "file_path": {
                      "type": "string",
                      "examples": [
                        "scripts/generate.js"
                      ]
                    },
                    "content": {
                      "type": "string",
                      "examples": [
                        "const path = require('path');\nconst fs = require('fs');\n\nconst files = ['package.json', 'manifest.json', 'README.md'];\nlet success = true;\n\nconst PID = process.argv[2];\nconst gitlabURL = process.argv[3];\nconst gitlabBranch = process.argv[4];\nif (PID === null || PID == undefined || Number.isNaN(parseInt(PID, 10))) {\n  console.error('Please run this script with Gitlab Project ID (integer) as an argument');\n  process.exit(2);\n}\nconsole.log(`Generating artifact.json file w/ ${PID} as GitLab Project ID`);\n\n/*function fileTypetoType(fileType) {\n  const underscoreToDash = fileType.replace(/_/g, '-');\n  if (\n    fileType === 'ac_agenda_jobs' ||\n    fileType === 'mop_templates' ||\n    fileType === 'mop_analytic_templates' ||\n    fileType === 'templates' ||\n    fileType === 'workflows'\n  ) {\n    const singularize = underscoreToDash.substring(\n      0,\n      underscoreToDash.length - 1\n    );\n    return singularize;\n  }\n  if (fileType === 'catalog_store') {\n    return 'service-catalog';\n  }\n  return underscoreToDash;\n}*/\nconst filePath = __dirname.replace(\"/scripts\", \"\");\ntry {\n  const [packageJSON, manifest, readme] = files.map(entry => {\n    const result = fs.readFileSync(path.join(filePath, `./${entry}`), {\n      encoding: 'utf-8'\n    });\n\n    if (entry !== 'README.md') {\n        const parsedRes = JSON.parse(result);\n        if (entry === 'manifest.json' && Object.prototype.hasOwnProperty.call(parsedRes, 'version')) {\n          delete parsedRes.version;\n        }\n      return parsedRes;\n    } else {\n      return result.replace(/\\.\\//gm, `${gitlabURL}/-/raw/${gitlabBranch}/`);\n    }\n  });\n\n  // const result = fs.readdirSync(path.join(__dirname, './bundles'));\n  const bundles = [];\n  // result.forEach(entry => {\n  //   console.log(`   ➡ generating ${entry}(s)`);\n  //   const fileNames = fs.readdirSync(path.join(__dirname, `./bundles/${entry}`));\n  //   fileNames.forEach(file => {\n  //     const data = fs.readFileSync(\n  //       path.join(__dirname, `./bundles/${entry}/${file}`),\n  //       { encoding: 'utf-8' }\n  //     );\n  //     try {\n  //       bundles.push({ type: fileTypetoType(entry), data: JSON.parse(data) });\n  //       console.log(`     ⚪ ${file}   -   ✅`);\n  //     } catch(err) {\n  //       success = false;\n  //       console.log(`     ⚪ ${file}   -   ❌  - ${err}`);\n  //     }\n  //   });\n  // });\n\n  const components = manifest.artifacts;\n  components.forEach(file => {\n    try {\n      const data = fs.readFileSync(\n        path.join(filePath, `./${file.location}`),\n        { encoding: 'utf-8' }\n      );\n      bundles.push({ type: file.type, data: JSON.parse(data) });\n      console.log(`     ⚪ (${file.type})   -   ${file.location}   -   ✅`);\n    } catch (err) {\n      success = false;\n      console.log(`     ⚪  (${file.type})   -   ${file.location}   -   ❌  - ${err}`);\n    }\n  });\n\n  const metadata = {\n    name: packageJSON.name,\n    version: packageJSON.version,\n    description: packageJSON.description,\n    license: packageJSON.license,\n    repository: packageJSON.repository,\n    keywords: packageJSON.keywords,\n    author: packageJSON.author,\n    IAPDependencies: packageJSON.IAPDependencies,\n    gitlabId: parseInt(PID, 10),\n  };\n\n  if (success) {\n    console.log(`\\n\\nFinished successfully`);\n  } else {\n    console.log(`\\n\\nFinished with error(s)`);\n    process.exit(1);\n  }\n  const artifact = { metadata, manifest, bundles, readme };\n  fs.writeFileSync(\n    path.join(filePath, './artifact.json'),\n    JSON.stringify(artifact, null, 2)\n  );\n} catch (err) {\n  console.error(`Failed to generate artifact.json file: ${err}`);\n  process.exit(1);\n}"
                      ]
                    }
                  },
                  "required": []
                },
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "return",
                "type": "boolean",
                "$id": "return"
              }
            ],
            "steps": [
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "element",
                  "ptr": "/file_path"
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "element",
                  "ptr": "/file_path"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 1,
                "type": "method",
                "library": "String",
                "method": "includes",
                "args": [
                  null,
                  "bundles/",
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 2,
                "type": "method",
                "library": "String",
                "method": "includes",
                "args": [
                  null,
                  "manifest.json",
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 1
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 5,
                "type": "method",
                "library": "Logical",
                "method": "or",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 9,
                "type": "method",
                "library": "String",
                "method": "includes",
                "args": [
                  null,
                  "README.md",
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 1
                },
                "context": "#"
              },
              {
                "id": 10,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "element",
                  "ptr": "/file_path"
                },
                "to": {
                  "location": "method",
                  "name": 9,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 11,
                "type": "method",
                "library": "Logical",
                "method": "or",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 3
                },
                "context": "#"
              },
              {
                "id": 12,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 13,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 9,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/args/1/value"
                },
                "context": "#"
              },
              {
                "id": 14,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "return",
                  "ptr": ""
                },
                "context": "#"
              }
            ],
            "functions": [],
            "name": "ƒ_query_1",
            "view": {
              "col": 3,
              "row": 6
            },
            "id": "ƒ_query_1",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 3,
          "row": 6
        },
        "created": "2025-02-06T18:32:40.729Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:40.729Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "621d36785da44100e455a1d3",
        "name": "createAndUpdateArraysPP",
        "description": "",
        "incoming": [
          {
            "$id": "artifact",
            "type": "object",
            "properties": {
              "update": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": []
                },
                "$id": "update"
              },
              "create": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": []
                },
                "$id": "create"
              }
            },
            "required": []
          },
          {
            "$id": "scriptsObject",
            "type": "object",
            "properties": {},
            "required": []
          },
          {
            "$id": "ymlFile",
            "type": "object",
            "properties": {},
            "required": []
          },
          {
            "$id": "testsObject",
            "type": "object"
          }
        ],
        "outgoing": [
          {
            "$id": "createArray",
            "type": "object",
            "properties": {
              "create": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": []
                }
              }
            },
            "required": []
          },
          {
            "$id": "updateArray",
            "type": "object",
            "properties": {
              "update": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": []
                }
              }
            },
            "required": []
          }
        ],
        "steps": [
          {
            "id": 4,
            "type": "declaration",
            "library": "Array",
            "method": "new Array",
            "args": [],
            "view": {
              "row": 1,
              "col": 1
            },
            "polymorphIndex": 0
          },
          {
            "id": 7,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "scriptsObject",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 5,
              "ptr": "/args/1/value"
            }
          },
          {
            "id": 10,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "artifact",
              "ptr": "/create"
            },
            "to": {
              "location": "method",
              "name": 8,
              "ptr": "/args/1/value"
            }
          },
          {
            "id": 11,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "artifact",
              "ptr": "/update"
            },
            "to": {
              "location": "method",
              "name": 8,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 14,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "ymlFile",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 8,
              "ptr": "/args/3/value"
            }
          },
          {
            "id": 6,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 4,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 5,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 5,
            "type": "method",
            "library": "Array",
            "method": "push",
            "args": [
              null,
              null
            ],
            "view": {
              "row": 1,
              "col": 2
            }
          },
          {
            "id": 9,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 5,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 8,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 8,
            "type": "method",
            "library": "Array",
            "method": "concat",
            "args": [
              null,
              null,
              null,
              null,
              null
            ],
            "view": {
              "row": 3,
              "col": 2
            }
          },
          {
            "id": 12,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 8,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "createArray",
              "ptr": "/create"
            }
          },
          {
            "id": 13,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 8,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "updateArray",
              "ptr": "/update"
            }
          },
          {
            "id": 15,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "testsObject",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 8,
              "ptr": "/args/4/value"
            }
          }
        ],
        "functions": [],
        "comments": [],
        "view": {
          "col": 3,
          "row": 5
        },
        "created": "2025-02-06T18:32:40.754Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:40.754Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "621d05685da44100e455a1d1",
        "name": "getFileObjectsPP",
        "description": "",
        "incoming": [
          {
            "$id": "scriptsArr",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "examples": [
                    "generate%2Ejs"
                  ]
                },
                "content": {
                  "type": "string",
                  "examples": [
                    "fileContentGoesHere"
                  ]
                }
              },
              "required": []
            }
          },
          {
            "$id": "ymlFile",
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "examples": [
                  "%2Egitlab-ci%2Eyml"
                ]
              },
              "content": {
                "type": "string",
                "examples": [
                  "fdsa"
                ]
              }
            },
            "required": []
          },
          {
            "$id": "testFiles",
            "type": "array"
          }
        ],
        "outgoing": [
          {
            "$id": "scriptsFolder",
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "examples": [
                  "scripts"
                ]
              },
              "type": {
                "type": "string",
                "examples": [
                  "directory"
                ]
              },
              "content": {
                "type": "array"
              }
            },
            "required": []
          },
          {
            "$id": "YMLFile",
            "type": "object",
            "properties": {},
            "required": []
          },
          {
            "$id": "testFolder",
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "examples": [
                  "test"
                ]
              },
              "type": {
                "type": "string",
                "examples": [
                  "directory"
                ]
              },
              "content": {
                "type": "array"
              }
            },
            "required": []
          }
        ],
        "steps": [
          {
            "id": 1,
            "type": "method",
            "library": "Array",
            "method": "map",
            "args": [
              null,
              "addTypeField"
            ],
            "view": {
              "row": 2,
              "col": 1
            }
          },
          {
            "id": 2,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "scriptsArr",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 3,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "scriptsFolder",
              "ptr": "/content"
            }
          },
          {
            "id": 4,
            "type": "declaration",
            "library": "String",
            "method": "new String",
            "args": [
              "scripts"
            ],
            "view": {
              "row": 1,
              "col": 3
            }
          },
          {
            "id": 5,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 4,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "scriptsFolder",
              "ptr": "/name"
            }
          },
          {
            "id": 6,
            "type": "declaration",
            "library": "String",
            "method": "new String",
            "args": [
              "directory"
            ],
            "view": {
              "row": 1,
              "col": 1
            }
          },
          {
            "id": 7,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 6,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "scriptsFolder",
              "ptr": "/type"
            }
          },
          {
            "id": 8,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "type",
              "file"
            ],
            "view": {
              "row": 3,
              "col": 1
            }
          },
          {
            "id": 9,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "ymlFile",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 8,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 10,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 8,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "YMLFile",
              "ptr": ""
            }
          },
          {
            "id": 11,
            "type": "method",
            "library": "Array",
            "method": "map",
            "args": [
              null,
              "addTypeField"
            ],
            "view": {
              "row": 3,
              "col": 3
            }
          },
          {
            "id": 12,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "testFiles",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 11,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 13,
            "type": "declaration",
            "library": "String",
            "method": "new String",
            "args": [
              "test"
            ],
            "view": {
              "row": 2,
              "col": 3
            }
          },
          {
            "id": 14,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 13,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "testFolder",
              "ptr": "/name"
            }
          },
          {
            "id": 15,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 6,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "testFolder",
              "ptr": "/type"
            }
          },
          {
            "id": 16,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 11,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "testFolder",
              "ptr": "/content"
            }
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "examples": [
                      "generate%2Ejs"
                    ]
                  },
                  "content": {
                    "type": "string",
                    "examples": [
                      "fileContentGoesHere"
                    ]
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "generate%2Ejs"
                      ]
                    },
                    "content": {
                      "type": "string",
                      "examples": [
                        "fileContentGoesHere"
                      ]
                    }
                  },
                  "required": []
                },
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "newValue",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "editable": true,
                "$id": "newValue"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "type",
                  "file"
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "newValue",
                  "ptr": ""
                }
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              }
            ],
            "functions": [],
            "name": "ƒ_map_1",
            "view": {
              "col": 2,
              "row": 4
            },
            "id": "addTypeField",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 3,
          "row": 5
        },
        "created": "2025-02-06T18:32:40.772Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:40.772Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "622f933c53c0030101260b09",
        "name": "projectExistsGitlab",
        "description": "",
        "incoming": [
          {
            "$id": "groupsId",
            "type": "object",
            "properties": {
              "response": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "examples": [
                      5
                    ]
                  },
                  "full_name": {
                    "type": "string",
                    "examples": [
                      "itential / dsup"
                    ]
                  },
                  "full_path": {
                    "type": "string",
                    "examples": [
                      "itential/dsup"
                    ]
                  },
                  "projects": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "examples": [
                            25
                          ]
                        },
                        "description": {
                          "type": [
                            "null",
                            "string"
                          ]
                        },
                        "name": {
                          "type": "string",
                          "examples": [
                            "Jenn Demo Prebuilt3"
                          ]
                        },
                        "name_with_namespace": {
                          "type": "string",
                          "examples": [
                            "itential / dsup / Jenn Demo Prebuilt3"
                          ]
                        },
                        "path": {
                          "type": "string",
                          "examples": [
                            "jenn-demo-prebuilt3"
                          ]
                        },
                        "path_with_namespace": {
                          "type": "string",
                          "examples": [
                            "itential/dsup/jenn-demo-prebuilt3"
                          ]
                        }
                      },
                      "required": []
                    },
                    "$id": "projects"
                  },
                  "shared_projects": {
                    "type": "array"
                  }
                },
                "required": []
              }
            },
            "required": []
          },
          {
            "$id": "path",
            "type": "string"
          }
        ],
        "outgoing": [
          {
            "$id": "projectExists",
            "type": "boolean"
          }
        ],
        "steps": [
          {
            "id": 1,
            "type": "method",
            "library": "Array",
            "method": "find",
            "args": [
              null,
              "ƒ_query_1",
              null
            ],
            "view": {
              "row": 1,
              "col": 1
            }
          },
          {
            "id": 2,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "groupsId",
              "ptr": "/response/projects"
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 3,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "path",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 4,
            "type": "declaration",
            "library": "Boolean",
            "method": "new Boolean",
            "args": [
              null
            ],
            "view": {
              "row": 1,
              "col": 2
            }
          },
          {
            "id": 5,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "declaration",
              "name": 4,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 6,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 4,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "projectExists",
              "ptr": ""
            }
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "examples": [
                      25
                    ]
                  },
                  "description": {
                    "type": "null"
                  },
                  "name": {
                    "type": "string",
                    "examples": [
                      "Jenn Demo Prebuilt3"
                    ]
                  },
                  "name_with_namespace": {
                    "type": "string",
                    "examples": [
                      "itential / dsup / Jenn Demo Prebuilt3"
                    ]
                  },
                  "path": {
                    "type": "string",
                    "examples": [
                      "jenn-demo-prebuilt3"
                    ]
                  },
                  "path_with_namespace": {
                    "type": "string",
                    "examples": [
                      "itential/dsup/jenn-demo-prebuilt3"
                    ]
                  }
                },
                "required": [],
                "$id": "element"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "examples": [
                        25
                      ]
                    },
                    "description": {
                      "type": "null"
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "Jenn Demo Prebuilt3"
                      ]
                    },
                    "name_with_namespace": {
                      "type": "string",
                      "examples": [
                        "itential / dsup / Jenn Demo Prebuilt3"
                      ]
                    },
                    "path": {
                      "type": "string",
                      "examples": [
                        "jenn-demo-prebuilt3"
                      ]
                    },
                    "path_with_namespace": {
                      "type": "string",
                      "examples": [
                        "itential/dsup/jenn-demo-prebuilt3"
                      ]
                    }
                  },
                  "required": []
                },
                "$id": "array",
                "optional": true
              },
              {
                "$id": "constantValue1",
                "type": "string",
                "isConstValue": true
              }
            ],
            "outgoing": [
              {
                "title": "return",
                "type": "boolean",
                "$id": "return"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 1
                }
              },
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "element",
                  "ptr": "/path"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "constantValue1",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "return",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "ƒ_query_1",
            "view": {
              "col": 2,
              "row": 4
            },
            "id": "ƒ_query_1",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 2,
          "row": 5
        },
        "created": "2025-02-06T18:32:41.022Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:41.022Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "621fd789da0c6c470881bdab",
        "name": "generateCommitActions",
        "description": "",
        "incoming": [
          {
            "$id": "fixedArray",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "examples": [
                    "scripts"
                  ]
                },
                "type": {
                  "type": "string",
                  "examples": [
                    "directory"
                  ]
                },
                "content": {
                  "type": [
                    "array",
                    "string"
                  ],
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "examples": [
                          "generate%2Ejs"
                        ]
                      },
                      "content": {
                        "type": [
                          "string",
                          "array"
                        ],
                        "examples": [
                          "const path = require('path');\nconst fs = require('fs');\n\nconst files = ['package%2Ejson', 'manifest%2Ejson', 'README%2Emd'];\nlet success = true;\n\nconst PID = process%2Eargv[2];\nconst gitlabURL = process%2Eargv[3];\nconst gitlabBranch = process%2Eargv[4];\nif (PID === null || PID == undefined || Number%2EisNaN(parseInt(PID, 10))) {\n  console%2Eerror('Please run this script with Gitlab Project ID (integer) as an argument');\n  process%2Eexit(2);\n}\nconsole%2Elog(`Generating artifact%2Ejson file w/ ${PID} as GitLab Project ID`);\n\n/*function fileTypetoType(fileType) {\n  const underscoreToDash = fileType%2Ereplace(/_/g, '-');\n  if (\n    fileType === 'ac_agenda_jobs' ||\n    fileType === 'mop_templates' ||\n    fileType === 'mop_analytic_templates' ||\n    fileType === 'templates' ||\n    fileType === 'workflows'\n  ) {\n    const singularize = underscoreToDash%2Esubstring(\n      0,\n      underscoreToDash%2Elength - 1\n    );\n    return singularize;\n  }\n  if (fileType === 'catalog_store') {\n    return 'service-catalog';\n  }\n  return underscoreToDash;\n}*/\nconst filePath = __dirname%2Ereplace(\"/scripts\", \"\");\ntry {\n  const [packageJSON, manifest, readme] = files%2Emap(entry => {\n    const result = fs%2EreadFileSync(path%2Ejoin(filePath, `%2E/${entry}`), {\n      encoding: 'utf-8'\n    });\n\n    if (entry !== 'README%2Emd') {\n        const parsedRes = JSON%2Eparse(result);\n        if (entry === 'manifest%2Ejson' && Object%2Eprototype%2EhasOwnProperty%2Ecall(parsedRes, 'version')) {\n          delete parsedRes%2Eversion;\n        }\n      return parsedRes;\n    } else {\n      return result%2Ereplace(/\\%2E\\//gm, `${gitlabURL}/-/raw/${gitlabBranch}/`);\n    }\n  });\n\n  // const result = fs%2EreaddirSync(path%2Ejoin(__dirname, '%2E/bundles'));\n  const bundles = [];\n  // result%2EforEach(entry => {\n  //   console%2Elog(`   ➡ generating ${entry}(s)`);\n  //   const fileNames = fs%2EreaddirSync(path%2Ejoin(__dirname, `%2E/bundles/${entry}`));\n  //   fileNames%2EforEach(file => {\n  //     const data = fs%2EreadFileSync(\n  //       path%2Ejoin(__dirname, `%2E/bundles/${entry}/${file}`),\n  //       { encoding: 'utf-8' }\n  //     );\n  //     try {\n  //       bundles%2Epush({ type: fileTypetoType(entry), data: JSON%2Eparse(data) });\n  //       console%2Elog(`     ⚪ ${file}   -   ✅`);\n  //     } catch(err) {\n  //       success = false;\n  //       console%2Elog(`     ⚪ ${file}   -   ❌  - ${err}`);\n  //     }\n  //   });\n  // });\n\n  const components = manifest%2Eartifacts;\n  components%2EforEach(file => {\n    try {\n      const data = fs%2EreadFileSync(\n        path%2Ejoin(filePath, `%2E/${file%2Elocation}`),\n        { encoding: 'utf-8' }\n      );\n      bundles%2Epush({ type: file%2Etype, data: JSON%2Eparse(data) });\n      console%2Elog(`     ⚪ (${file%2Etype})   -   ${file%2Elocation}   -   ✅`);\n    } catch (err) {\n      success = false;\n      console%2Elog(`     ⚪  (${file%2Etype})   -   ${file%2Elocation}   -   ❌  - ${err}`);\n    }\n  });\n\n  const metadata = {\n    name: packageJSON%2Ename,\n    version: packageJSON%2Eversion,\n    description: packageJSON%2Edescription,\n    license: packageJSON%2Elicense,\n    repository: packageJSON%2Erepository,\n    keywords: packageJSON%2Ekeywords,\n    author: packageJSON%2Eauthor,\n    IAPDependencies: packageJSON%2EIAPDependencies,\n    gitlabId: parseInt(PID, 10),\n  };\n\n  if (success) {\n    console%2Elog(`\\n\\nFinished successfully`);\n  } else {\n    console%2Elog(`\\n\\nFinished with error(s)`);\n    process%2Eexit(1);\n  }\n  const artifact = { metadata, manifest, bundles, readme };\n  fs%2EwriteFileSync(\n    path%2Ejoin(filePath, '%2E/artifact%2Ejson'),\n    JSON%2Estringify(artifact, null, 2)\n  );\n} catch (err) {\n  console%2Eerror(`Failed to generate artifact%2Ejson file: ${err}`);\n  process%2Eexit(1);\n}\n"
                        ]
                      },
                      "type": {
                        "type": "string",
                        "examples": [
                          "file"
                        ]
                      }
                    },
                    "required": []
                  }
                }
              },
              "required": []
            }
          },
          {
            "$id": "action",
            "type": "string"
          }
        ],
        "outgoing": [
          {
            "$id": "output",
            "type": "object",
            "properties": {
              "commitActions": {
                "type": "object"
              }
            },
            "required": []
          }
        ],
        "steps": [
          {
            "id": 4,
            "type": "function",
            "function": "userFunc_2",
            "args": [
              null,
              ""
            ],
            "view": {
              "row": 2,
              "col": 2
            }
          },
          {
            "id": 7,
            "type": "method",
            "library": "Object",
            "method": "getProperty",
            "args": [
              null,
              "commitActions"
            ],
            "view": {
              "row": 1,
              "col": 3
            }
          },
          {
            "id": 8,
            "type": "assign",
            "from": {
              "location": "function",
              "name": 4,
              "ptr": "/return/commitActions"
            },
            "to": {
              "location": "method",
              "name": 7,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 9,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 7,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "output",
              "ptr": "/commitActions"
            }
          },
          {
            "id": 10,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "action",
              "ptr": ""
            },
            "to": {
              "location": "function",
              "name": 4,
              "ptr": "/args/1/value"
            }
          },
          {
            "id": 11,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "fixedArray",
              "ptr": ""
            },
            "to": {
              "location": "function",
              "name": 4,
              "ptr": "/args/0/value"
            }
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "$id": "processArray",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "scripts"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "examples": [
                        "directory"
                      ]
                    },
                    "content": {
                      "type": [
                        "array",
                        "string"
                      ],
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "examples": [
                              "generate%2Ejs"
                            ]
                          },
                          "content": {
                            "type": [
                              "string",
                              "array"
                            ],
                            "examples": [
                              "const path = require('path');\nconst fs = require('fs');\n\nconst files = ['package%2Ejson', 'manifest%2Ejson', 'README%2Emd'];\nlet success = true;\n\nconst PID = process%2Eargv[2];\nconst gitlabURL = process%2Eargv[3];\nconst gitlabBranch = process%2Eargv[4];\nif (PID === null || PID == undefined || Number%2EisNaN(parseInt(PID, 10))) {\n  console%2Eerror('Please run this script with Gitlab Project ID (integer) as an argument');\n  process%2Eexit(2);\n}\nconsole%2Elog(`Generating artifact%2Ejson file w/ ${PID} as GitLab Project ID`);\n\n/*function fileTypetoType(fileType) {\n  const underscoreToDash = fileType%2Ereplace(/_/g, '-');\n  if (\n    fileType === 'ac_agenda_jobs' ||\n    fileType === 'mop_templates' ||\n    fileType === 'mop_analytic_templates' ||\n    fileType === 'templates' ||\n    fileType === 'workflows'\n  ) {\n    const singularize = underscoreToDash%2Esubstring(\n      0,\n      underscoreToDash%2Elength - 1\n    );\n    return singularize;\n  }\n  if (fileType === 'catalog_store') {\n    return 'service-catalog';\n  }\n  return underscoreToDash;\n}*/\nconst filePath = __dirname%2Ereplace(\"/scripts\", \"\");\ntry {\n  const [packageJSON, manifest, readme] = files%2Emap(entry => {\n    const result = fs%2EreadFileSync(path%2Ejoin(filePath, `%2E/${entry}`), {\n      encoding: 'utf-8'\n    });\n\n    if (entry !== 'README%2Emd') {\n        const parsedRes = JSON%2Eparse(result);\n        if (entry === 'manifest%2Ejson' && Object%2Eprototype%2EhasOwnProperty%2Ecall(parsedRes, 'version')) {\n          delete parsedRes%2Eversion;\n        }\n      return parsedRes;\n    } else {\n      return result%2Ereplace(/\\%2E\\//gm, `${gitlabURL}/-/raw/${gitlabBranch}/`);\n    }\n  });\n\n  // const result = fs%2EreaddirSync(path%2Ejoin(__dirname, '%2E/bundles'));\n  const bundles = [];\n  // result%2EforEach(entry => {\n  //   console%2Elog(`   ➡ generating ${entry}(s)`);\n  //   const fileNames = fs%2EreaddirSync(path%2Ejoin(__dirname, `%2E/bundles/${entry}`));\n  //   fileNames%2EforEach(file => {\n  //     const data = fs%2EreadFileSync(\n  //       path%2Ejoin(__dirname, `%2E/bundles/${entry}/${file}`),\n  //       { encoding: 'utf-8' }\n  //     );\n  //     try {\n  //       bundles%2Epush({ type: fileTypetoType(entry), data: JSON%2Eparse(data) });\n  //       console%2Elog(`     ⚪ ${file}   -   ✅`);\n  //     } catch(err) {\n  //       success = false;\n  //       console%2Elog(`     ⚪ ${file}   -   ❌  - ${err}`);\n  //     }\n  //   });\n  // });\n\n  const components = manifest%2Eartifacts;\n  components%2EforEach(file => {\n    try {\n      const data = fs%2EreadFileSync(\n        path%2Ejoin(filePath, `%2E/${file%2Elocation}`),\n        { encoding: 'utf-8' }\n      );\n      bundles%2Epush({ type: file%2Etype, data: JSON%2Eparse(data) });\n      console%2Elog(`     ⚪ (${file%2Etype})   -   ${file%2Elocation}   -   ✅`);\n    } catch (err) {\n      success = false;\n      console%2Elog(`     ⚪  (${file%2Etype})   -   ${file%2Elocation}   -   ❌  - ${err}`);\n    }\n  });\n\n  const metadata = {\n    name: packageJSON%2Ename,\n    version: packageJSON%2Eversion,\n    description: packageJSON%2Edescription,\n    license: packageJSON%2Elicense,\n    repository: packageJSON%2Erepository,\n    keywords: packageJSON%2Ekeywords,\n    author: packageJSON%2Eauthor,\n    IAPDependencies: packageJSON%2EIAPDependencies,\n    gitlabId: parseInt(PID, 10),\n  };\n\n  if (success) {\n    console%2Elog(`\\n\\nFinished successfully`);\n  } else {\n    console%2Elog(`\\n\\nFinished with error(s)`);\n    process%2Eexit(1);\n  }\n  const artifact = { metadata, manifest, bundles, readme };\n  fs%2EwriteFileSync(\n    path%2Ejoin(filePath, '%2E/artifact%2Ejson'),\n    JSON%2Estringify(artifact, null, 2)\n  );\n} catch (err) {\n  console%2Eerror(`Failed to generate artifact%2Ejson file: ${err}`);\n  process%2Eexit(1);\n}\n"
                            ]
                          },
                          "type": {
                            "type": "string",
                            "examples": [
                              "file"
                            ]
                          }
                        },
                        "required": []
                      }
                    }
                  },
                  "required": []
                }
              }
            ],
            "outgoing": [
              {
                "$id": "arr",
                "type": "array"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "method",
                "library": "Array",
                "method": "reduce",
                "args": [
                  null,
                  "ƒ_reduce_2",
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 2,
                "type": "declaration",
                "library": "Object",
                "method": "new Object",
                "args": [
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 1
                }
              },
              {
                "id": 3,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "commitActions",
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 1
                }
              },
              {
                "id": 4,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "directories",
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 2
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 2,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 7,
                "type": "declaration",
                "library": "Array",
                "method": "new Array",
                "args": [],
                "view": {
                  "row": 4,
                  "col": 1
                },
                "polymorphIndex": 0
              },
              {
                "id": 8,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 7,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 7,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 10,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 11,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "processArray",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 12,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "arr",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "userFunc_1",
            "view": {
              "col": 3,
              "row": 5
            },
            "id": "userFunc_1",
            "comments": []
          },
          {
            "incoming": [
              {
                "$id": "fixedArray",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "scripts"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "examples": [
                        "directory"
                      ]
                    },
                    "content": {
                      "type": [
                        "array",
                        "string"
                      ],
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "examples": [
                              "generate%2Ejs"
                            ]
                          },
                          "content": {
                            "type": "string",
                            "examples": [
                              "const path = require('path');\nconst fs = require('fs');\n\nconst files = ['package%2Ejson', 'manifest%2Ejson', 'README%2Emd'];\nlet success = true;\n\nconst PID = process%2Eargv[2];\nconst gitlabURL = process%2Eargv[3];\nconst gitlabBranch = process%2Eargv[4];\nif (PID === null || PID == undefined || Number%2EisNaN(parseInt(PID, 10))) {\n  console%2Eerror('Please run this script with Gitlab Project ID (integer) as an argument');\n  process%2Eexit(2);\n}\nconsole%2Elog(`Generating artifact%2Ejson file w/ ${PID} as GitLab Project ID`);\n\n/*function fileTypetoType(fileType) {\n  const underscoreToDash = fileType%2Ereplace(/_/g, '-');\n  if (\n    fileType === 'ac_agenda_jobs' ||\n    fileType === 'mop_templates' ||\n    fileType === 'mop_analytic_templates' ||\n    fileType === 'templates' ||\n    fileType === 'workflows'\n  ) {\n    const singularize = underscoreToDash%2Esubstring(\n      0,\n      underscoreToDash%2Elength - 1\n    );\n    return singularize;\n  }\n  if (fileType === 'catalog_store') {\n    return 'service-catalog';\n  }\n  return underscoreToDash;\n}*/\nconst filePath = __dirname%2Ereplace(\"/scripts\", \"\");\ntry {\n  const [packageJSON, manifest, readme] = files%2Emap(entry => {\n    const result = fs%2EreadFileSync(path%2Ejoin(filePath, `%2E/${entry}`), {\n      encoding: 'utf-8'\n    });\n\n    if (entry !== 'README%2Emd') {\n        const parsedRes = JSON%2Eparse(result);\n        if (entry === 'manifest%2Ejson' && Object%2Eprototype%2EhasOwnProperty%2Ecall(parsedRes, 'version')) {\n          delete parsedRes%2Eversion;\n        }\n      return parsedRes;\n    } else {\n      return result%2Ereplace(/\\%2E\\//gm, `${gitlabURL}/-/raw/${gitlabBranch}/`);\n    }\n  });\n\n  // const result = fs%2EreaddirSync(path%2Ejoin(__dirname, '%2E/bundles'));\n  const bundles = [];\n  // result%2EforEach(entry => {\n  //   console%2Elog(`   ➡ generating ${entry}(s)`);\n  //   const fileNames = fs%2EreaddirSync(path%2Ejoin(__dirname, `%2E/bundles/${entry}`));\n  //   fileNames%2EforEach(file => {\n  //     const data = fs%2EreadFileSync(\n  //       path%2Ejoin(__dirname, `%2E/bundles/${entry}/${file}`),\n  //       { encoding: 'utf-8' }\n  //     );\n  //     try {\n  //       bundles%2Epush({ type: fileTypetoType(entry), data: JSON%2Eparse(data) });\n  //       console%2Elog(`     ⚪ ${file}   -   ✅`);\n  //     } catch(err) {\n  //       success = false;\n  //       console%2Elog(`     ⚪ ${file}   -   ❌  - ${err}`);\n  //     }\n  //   });\n  // });\n\n  const components = manifest%2Eartifacts;\n  components%2EforEach(file => {\n    try {\n      const data = fs%2EreadFileSync(\n        path%2Ejoin(filePath, `%2E/${file%2Elocation}`),\n        { encoding: 'utf-8' }\n      );\n      bundles%2Epush({ type: file%2Etype, data: JSON%2Eparse(data) });\n      console%2Elog(`     ⚪ (${file%2Etype})   -   ${file%2Elocation}   -   ✅`);\n    } catch (err) {\n      success = false;\n      console%2Elog(`     ⚪  (${file%2Etype})   -   ${file%2Elocation}   -   ❌  - ${err}`);\n    }\n  });\n\n  const metadata = {\n    name: packageJSON%2Ename,\n    version: packageJSON%2Eversion,\n    description: packageJSON%2Edescription,\n    license: packageJSON%2Elicense,\n    repository: packageJSON%2Erepository,\n    keywords: packageJSON%2Ekeywords,\n    author: packageJSON%2Eauthor,\n    IAPDependencies: packageJSON%2EIAPDependencies,\n    gitlabId: parseInt(PID, 10),\n  };\n\n  if (success) {\n    console%2Elog(`\\n\\nFinished successfully`);\n  } else {\n    console%2Elog(`\\n\\nFinished with error(s)`);\n    process%2Eexit(1);\n  }\n  const artifact = { metadata, manifest, bundles, readme };\n  fs%2EwriteFileSync(\n    path%2Ejoin(filePath, '%2E/artifact%2Ejson'),\n    JSON%2Estringify(artifact, null, 2)\n  );\n} catch (err) {\n  console%2Eerror(`Failed to generate artifact%2Ejson file: ${err}`);\n  process%2Eexit(1);\n}\n"
                            ]
                          },
                          "type": {
                            "type": "string",
                            "examples": [
                              "file"
                            ]
                          }
                        },
                        "required": []
                      }
                    }
                  },
                  "required": []
                }
              },
              {
                "$id": "action",
                "type": "string"
              }
            ],
            "outgoing": [
              {
                "$id": "commitActions",
                "type": "object"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "method",
                "library": "Array",
                "method": "reduce",
                "args": [
                  null,
                  "ƒ_reduce_1 (1)",
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "fixedArray",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 3,
                "type": "declaration",
                "library": "Object",
                "method": "new Object",
                "args": [
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 1
                }
              },
              {
                "id": 4,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "directories",
                  []
                ],
                "view": {
                  "row": 2,
                  "col": 1
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 3,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 6,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "commitActions",
                  []
                ],
                "view": {
                  "row": 3,
                  "col": 2
                }
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 6,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 8,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 6,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 10,
                "type": "method",
                "library": "Object",
                "method": "optional chaining",
                "args": [
                  null,
                  "directories"
                ],
                "view": {
                  "row": 1,
                  "col": 3
                }
              },
              {
                "id": 11,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 10,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 14,
                "type": "method",
                "library": "Array",
                "method": "reduce",
                "args": [
                  null,
                  "ƒ_reduce_2 (1)",
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 4
                }
              },
              {
                "id": 15,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 10,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 14,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 18,
                "type": "method",
                "library": "Object",
                "method": "optional chaining",
                "args": [
                  null,
                  "commitActions"
                ],
                "view": {
                  "row": 2,
                  "col": 3
                }
              },
              {
                "id": 19,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 18,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 20,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "commitActions",
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 3
                }
              },
              {
                "id": 21,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 6,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 20,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 22,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 18,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 20,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 23,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 20,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 14,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 24,
                "type": "method",
                "library": "Array",
                "method": "reduce",
                "args": [
                  null,
                  "ƒ_reduce_2 (1)",
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 5
                }
              },
              {
                "id": 26,
                "type": "method",
                "library": "Object",
                "method": "optional chaining",
                "args": [
                  null,
                  "directories"
                ],
                "view": {
                  "row": 2,
                  "col": 4
                }
              },
              {
                "id": 27,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 14,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 26,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 28,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 26,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 24,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 29,
                "type": "method",
                "library": "Object",
                "method": "optional chaining",
                "args": [
                  null,
                  "commitActions"
                ],
                "view": {
                  "row": 3,
                  "col": 4
                }
              },
              {
                "id": 30,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 14,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 29,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 31,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "commitActions",
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 5
                }
              },
              {
                "id": 32,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 29,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 31,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 33,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 6,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 31,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 34,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 31,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 24,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 35,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 24,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "commitActions",
                  "ptr": ""
                }
              },
              {
                "id": 36,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "action",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/3/value"
                }
              },
              {
                "id": 37,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "action",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 24,
                  "ptr": "/args/3/value"
                }
              },
              {
                "id": 38,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "action",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 14,
                  "ptr": "/args/3/value"
                }
              }
            ],
            "functions": [],
            "name": "userFunc_2",
            "view": {
              "col": 5,
              "row": 4
            },
            "id": "userFunc_2",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              },
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "examples": [
                      "scripts"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "examples": [
                      "directory"
                    ]
                  },
                  "content": {
                    "type": [
                      "array",
                      "string"
                    ],
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "generate%2Ejs"
                          ]
                        },
                        "content": {
                          "type": "string",
                          "examples": [
                            "const path = require('path');\nconst fs = require('fs');\n\nconst files = ['package%2Ejson', 'manifest%2Ejson', 'README%2Emd'];\nlet success = true;\n\nconst PID = process%2Eargv[2];\nconst gitlabURL = process%2Eargv[3];\nconst gitlabBranch = process%2Eargv[4];\nif (PID === null || PID == undefined || Number%2EisNaN(parseInt(PID, 10))) {\n  console%2Eerror('Please run this script with Gitlab Project ID (integer) as an argument');\n  process%2Eexit(2);\n}\nconsole%2Elog(`Generating artifact%2Ejson file w/ ${PID} as GitLab Project ID`);\n\n/*function fileTypetoType(fileType) {\n  const underscoreToDash = fileType%2Ereplace(/_/g, '-');\n  if (\n    fileType === 'ac_agenda_jobs' ||\n    fileType === 'mop_templates' ||\n    fileType === 'mop_analytic_templates' ||\n    fileType === 'templates' ||\n    fileType === 'workflows'\n  ) {\n    const singularize = underscoreToDash%2Esubstring(\n      0,\n      underscoreToDash%2Elength - 1\n    );\n    return singularize;\n  }\n  if (fileType === 'catalog_store') {\n    return 'service-catalog';\n  }\n  return underscoreToDash;\n}*/\nconst filePath = __dirname%2Ereplace(\"/scripts\", \"\");\ntry {\n  const [packageJSON, manifest, readme] = files%2Emap(entry => {\n    const result = fs%2EreadFileSync(path%2Ejoin(filePath, `%2E/${entry}`), {\n      encoding: 'utf-8'\n    });\n\n    if (entry !== 'README%2Emd') {\n        const parsedRes = JSON%2Eparse(result);\n        if (entry === 'manifest%2Ejson' && Object%2Eprototype%2EhasOwnProperty%2Ecall(parsedRes, 'version')) {\n          delete parsedRes%2Eversion;\n        }\n      return parsedRes;\n    } else {\n      return result%2Ereplace(/\\%2E\\//gm, `${gitlabURL}/-/raw/${gitlabBranch}/`);\n    }\n  });\n\n  // const result = fs%2EreaddirSync(path%2Ejoin(__dirname, '%2E/bundles'));\n  const bundles = [];\n  // result%2EforEach(entry => {\n  //   console%2Elog(`   ➡ generating ${entry}(s)`);\n  //   const fileNames = fs%2EreaddirSync(path%2Ejoin(__dirname, `%2E/bundles/${entry}`));\n  //   fileNames%2EforEach(file => {\n  //     const data = fs%2EreadFileSync(\n  //       path%2Ejoin(__dirname, `%2E/bundles/${entry}/${file}`),\n  //       { encoding: 'utf-8' }\n  //     );\n  //     try {\n  //       bundles%2Epush({ type: fileTypetoType(entry), data: JSON%2Eparse(data) });\n  //       console%2Elog(`     ⚪ ${file}   -   ✅`);\n  //     } catch(err) {\n  //       success = false;\n  //       console%2Elog(`     ⚪ ${file}   -   ❌  - ${err}`);\n  //     }\n  //   });\n  // });\n\n  const components = manifest%2Eartifacts;\n  components%2EforEach(file => {\n    try {\n      const data = fs%2EreadFileSync(\n        path%2Ejoin(filePath, `%2E/${file%2Elocation}`),\n        { encoding: 'utf-8' }\n      );\n      bundles%2Epush({ type: file%2Etype, data: JSON%2Eparse(data) });\n      console%2Elog(`     ⚪ (${file%2Etype})   -   ${file%2Elocation}   -   ✅`);\n    } catch (err) {\n      success = false;\n      console%2Elog(`     ⚪  (${file%2Etype})   -   ${file%2Elocation}   -   ❌  - ${err}`);\n    }\n  });\n\n  const metadata = {\n    name: packageJSON%2Ename,\n    version: packageJSON%2Eversion,\n    description: packageJSON%2Edescription,\n    license: packageJSON%2Elicense,\n    repository: packageJSON%2Erepository,\n    keywords: packageJSON%2Ekeywords,\n    author: packageJSON%2Eauthor,\n    IAPDependencies: packageJSON%2EIAPDependencies,\n    gitlabId: parseInt(PID, 10),\n  };\n\n  if (success) {\n    console%2Elog(`\\n\\nFinished successfully`);\n  } else {\n    console%2Elog(`\\n\\nFinished with error(s)`);\n    process%2Eexit(1);\n  }\n  const artifact = { metadata, manifest, bundles, readme };\n  fs%2EwriteFileSync(\n    path%2Ejoin(filePath, '%2E/artifact%2Ejson'),\n    JSON%2Estringify(artifact, null, 2)\n  );\n} catch (err) {\n  console%2Eerror(`Failed to generate artifact%2Ejson file: ${err}`);\n  process%2Eexit(1);\n}\n"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "examples": [
                            "file"
                          ]
                        }
                      },
                      "required": []
                    }
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "scripts"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "examples": [
                        "directory"
                      ]
                    },
                    "content": {
                      "type": [
                        "array",
                        "string"
                      ],
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "examples": [
                              "generate%2Ejs"
                            ]
                          },
                          "content": {
                            "type": "string",
                            "examples": [
                              "const path = require('path');\nconst fs = require('fs');\n\nconst files = ['package%2Ejson', 'manifest%2Ejson', 'README%2Emd'];\nlet success = true;\n\nconst PID = process%2Eargv[2];\nconst gitlabURL = process%2Eargv[3];\nconst gitlabBranch = process%2Eargv[4];\nif (PID === null || PID == undefined || Number%2EisNaN(parseInt(PID, 10))) {\n  console%2Eerror('Please run this script with Gitlab Project ID (integer) as an argument');\n  process%2Eexit(2);\n}\nconsole%2Elog(`Generating artifact%2Ejson file w/ ${PID} as GitLab Project ID`);\n\n/*function fileTypetoType(fileType) {\n  const underscoreToDash = fileType%2Ereplace(/_/g, '-');\n  if (\n    fileType === 'ac_agenda_jobs' ||\n    fileType === 'mop_templates' ||\n    fileType === 'mop_analytic_templates' ||\n    fileType === 'templates' ||\n    fileType === 'workflows'\n  ) {\n    const singularize = underscoreToDash%2Esubstring(\n      0,\n      underscoreToDash%2Elength - 1\n    );\n    return singularize;\n  }\n  if (fileType === 'catalog_store') {\n    return 'service-catalog';\n  }\n  return underscoreToDash;\n}*/\nconst filePath = __dirname%2Ereplace(\"/scripts\", \"\");\ntry {\n  const [packageJSON, manifest, readme] = files%2Emap(entry => {\n    const result = fs%2EreadFileSync(path%2Ejoin(filePath, `%2E/${entry}`), {\n      encoding: 'utf-8'\n    });\n\n    if (entry !== 'README%2Emd') {\n        const parsedRes = JSON%2Eparse(result);\n        if (entry === 'manifest%2Ejson' && Object%2Eprototype%2EhasOwnProperty%2Ecall(parsedRes, 'version')) {\n          delete parsedRes%2Eversion;\n        }\n      return parsedRes;\n    } else {\n      return result%2Ereplace(/\\%2E\\//gm, `${gitlabURL}/-/raw/${gitlabBranch}/`);\n    }\n  });\n\n  // const result = fs%2EreaddirSync(path%2Ejoin(__dirname, '%2E/bundles'));\n  const bundles = [];\n  // result%2EforEach(entry => {\n  //   console%2Elog(`   ➡ generating ${entry}(s)`);\n  //   const fileNames = fs%2EreaddirSync(path%2Ejoin(__dirname, `%2E/bundles/${entry}`));\n  //   fileNames%2EforEach(file => {\n  //     const data = fs%2EreadFileSync(\n  //       path%2Ejoin(__dirname, `%2E/bundles/${entry}/${file}`),\n  //       { encoding: 'utf-8' }\n  //     );\n  //     try {\n  //       bundles%2Epush({ type: fileTypetoType(entry), data: JSON%2Eparse(data) });\n  //       console%2Elog(`     ⚪ ${file}   -   ✅`);\n  //     } catch(err) {\n  //       success = false;\n  //       console%2Elog(`     ⚪ ${file}   -   ❌  - ${err}`);\n  //     }\n  //   });\n  // });\n\n  const components = manifest%2Eartifacts;\n  components%2EforEach(file => {\n    try {\n      const data = fs%2EreadFileSync(\n        path%2Ejoin(filePath, `%2E/${file%2Elocation}`),\n        { encoding: 'utf-8' }\n      );\n      bundles%2Epush({ type: file%2Etype, data: JSON%2Eparse(data) });\n      console%2Elog(`     ⚪ (${file%2Etype})   -   ${file%2Elocation}   -   ✅`);\n    } catch (err) {\n      success = false;\n      console%2Elog(`     ⚪  (${file%2Etype})   -   ${file%2Elocation}   -   ❌  - ${err}`);\n    }\n  });\n\n  const metadata = {\n    name: packageJSON%2Ename,\n    version: packageJSON%2Eversion,\n    description: packageJSON%2Edescription,\n    license: packageJSON%2Elicense,\n    repository: packageJSON%2Erepository,\n    keywords: packageJSON%2Ekeywords,\n    author: packageJSON%2Eauthor,\n    IAPDependencies: packageJSON%2EIAPDependencies,\n    gitlabId: parseInt(PID, 10),\n  };\n\n  if (success) {\n    console%2Elog(`\\n\\nFinished successfully`);\n  } else {\n    console%2Elog(`\\n\\nFinished with error(s)`);\n    process%2Eexit(1);\n  }\n  const artifact = { metadata, manifest, bundles, readme };\n  fs%2EwriteFileSync(\n    path%2Ejoin(filePath, '%2E/artifact%2Ejson'),\n    JSON%2Estringify(artifact, null, 2)\n  );\n} catch (err) {\n  console%2Eerror(`Failed to generate artifact%2Ejson file: ${err}`);\n  process%2Eexit(1);\n}\n"
                            ]
                          },
                          "type": {
                            "type": "string",
                            "examples": [
                              "file"
                            ]
                          }
                        },
                        "required": []
                      }
                    }
                  },
                  "required": []
                },
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "accumulator",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "method",
                "library": "Array",
                "method": "isArray",
                "args": [
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 2
                }
              },
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/content"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 5,
                "type": "method",
                "library": "Array",
                "method": "push",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 8,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 3
                }
              },
              {
                "id": 9,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "directories",
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 3
                }
              },
              {
                "id": 11,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 9,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 12,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 13,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 9,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 14,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "accumulator",
                  "ptr": ""
                }
              },
              {
                "id": 15,
                "type": "method",
                "library": "Object",
                "method": "optional chaining",
                "args": [
                  null,
                  "commitActions"
                ],
                "view": {
                  "row": 3,
                  "col": 1
                }
              },
              {
                "id": 16,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 15,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 17,
                "type": "method",
                "library": "Array",
                "method": "push",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 2
                }
              },
              {
                "id": 18,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 15,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 17,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 19,
                "type": "declaration",
                "library": "Object",
                "method": "new Object",
                "args": [
                  ""
                ],
                "view": {
                  "row": 4,
                  "col": 1
                }
              },
              {
                "id": 20,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "action",
                  "create"
                ],
                "view": {
                  "row": 4,
                  "col": 2
                }
              },
              {
                "id": 21,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 19,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 20,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 22,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "content",
                  null
                ],
                "view": {
                  "row": 4,
                  "col": 3
                }
              },
              {
                "id": 23,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 20,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 22,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 24,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/content"
                },
                "to": {
                  "location": "method",
                  "name": 22,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 25,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "file_path",
                  null
                ],
                "view": {
                  "row": 5,
                  "col": 2
                }
              },
              {
                "id": 26,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 22,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 25,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 27,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/name"
                },
                "to": {
                  "location": "method",
                  "name": 25,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 28,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 25,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 17,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 29,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "commitActions",
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 3
                }
              },
              {
                "id": 30,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 17,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 29,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 31,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 29,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 32,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 29,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 33,
                "type": "method",
                "library": "Object",
                "method": "optional chaining",
                "args": [
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 34,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 33,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 35,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 33,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 36,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 9,
                  "ptr": "/args/0/value"
                }
              }
            ],
            "functions": [],
            "name": "ƒ_reduce_3",
            "view": {
              "col": 3,
              "row": 6
            },
            "id": "ƒ_reduce_3",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              },
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "examples": [
                      "scripts"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "examples": [
                      "directory"
                    ]
                  },
                  "content": {
                    "type": [
                      "array",
                      "string"
                    ],
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "generate%2Ejs"
                          ]
                        },
                        "content": {
                          "type": "string",
                          "examples": [
                            "const path = require('path');\nconst fs = require('fs');\n\nconst files = ['package%2Ejson', 'manifest%2Ejson', 'README%2Emd'];\nlet success = true;\n\nconst PID = process%2Eargv[2];\nconst gitlabURL = process%2Eargv[3];\nconst gitlabBranch = process%2Eargv[4];\nif (PID === null || PID == undefined || Number%2EisNaN(parseInt(PID, 10))) {\n  console%2Eerror('Please run this script with Gitlab Project ID (integer) as an argument');\n  process%2Eexit(2);\n}\nconsole%2Elog(`Generating artifact%2Ejson file w/ ${PID} as GitLab Project ID`);\n\n/*function fileTypetoType(fileType) {\n  const underscoreToDash = fileType%2Ereplace(/_/g, '-');\n  if (\n    fileType === 'ac_agenda_jobs' ||\n    fileType === 'mop_templates' ||\n    fileType === 'mop_analytic_templates' ||\n    fileType === 'templates' ||\n    fileType === 'workflows'\n  ) {\n    const singularize = underscoreToDash%2Esubstring(\n      0,\n      underscoreToDash%2Elength - 1\n    );\n    return singularize;\n  }\n  if (fileType === 'catalog_store') {\n    return 'service-catalog';\n  }\n  return underscoreToDash;\n}*/\nconst filePath = __dirname%2Ereplace(\"/scripts\", \"\");\ntry {\n  const [packageJSON, manifest, readme] = files%2Emap(entry => {\n    const result = fs%2EreadFileSync(path%2Ejoin(filePath, `%2E/${entry}`), {\n      encoding: 'utf-8'\n    });\n\n    if (entry !== 'README%2Emd') {\n        const parsedRes = JSON%2Eparse(result);\n        if (entry === 'manifest%2Ejson' && Object%2Eprototype%2EhasOwnProperty%2Ecall(parsedRes, 'version')) {\n          delete parsedRes%2Eversion;\n        }\n      return parsedRes;\n    } else {\n      return result%2Ereplace(/\\%2E\\//gm, `${gitlabURL}/-/raw/${gitlabBranch}/`);\n    }\n  });\n\n  // const result = fs%2EreaddirSync(path%2Ejoin(__dirname, '%2E/bundles'));\n  const bundles = [];\n  // result%2EforEach(entry => {\n  //   console%2Elog(`   ➡ generating ${entry}(s)`);\n  //   const fileNames = fs%2EreaddirSync(path%2Ejoin(__dirname, `%2E/bundles/${entry}`));\n  //   fileNames%2EforEach(file => {\n  //     const data = fs%2EreadFileSync(\n  //       path%2Ejoin(__dirname, `%2E/bundles/${entry}/${file}`),\n  //       { encoding: 'utf-8' }\n  //     );\n  //     try {\n  //       bundles%2Epush({ type: fileTypetoType(entry), data: JSON%2Eparse(data) });\n  //       console%2Elog(`     ⚪ ${file}   -   ✅`);\n  //     } catch(err) {\n  //       success = false;\n  //       console%2Elog(`     ⚪ ${file}   -   ❌  - ${err}`);\n  //     }\n  //   });\n  // });\n\n  const components = manifest%2Eartifacts;\n  components%2EforEach(file => {\n    try {\n      const data = fs%2EreadFileSync(\n        path%2Ejoin(filePath, `%2E/${file%2Elocation}`),\n        { encoding: 'utf-8' }\n      );\n      bundles%2Epush({ type: file%2Etype, data: JSON%2Eparse(data) });\n      console%2Elog(`     ⚪ (${file%2Etype})   -   ${file%2Elocation}   -   ✅`);\n    } catch (err) {\n      success = false;\n      console%2Elog(`     ⚪  (${file%2Etype})   -   ${file%2Elocation}   -   ❌  - ${err}`);\n    }\n  });\n\n  const metadata = {\n    name: packageJSON%2Ename,\n    version: packageJSON%2Eversion,\n    description: packageJSON%2Edescription,\n    license: packageJSON%2Elicense,\n    repository: packageJSON%2Erepository,\n    keywords: packageJSON%2Ekeywords,\n    author: packageJSON%2Eauthor,\n    IAPDependencies: packageJSON%2EIAPDependencies,\n    gitlabId: parseInt(PID, 10),\n  };\n\n  if (success) {\n    console%2Elog(`\\n\\nFinished successfully`);\n  } else {\n    console%2Elog(`\\n\\nFinished with error(s)`);\n    process%2Eexit(1);\n  }\n  const artifact = { metadata, manifest, bundles, readme };\n  fs%2EwriteFileSync(\n    path%2Ejoin(filePath, '%2E/artifact%2Ejson'),\n    JSON%2Estringify(artifact, null, 2)\n  );\n} catch (err) {\n  console%2Eerror(`Failed to generate artifact%2Ejson file: ${err}`);\n  process%2Eexit(1);\n}\n"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "examples": [
                            "file"
                          ]
                        }
                      },
                      "required": []
                    }
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "scripts"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "examples": [
                        "directory"
                      ]
                    },
                    "content": {
                      "type": [
                        "array",
                        "string"
                      ],
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "examples": [
                              "generate%2Ejs"
                            ]
                          },
                          "content": {
                            "type": "string",
                            "examples": [
                              "const path = require('path');\nconst fs = require('fs');\n\nconst files = ['package%2Ejson', 'manifest%2Ejson', 'README%2Emd'];\nlet success = true;\n\nconst PID = process%2Eargv[2];\nconst gitlabURL = process%2Eargv[3];\nconst gitlabBranch = process%2Eargv[4];\nif (PID === null || PID == undefined || Number%2EisNaN(parseInt(PID, 10))) {\n  console%2Eerror('Please run this script with Gitlab Project ID (integer) as an argument');\n  process%2Eexit(2);\n}\nconsole%2Elog(`Generating artifact%2Ejson file w/ ${PID} as GitLab Project ID`);\n\n/*function fileTypetoType(fileType) {\n  const underscoreToDash = fileType%2Ereplace(/_/g, '-');\n  if (\n    fileType === 'ac_agenda_jobs' ||\n    fileType === 'mop_templates' ||\n    fileType === 'mop_analytic_templates' ||\n    fileType === 'templates' ||\n    fileType === 'workflows'\n  ) {\n    const singularize = underscoreToDash%2Esubstring(\n      0,\n      underscoreToDash%2Elength - 1\n    );\n    return singularize;\n  }\n  if (fileType === 'catalog_store') {\n    return 'service-catalog';\n  }\n  return underscoreToDash;\n}*/\nconst filePath = __dirname%2Ereplace(\"/scripts\", \"\");\ntry {\n  const [packageJSON, manifest, readme] = files%2Emap(entry => {\n    const result = fs%2EreadFileSync(path%2Ejoin(filePath, `%2E/${entry}`), {\n      encoding: 'utf-8'\n    });\n\n    if (entry !== 'README%2Emd') {\n        const parsedRes = JSON%2Eparse(result);\n        if (entry === 'manifest%2Ejson' && Object%2Eprototype%2EhasOwnProperty%2Ecall(parsedRes, 'version')) {\n          delete parsedRes%2Eversion;\n        }\n      return parsedRes;\n    } else {\n      return result%2Ereplace(/\\%2E\\//gm, `${gitlabURL}/-/raw/${gitlabBranch}/`);\n    }\n  });\n\n  // const result = fs%2EreaddirSync(path%2Ejoin(__dirname, '%2E/bundles'));\n  const bundles = [];\n  // result%2EforEach(entry => {\n  //   console%2Elog(`   ➡ generating ${entry}(s)`);\n  //   const fileNames = fs%2EreaddirSync(path%2Ejoin(__dirname, `%2E/bundles/${entry}`));\n  //   fileNames%2EforEach(file => {\n  //     const data = fs%2EreadFileSync(\n  //       path%2Ejoin(__dirname, `%2E/bundles/${entry}/${file}`),\n  //       { encoding: 'utf-8' }\n  //     );\n  //     try {\n  //       bundles%2Epush({ type: fileTypetoType(entry), data: JSON%2Eparse(data) });\n  //       console%2Elog(`     ⚪ ${file}   -   ✅`);\n  //     } catch(err) {\n  //       success = false;\n  //       console%2Elog(`     ⚪ ${file}   -   ❌  - ${err}`);\n  //     }\n  //   });\n  // });\n\n  const components = manifest%2Eartifacts;\n  components%2EforEach(file => {\n    try {\n      const data = fs%2EreadFileSync(\n        path%2Ejoin(filePath, `%2E/${file%2Elocation}`),\n        { encoding: 'utf-8' }\n      );\n      bundles%2Epush({ type: file%2Etype, data: JSON%2Eparse(data) });\n      console%2Elog(`     ⚪ (${file%2Etype})   -   ${file%2Elocation}   -   ✅`);\n    } catch (err) {\n      success = false;\n      console%2Elog(`     ⚪  (${file%2Etype})   -   ${file%2Elocation}   -   ❌  - ${err}`);\n    }\n  });\n\n  const metadata = {\n    name: packageJSON%2Ename,\n    version: packageJSON%2Eversion,\n    description: packageJSON%2Edescription,\n    license: packageJSON%2Elicense,\n    repository: packageJSON%2Erepository,\n    keywords: packageJSON%2Ekeywords,\n    author: packageJSON%2Eauthor,\n    IAPDependencies: packageJSON%2EIAPDependencies,\n    gitlabId: parseInt(PID, 10),\n  };\n\n  if (success) {\n    console%2Elog(`\\n\\nFinished successfully`);\n  } else {\n    console%2Elog(`\\n\\nFinished with error(s)`);\n    process%2Eexit(1);\n  }\n  const artifact = { metadata, manifest, bundles, readme };\n  fs%2EwriteFileSync(\n    path%2Ejoin(filePath, '%2E/artifact%2Ejson'),\n    JSON%2Estringify(artifact, null, 2)\n  );\n} catch (err) {\n  console%2Eerror(`Failed to generate artifact%2Ejson file: ${err}`);\n  process%2Eexit(1);\n}\n"
                            ]
                          },
                          "type": {
                            "type": "string",
                            "examples": [
                              "file"
                            ]
                          }
                        },
                        "required": []
                      }
                    }
                  },
                  "required": []
                },
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "accumulator",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "method",
                "library": "Array",
                "method": "isArray",
                "args": [
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 2
                }
              },
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/content"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 5,
                "type": "method",
                "library": "Array",
                "method": "push",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 8,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 3
                }
              },
              {
                "id": 9,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "directories",
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 3
                }
              },
              {
                "id": 11,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 9,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 12,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 13,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 9,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 14,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "accumulator",
                  "ptr": ""
                }
              },
              {
                "id": 15,
                "type": "method",
                "library": "Object",
                "method": "optional chaining",
                "args": [
                  null,
                  "commitActions"
                ],
                "view": {
                  "row": 3,
                  "col": 1
                }
              },
              {
                "id": 16,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 15,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 17,
                "type": "method",
                "library": "Array",
                "method": "push",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 2
                }
              },
              {
                "id": 18,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 15,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 17,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 19,
                "type": "declaration",
                "library": "Object",
                "method": "new Object",
                "args": [
                  {}
                ],
                "view": {
                  "row": 4,
                  "col": 1
                }
              },
              {
                "id": 20,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "action",
                  "create"
                ],
                "view": {
                  "row": 4,
                  "col": 2
                }
              },
              {
                "id": 21,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 19,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 20,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 22,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "content",
                  null
                ],
                "view": {
                  "row": 4,
                  "col": 3
                }
              },
              {
                "id": 23,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 20,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 22,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 24,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/content"
                },
                "to": {
                  "location": "method",
                  "name": 22,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 25,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "file_path",
                  null
                ],
                "view": {
                  "row": 5,
                  "col": 2
                }
              },
              {
                "id": 26,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 22,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 25,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 27,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/name"
                },
                "to": {
                  "location": "method",
                  "name": 25,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 28,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 25,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 17,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 29,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "commitActions",
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 3
                }
              },
              {
                "id": 30,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 17,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 29,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 31,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 29,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 32,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 29,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 33,
                "type": "method",
                "library": "Object",
                "method": "optional chaining",
                "args": [
                  null,
                  "directories"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 34,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 33,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 35,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 33,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/args/0/value"
                }
              }
            ],
            "functions": [],
            "name": "ƒ_reduce_1",
            "view": {
              "col": 3,
              "row": 6
            },
            "id": "ƒ_reduce_1",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              },
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "examples": [
                      "scripts"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "examples": [
                      "directory"
                    ]
                  },
                  "content": {
                    "type": [
                      "array",
                      "string"
                    ],
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "generate%2Ejs"
                          ]
                        },
                        "content": {
                          "type": "string",
                          "examples": [
                            "const path = require('path');\nconst fs = require('fs');\n\nconst files = ['package%2Ejson', 'manifest%2Ejson', 'README%2Emd'];\nlet success = true;\n\nconst PID = process%2Eargv[2];\nconst gitlabURL = process%2Eargv[3];\nconst gitlabBranch = process%2Eargv[4];\nif (PID === null || PID == undefined || Number%2EisNaN(parseInt(PID, 10))) {\n  console%2Eerror('Please run this script with Gitlab Project ID (integer) as an argument');\n  process%2Eexit(2);\n}\nconsole%2Elog(`Generating artifact%2Ejson file w/ ${PID} as GitLab Project ID`);\n\n/*function fileTypetoType(fileType) {\n  const underscoreToDash = fileType%2Ereplace(/_/g, '-');\n  if (\n    fileType === 'ac_agenda_jobs' ||\n    fileType === 'mop_templates' ||\n    fileType === 'mop_analytic_templates' ||\n    fileType === 'templates' ||\n    fileType === 'workflows'\n  ) {\n    const singularize = underscoreToDash%2Esubstring(\n      0,\n      underscoreToDash%2Elength - 1\n    );\n    return singularize;\n  }\n  if (fileType === 'catalog_store') {\n    return 'service-catalog';\n  }\n  return underscoreToDash;\n}*/\nconst filePath = __dirname%2Ereplace(\"/scripts\", \"\");\ntry {\n  const [packageJSON, manifest, readme] = files%2Emap(entry => {\n    const result = fs%2EreadFileSync(path%2Ejoin(filePath, `%2E/${entry}`), {\n      encoding: 'utf-8'\n    });\n\n    if (entry !== 'README%2Emd') {\n        const parsedRes = JSON%2Eparse(result);\n        if (entry === 'manifest%2Ejson' && Object%2Eprototype%2EhasOwnProperty%2Ecall(parsedRes, 'version')) {\n          delete parsedRes%2Eversion;\n        }\n      return parsedRes;\n    } else {\n      return result%2Ereplace(/\\%2E\\//gm, `${gitlabURL}/-/raw/${gitlabBranch}/`);\n    }\n  });\n\n  // const result = fs%2EreaddirSync(path%2Ejoin(__dirname, '%2E/bundles'));\n  const bundles = [];\n  // result%2EforEach(entry => {\n  //   console%2Elog(`   ➡ generating ${entry}(s)`);\n  //   const fileNames = fs%2EreaddirSync(path%2Ejoin(__dirname, `%2E/bundles/${entry}`));\n  //   fileNames%2EforEach(file => {\n  //     const data = fs%2EreadFileSync(\n  //       path%2Ejoin(__dirname, `%2E/bundles/${entry}/${file}`),\n  //       { encoding: 'utf-8' }\n  //     );\n  //     try {\n  //       bundles%2Epush({ type: fileTypetoType(entry), data: JSON%2Eparse(data) });\n  //       console%2Elog(`     ⚪ ${file}   -   ✅`);\n  //     } catch(err) {\n  //       success = false;\n  //       console%2Elog(`     ⚪ ${file}   -   ❌  - ${err}`);\n  //     }\n  //   });\n  // });\n\n  const components = manifest%2Eartifacts;\n  components%2EforEach(file => {\n    try {\n      const data = fs%2EreadFileSync(\n        path%2Ejoin(filePath, `%2E/${file%2Elocation}`),\n        { encoding: 'utf-8' }\n      );\n      bundles%2Epush({ type: file%2Etype, data: JSON%2Eparse(data) });\n      console%2Elog(`     ⚪ (${file%2Etype})   -   ${file%2Elocation}   -   ✅`);\n    } catch (err) {\n      success = false;\n      console%2Elog(`     ⚪  (${file%2Etype})   -   ${file%2Elocation}   -   ❌  - ${err}`);\n    }\n  });\n\n  const metadata = {\n    name: packageJSON%2Ename,\n    version: packageJSON%2Eversion,\n    description: packageJSON%2Edescription,\n    license: packageJSON%2Elicense,\n    repository: packageJSON%2Erepository,\n    keywords: packageJSON%2Ekeywords,\n    author: packageJSON%2Eauthor,\n    IAPDependencies: packageJSON%2EIAPDependencies,\n    gitlabId: parseInt(PID, 10),\n  };\n\n  if (success) {\n    console%2Elog(`\\n\\nFinished successfully`);\n  } else {\n    console%2Elog(`\\n\\nFinished with error(s)`);\n    process%2Eexit(1);\n  }\n  const artifact = { metadata, manifest, bundles, readme };\n  fs%2EwriteFileSync(\n    path%2Ejoin(filePath, '%2E/artifact%2Ejson'),\n    JSON%2Estringify(artifact, null, 2)\n  );\n} catch (err) {\n  console%2Eerror(`Failed to generate artifact%2Ejson file: ${err}`);\n  process%2Eexit(1);\n}\n"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "examples": [
                            "file"
                          ]
                        }
                      },
                      "required": []
                    }
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "scripts"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "examples": [
                        "directory"
                      ]
                    },
                    "content": {
                      "type": [
                        "array",
                        "string"
                      ],
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "examples": [
                              "generate%2Ejs"
                            ]
                          },
                          "content": {
                            "type": "string",
                            "examples": [
                              "const path = require('path');\nconst fs = require('fs');\n\nconst files = ['package%2Ejson', 'manifest%2Ejson', 'README%2Emd'];\nlet success = true;\n\nconst PID = process%2Eargv[2];\nconst gitlabURL = process%2Eargv[3];\nconst gitlabBranch = process%2Eargv[4];\nif (PID === null || PID == undefined || Number%2EisNaN(parseInt(PID, 10))) {\n  console%2Eerror('Please run this script with Gitlab Project ID (integer) as an argument');\n  process%2Eexit(2);\n}\nconsole%2Elog(`Generating artifact%2Ejson file w/ ${PID} as GitLab Project ID`);\n\n/*function fileTypetoType(fileType) {\n  const underscoreToDash = fileType%2Ereplace(/_/g, '-');\n  if (\n    fileType === 'ac_agenda_jobs' ||\n    fileType === 'mop_templates' ||\n    fileType === 'mop_analytic_templates' ||\n    fileType === 'templates' ||\n    fileType === 'workflows'\n  ) {\n    const singularize = underscoreToDash%2Esubstring(\n      0,\n      underscoreToDash%2Elength - 1\n    );\n    return singularize;\n  }\n  if (fileType === 'catalog_store') {\n    return 'service-catalog';\n  }\n  return underscoreToDash;\n}*/\nconst filePath = __dirname%2Ereplace(\"/scripts\", \"\");\ntry {\n  const [packageJSON, manifest, readme] = files%2Emap(entry => {\n    const result = fs%2EreadFileSync(path%2Ejoin(filePath, `%2E/${entry}`), {\n      encoding: 'utf-8'\n    });\n\n    if (entry !== 'README%2Emd') {\n        const parsedRes = JSON%2Eparse(result);\n        if (entry === 'manifest%2Ejson' && Object%2Eprototype%2EhasOwnProperty%2Ecall(parsedRes, 'version')) {\n          delete parsedRes%2Eversion;\n        }\n      return parsedRes;\n    } else {\n      return result%2Ereplace(/\\%2E\\//gm, `${gitlabURL}/-/raw/${gitlabBranch}/`);\n    }\n  });\n\n  // const result = fs%2EreaddirSync(path%2Ejoin(__dirname, '%2E/bundles'));\n  const bundles = [];\n  // result%2EforEach(entry => {\n  //   console%2Elog(`   ➡ generating ${entry}(s)`);\n  //   const fileNames = fs%2EreaddirSync(path%2Ejoin(__dirname, `%2E/bundles/${entry}`));\n  //   fileNames%2EforEach(file => {\n  //     const data = fs%2EreadFileSync(\n  //       path%2Ejoin(__dirname, `%2E/bundles/${entry}/${file}`),\n  //       { encoding: 'utf-8' }\n  //     );\n  //     try {\n  //       bundles%2Epush({ type: fileTypetoType(entry), data: JSON%2Eparse(data) });\n  //       console%2Elog(`     ⚪ ${file}   -   ✅`);\n  //     } catch(err) {\n  //       success = false;\n  //       console%2Elog(`     ⚪ ${file}   -   ❌  - ${err}`);\n  //     }\n  //   });\n  // });\n\n  const components = manifest%2Eartifacts;\n  components%2EforEach(file => {\n    try {\n      const data = fs%2EreadFileSync(\n        path%2Ejoin(filePath, `%2E/${file%2Elocation}`),\n        { encoding: 'utf-8' }\n      );\n      bundles%2Epush({ type: file%2Etype, data: JSON%2Eparse(data) });\n      console%2Elog(`     ⚪ (${file%2Etype})   -   ${file%2Elocation}   -   ✅`);\n    } catch (err) {\n      success = false;\n      console%2Elog(`     ⚪  (${file%2Etype})   -   ${file%2Elocation}   -   ❌  - ${err}`);\n    }\n  });\n\n  const metadata = {\n    name: packageJSON%2Ename,\n    version: packageJSON%2Eversion,\n    description: packageJSON%2Edescription,\n    license: packageJSON%2Elicense,\n    repository: packageJSON%2Erepository,\n    keywords: packageJSON%2Ekeywords,\n    author: packageJSON%2Eauthor,\n    IAPDependencies: packageJSON%2EIAPDependencies,\n    gitlabId: parseInt(PID, 10),\n  };\n\n  if (success) {\n    console%2Elog(`\\n\\nFinished successfully`);\n  } else {\n    console%2Elog(`\\n\\nFinished with error(s)`);\n    process%2Eexit(1);\n  }\n  const artifact = { metadata, manifest, bundles, readme };\n  fs%2EwriteFileSync(\n    path%2Ejoin(filePath, '%2E/artifact%2Ejson'),\n    JSON%2Estringify(artifact, null, 2)\n  );\n} catch (err) {\n  console%2Eerror(`Failed to generate artifact%2Ejson file: ${err}`);\n  process%2Eexit(1);\n}\n"
                            ]
                          },
                          "type": {
                            "type": "string",
                            "examples": [
                              "file"
                            ]
                          }
                        },
                        "required": []
                      }
                    }
                  },
                  "required": []
                },
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "accumulator",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "method",
                "library": "Array",
                "method": "isArray",
                "args": [
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 2
                }
              },
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/content"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 5,
                "type": "method",
                "library": "Array",
                "method": "push",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 8,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 3
                }
              },
              {
                "id": 9,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "directories",
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 3
                }
              },
              {
                "id": 11,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 9,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 12,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 13,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 9,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 14,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "accumulator",
                  "ptr": ""
                }
              },
              {
                "id": 15,
                "type": "method",
                "library": "Object",
                "method": "optional chaining",
                "args": [
                  null,
                  "commitActions"
                ],
                "view": {
                  "row": 3,
                  "col": 1
                }
              },
              {
                "id": 17,
                "type": "method",
                "library": "Array",
                "method": "push",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 2
                }
              },
              {
                "id": 18,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 15,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 17,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 19,
                "type": "declaration",
                "library": "Object",
                "method": "new Object",
                "args": [
                  {}
                ],
                "view": {
                  "row": 4,
                  "col": 1
                }
              },
              {
                "id": 20,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "action",
                  "create"
                ],
                "view": {
                  "row": 4,
                  "col": 2
                }
              },
              {
                "id": 21,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 19,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 20,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 22,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "content",
                  null
                ],
                "view": {
                  "row": 4,
                  "col": 3
                }
              },
              {
                "id": 23,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 20,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 22,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 24,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/content"
                },
                "to": {
                  "location": "method",
                  "name": 22,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 25,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "file_path",
                  null
                ],
                "view": {
                  "row": 5,
                  "col": 2
                }
              },
              {
                "id": 26,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 22,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 25,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 27,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/name"
                },
                "to": {
                  "location": "method",
                  "name": 25,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 28,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 25,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 17,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 29,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "commitActions",
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 3
                }
              },
              {
                "id": 30,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 17,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 29,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 31,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 29,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 32,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 29,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 33,
                "type": "method",
                "library": "Object",
                "method": "optional chaining",
                "args": [
                  null,
                  "directories"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 34,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 33,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 35,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 33,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/args/0/value"
                }
              }
            ],
            "functions": [],
            "name": "ƒ_reduce_2",
            "view": {
              "col": 3,
              "row": 6
            },
            "id": "ƒ_reduce_2",
            "comments": []
          },
          {
            "incoming": [
              {
                "$id": "accumulator",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "examples": [
                      "scripts"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "examples": [
                      "directory"
                    ]
                  },
                  "content": {
                    "type": [
                      "array",
                      "string"
                    ],
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "generate%2Ejs"
                          ]
                        },
                        "content": {
                          "type": "string",
                          "examples": [
                            "const path = require('path');\nconst fs = require('fs');\n\nconst files = ['package%2Ejson', 'manifest%2Ejson', 'README%2Emd'];\nlet success = true;\n\nconst PID = process%2Eargv[2];\nconst gitlabURL = process%2Eargv[3];\nconst gitlabBranch = process%2Eargv[4];\nif (PID === null || PID == undefined || Number%2EisNaN(parseInt(PID, 10))) {\n  console%2Eerror('Please run this script with Gitlab Project ID (integer) as an argument');\n  process%2Eexit(2);\n}\nconsole%2Elog(`Generating artifact%2Ejson file w/ ${PID} as GitLab Project ID`);\n\n/*function fileTypetoType(fileType) {\n  const underscoreToDash = fileType%2Ereplace(/_/g, '-');\n  if (\n    fileType === 'ac_agenda_jobs' ||\n    fileType === 'mop_templates' ||\n    fileType === 'mop_analytic_templates' ||\n    fileType === 'templates' ||\n    fileType === 'workflows'\n  ) {\n    const singularize = underscoreToDash%2Esubstring(\n      0,\n      underscoreToDash%2Elength - 1\n    );\n    return singularize;\n  }\n  if (fileType === 'catalog_store') {\n    return 'service-catalog';\n  }\n  return underscoreToDash;\n}*/\nconst filePath = __dirname%2Ereplace(\"/scripts\", \"\");\ntry {\n  const [packageJSON, manifest, readme] = files%2Emap(entry => {\n    const result = fs%2EreadFileSync(path%2Ejoin(filePath, `%2E/${entry}`), {\n      encoding: 'utf-8'\n    });\n\n    if (entry !== 'README%2Emd') {\n        const parsedRes = JSON%2Eparse(result);\n        if (entry === 'manifest%2Ejson' && Object%2Eprototype%2EhasOwnProperty%2Ecall(parsedRes, 'version')) {\n          delete parsedRes%2Eversion;\n        }\n      return parsedRes;\n    } else {\n      return result%2Ereplace(/\\%2E\\//gm, `${gitlabURL}/-/raw/${gitlabBranch}/`);\n    }\n  });\n\n  // const result = fs%2EreaddirSync(path%2Ejoin(__dirname, '%2E/bundles'));\n  const bundles = [];\n  // result%2EforEach(entry => {\n  //   console%2Elog(`   ➡ generating ${entry}(s)`);\n  //   const fileNames = fs%2EreaddirSync(path%2Ejoin(__dirname, `%2E/bundles/${entry}`));\n  //   fileNames%2EforEach(file => {\n  //     const data = fs%2EreadFileSync(\n  //       path%2Ejoin(__dirname, `%2E/bundles/${entry}/${file}`),\n  //       { encoding: 'utf-8' }\n  //     );\n  //     try {\n  //       bundles%2Epush({ type: fileTypetoType(entry), data: JSON%2Eparse(data) });\n  //       console%2Elog(`     ⚪ ${file}   -   ✅`);\n  //     } catch(err) {\n  //       success = false;\n  //       console%2Elog(`     ⚪ ${file}   -   ❌  - ${err}`);\n  //     }\n  //   });\n  // });\n\n  const components = manifest%2Eartifacts;\n  components%2EforEach(file => {\n    try {\n      const data = fs%2EreadFileSync(\n        path%2Ejoin(filePath, `%2E/${file%2Elocation}`),\n        { encoding: 'utf-8' }\n      );\n      bundles%2Epush({ type: file%2Etype, data: JSON%2Eparse(data) });\n      console%2Elog(`     ⚪ (${file%2Etype})   -   ${file%2Elocation}   -   ✅`);\n    } catch (err) {\n      success = false;\n      console%2Elog(`     ⚪  (${file%2Etype})   -   ${file%2Elocation}   -   ❌  - ${err}`);\n    }\n  });\n\n  const metadata = {\n    name: packageJSON%2Ename,\n    version: packageJSON%2Eversion,\n    description: packageJSON%2Edescription,\n    license: packageJSON%2Elicense,\n    repository: packageJSON%2Erepository,\n    keywords: packageJSON%2Ekeywords,\n    author: packageJSON%2Eauthor,\n    IAPDependencies: packageJSON%2EIAPDependencies,\n    gitlabId: parseInt(PID, 10),\n  };\n\n  if (success) {\n    console%2Elog(`\\n\\nFinished successfully`);\n  } else {\n    console%2Elog(`\\n\\nFinished with error(s)`);\n    process%2Eexit(1);\n  }\n  const artifact = { metadata, manifest, bundles, readme };\n  fs%2EwriteFileSync(\n    path%2Ejoin(filePath, '%2E/artifact%2Ejson'),\n    JSON%2Estringify(artifact, null, 2)\n  );\n} catch (err) {\n  console%2Eerror(`Failed to generate artifact%2Ejson file: ${err}`);\n  process%2Eexit(1);\n}\n"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "examples": [
                            "file"
                          ]
                        }
                      },
                      "required": []
                    }
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "scripts"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "examples": [
                        "directory"
                      ]
                    },
                    "content": {
                      "type": [
                        "array",
                        "string"
                      ],
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "examples": [
                              "generate%2Ejs"
                            ]
                          },
                          "content": {
                            "type": "string",
                            "examples": [
                              "const path = require('path');\nconst fs = require('fs');\n\nconst files = ['package%2Ejson', 'manifest%2Ejson', 'README%2Emd'];\nlet success = true;\n\nconst PID = process%2Eargv[2];\nconst gitlabURL = process%2Eargv[3];\nconst gitlabBranch = process%2Eargv[4];\nif (PID === null || PID == undefined || Number%2EisNaN(parseInt(PID, 10))) {\n  console%2Eerror('Please run this script with Gitlab Project ID (integer) as an argument');\n  process%2Eexit(2);\n}\nconsole%2Elog(`Generating artifact%2Ejson file w/ ${PID} as GitLab Project ID`);\n\n/*function fileTypetoType(fileType) {\n  const underscoreToDash = fileType%2Ereplace(/_/g, '-');\n  if (\n    fileType === 'ac_agenda_jobs' ||\n    fileType === 'mop_templates' ||\n    fileType === 'mop_analytic_templates' ||\n    fileType === 'templates' ||\n    fileType === 'workflows'\n  ) {\n    const singularize = underscoreToDash%2Esubstring(\n      0,\n      underscoreToDash%2Elength - 1\n    );\n    return singularize;\n  }\n  if (fileType === 'catalog_store') {\n    return 'service-catalog';\n  }\n  return underscoreToDash;\n}*/\nconst filePath = __dirname%2Ereplace(\"/scripts\", \"\");\ntry {\n  const [packageJSON, manifest, readme] = files%2Emap(entry => {\n    const result = fs%2EreadFileSync(path%2Ejoin(filePath, `%2E/${entry}`), {\n      encoding: 'utf-8'\n    });\n\n    if (entry !== 'README%2Emd') {\n        const parsedRes = JSON%2Eparse(result);\n        if (entry === 'manifest%2Ejson' && Object%2Eprototype%2EhasOwnProperty%2Ecall(parsedRes, 'version')) {\n          delete parsedRes%2Eversion;\n        }\n      return parsedRes;\n    } else {\n      return result%2Ereplace(/\\%2E\\//gm, `${gitlabURL}/-/raw/${gitlabBranch}/`);\n    }\n  });\n\n  // const result = fs%2EreaddirSync(path%2Ejoin(__dirname, '%2E/bundles'));\n  const bundles = [];\n  // result%2EforEach(entry => {\n  //   console%2Elog(`   ➡ generating ${entry}(s)`);\n  //   const fileNames = fs%2EreaddirSync(path%2Ejoin(__dirname, `%2E/bundles/${entry}`));\n  //   fileNames%2EforEach(file => {\n  //     const data = fs%2EreadFileSync(\n  //       path%2Ejoin(__dirname, `%2E/bundles/${entry}/${file}`),\n  //       { encoding: 'utf-8' }\n  //     );\n  //     try {\n  //       bundles%2Epush({ type: fileTypetoType(entry), data: JSON%2Eparse(data) });\n  //       console%2Elog(`     ⚪ ${file}   -   ✅`);\n  //     } catch(err) {\n  //       success = false;\n  //       console%2Elog(`     ⚪ ${file}   -   ❌  - ${err}`);\n  //     }\n  //   });\n  // });\n\n  const components = manifest%2Eartifacts;\n  components%2EforEach(file => {\n    try {\n      const data = fs%2EreadFileSync(\n        path%2Ejoin(filePath, `%2E/${file%2Elocation}`),\n        { encoding: 'utf-8' }\n      );\n      bundles%2Epush({ type: file%2Etype, data: JSON%2Eparse(data) });\n      console%2Elog(`     ⚪ (${file%2Etype})   -   ${file%2Elocation}   -   ✅`);\n    } catch (err) {\n      success = false;\n      console%2Elog(`     ⚪  (${file%2Etype})   -   ${file%2Elocation}   -   ❌  - ${err}`);\n    }\n  });\n\n  const metadata = {\n    name: packageJSON%2Ename,\n    version: packageJSON%2Eversion,\n    description: packageJSON%2Edescription,\n    license: packageJSON%2Elicense,\n    repository: packageJSON%2Erepository,\n    keywords: packageJSON%2Ekeywords,\n    author: packageJSON%2Eauthor,\n    IAPDependencies: packageJSON%2EIAPDependencies,\n    gitlabId: parseInt(PID, 10),\n  };\n\n  if (success) {\n    console%2Elog(`\\n\\nFinished successfully`);\n  } else {\n    console%2Elog(`\\n\\nFinished with error(s)`);\n    process%2Eexit(1);\n  }\n  const artifact = { metadata, manifest, bundles, readme };\n  fs%2EwriteFileSync(\n    path%2Ejoin(filePath, '%2E/artifact%2Ejson'),\n    JSON%2Estringify(artifact, null, 2)\n  );\n} catch (err) {\n  console%2Eerror(`Failed to generate artifact%2Ejson file: ${err}`);\n  process%2Eexit(1);\n}\n"
                            ]
                          },
                          "type": {
                            "type": "string",
                            "examples": [
                              "file"
                            ]
                          }
                        },
                        "required": []
                      }
                    }
                  },
                  "required": []
                },
                "optional": true
              },
              {
                "$id": "constantValue1",
                "type": "string",
                "isConstValue": true
              }
            ],
            "outgoing": [
              {
                "title": "accumulator",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "method",
                "library": "Object",
                "method": "optional chaining",
                "args": [
                  null,
                  "directories"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 3,
                "type": "method",
                "library": "Array",
                "method": "isArray",
                "args": [
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 1
                }
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/content"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 8,
                "type": "method",
                "library": "Array",
                "method": "push",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 10,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 11,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "directories",
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 3
                }
              },
              {
                "id": 12,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 13,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 14,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 2
                }
              },
              {
                "id": 15,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 14,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 16,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 14,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 17,
                "type": "declaration",
                "library": "Object",
                "method": "new Object",
                "args": [
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 1
                }
              },
              {
                "id": 18,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "action",
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 2
                }
              },
              {
                "id": 19,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 17,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 18,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 20,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "file_path",
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 3
                }
              },
              {
                "id": 21,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 18,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 20,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 22,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/name"
                },
                "to": {
                  "location": "method",
                  "name": 20,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 23,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "content",
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 4
                }
              },
              {
                "id": 24,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 20,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 23,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 25,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/content"
                },
                "to": {
                  "location": "method",
                  "name": 23,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 27,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 14,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "accumulator",
                  "ptr": ""
                }
              },
              {
                "id": 28,
                "type": "method",
                "library": "Object",
                "method": "optional chaining",
                "args": [
                  null,
                  "commitActions"
                ],
                "view": {
                  "row": 4,
                  "col": 1
                }
              },
              {
                "id": 29,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 28,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 30,
                "type": "method",
                "library": "Array",
                "method": "push",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 4,
                  "col": 2
                }
              },
              {
                "id": 31,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 28,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 30,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 32,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 23,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 30,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 33,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "commitActions",
                  null
                ],
                "view": {
                  "row": 4,
                  "col": 3
                }
              },
              {
                "id": 34,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 33,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 35,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 30,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 33,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 36,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 33,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 14,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 37,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "constantValue1",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 18,
                  "ptr": "/args/2/value"
                }
              }
            ],
            "functions": [],
            "name": "ƒ_reduce_1 (1)",
            "view": {
              "col": 4,
              "row": 5
            },
            "id": "ƒ_reduce_1 (1)",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              },
              {
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "type": "array",
                "$id": "array",
                "optional": true
              },
              {
                "$id": "constantValue1",
                "type": "string",
                "isConstValue": true
              }
            ],
            "outgoing": [
              {
                "title": "accumulator",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "method",
                "library": "Object",
                "method": "optional chaining",
                "args": [
                  null,
                  "content"
                ],
                "view": {
                  "row": 2,
                  "col": 1
                }
              },
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 3,
                "type": "method",
                "library": "Array",
                "method": "reduce",
                "args": [
                  null,
                  "ƒ_reduce_3 (1)",
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 2
                }
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "accumulator",
                  "ptr": ""
                }
              },
              {
                "id": 7,
                "type": "method",
                "library": "Object",
                "method": "optional chaining",
                "args": [
                  null,
                  "name"
                ],
                "view": {
                  "row": 3,
                  "col": 1
                }
              },
              {
                "id": 8,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/3/value"
                }
              },
              {
                "id": 10,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "constantValue1",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/4/value"
                }
              }
            ],
            "functions": [],
            "name": "ƒ_reduce_2 (1)",
            "view": {
              "col": 2,
              "row": 4
            },
            "id": "ƒ_reduce_2 (1)",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              },
              {
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "type": "array",
                "$id": "array",
                "optional": true
              },
              {
                "$id": "constantValue1",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "isConstValue": true
              },
              {
                "$id": "constantValue2",
                "type": "string",
                "isConstValue": true
              }
            ],
            "outgoing": [
              {
                "title": "accumulator",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              }
            ],
            "steps": [
              {
                "id": 3,
                "type": "method",
                "library": "Array",
                "method": "isArray",
                "args": [
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 2
                }
              },
              {
                "id": 5,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 3
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 7,
                "type": "declaration",
                "library": "Object",
                "method": "new Object",
                "args": [
                  null
                ],
                "view": {
                  "row": 4,
                  "col": 1
                }
              },
              {
                "id": 8,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "action",
                  null
                ],
                "view": {
                  "row": 4,
                  "col": 2
                }
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 7,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 10,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "file_path",
                  null
                ],
                "view": {
                  "row": 4,
                  "col": 3
                }
              },
              {
                "id": 11,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 10,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 12,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "content",
                  null
                ],
                "view": {
                  "row": 4,
                  "col": 4
                }
              },
              {
                "id": 13,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 10,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 12,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 14,
                "type": "method",
                "library": "Object",
                "method": "optional chaining",
                "args": [
                  null,
                  "content"
                ],
                "view": {
                  "row": 3,
                  "col": 1
                }
              },
              {
                "id": 15,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 14,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 16,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 14,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 17,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 14,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 12,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 18,
                "type": "method",
                "library": "Array",
                "method": "push",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 4
                }
              },
              {
                "id": 19,
                "type": "method",
                "library": "Object",
                "method": "optional chaining",
                "args": [
                  null,
                  "commitActions"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 20,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 19,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 21,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 19,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 18,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 22,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 12,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 18,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 23,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "commitActions",
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 4
                }
              },
              {
                "id": 24,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 18,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 23,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 25,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 23,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 26,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 23,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 27,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "accumulator",
                  "ptr": ""
                }
              },
              {
                "id": 29,
                "type": "method",
                "library": "String",
                "method": "concat",
                "args": [
                  null,
                  "/",
                  null
                ],
                "view": {
                  "row": 5,
                  "col": 2
                }
              },
              {
                "id": 30,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "constantValue1",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 29,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 31,
                "type": "method",
                "library": "Object",
                "method": "optional chaining",
                "args": [
                  null,
                  "name"
                ],
                "view": {
                  "row": 2,
                  "col": 1
                }
              },
              {
                "id": 32,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 31,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 33,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 31,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 29,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 34,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 29,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 10,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 35,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "name",
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 2
                }
              },
              {
                "id": 36,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 35,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 37,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 29,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 35,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 38,
                "type": "method",
                "library": "Array",
                "method": "push",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 3
                }
              },
              {
                "id": 39,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 35,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 38,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 40,
                "type": "method",
                "library": "Object",
                "method": "optional chaining",
                "args": [
                  null,
                  "directories"
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 41,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 40,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 42,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 40,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 38,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 43,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "directories",
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 3
                }
              },
              {
                "id": 44,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 38,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 43,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 45,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 43,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 46,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 43,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 47,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "constantValue2",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/2/value"
                }
              }
            ],
            "functions": [],
            "name": "ƒ_reduce_3 (1)",
            "view": {
              "col": 4,
              "row": 6
            },
            "id": "ƒ_reduce_3 (1)",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 3,
          "row": 5
        },
        "created": "2025-02-06T18:32:41.041Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:41.041Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "6075bc6c8c016f0098c7283f",
        "name": "updatePackageJSONGitlab",
        "description": "",
        "incoming": [
          {
            "$id": "filesArray",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "examples": [
                    "bundles"
                  ]
                },
                "type": {
                  "type": "string",
                  "examples": [
                    "directory"
                  ]
                },
                "content": {
                  "type": [
                    "string",
                    "array"
                  ]
                }
              },
              "required": []
            }
          },
          {
            "$id": "packageJsonName",
            "type": "string",
            "examples": [
              "sdfsa"
            ]
          },
          {
            "$id": "packageJsonVersion",
            "type": "string",
            "examples": [
              "dsfds"
            ]
          }
        ],
        "outgoing": [
          {
            "$id": "fixedArray",
            "type": "array"
          }
        ],
        "steps": [
          {
            "id": 2,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "filesArray",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 8,
            "type": "declaration",
            "library": "Object",
            "method": "new Object",
            "args": [
              "{         \"type\": \"gitlab\",         \"hostname\": \"gitlab.com\",         \"path\": \"itentialopensource/pre-built-automations\"     }"
            ],
            "view": {
              "row": 4,
              "col": 3
            }
          },
          {
            "id": 23,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "filesArray",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 22,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 27,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "packageJsonName",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 26,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 42,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "packageJsonVersion",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 39,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 1,
            "type": "method",
            "library": "Array",
            "method": "find",
            "args": [
              null,
              "ƒ_query_1",
              null
            ],
            "view": {
              "row": 1,
              "col": 1
            }
          },
          {
            "id": 5,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 4,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 4,
            "type": "method",
            "library": "Object",
            "method": "getProperty",
            "args": [
              null,
              "content"
            ],
            "view": {
              "row": 2,
              "col": 2
            }
          },
          {
            "id": 7,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 4,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 6,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 6,
            "type": "method",
            "library": "JSON",
            "method": "parse",
            "args": [
              null,
              null
            ],
            "view": {
              "row": 2,
              "col": 3
            }
          },
          {
            "id": 40,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 6,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 39,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 39,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "version",
              null
            ],
            "view": {
              "row": 5,
              "col": 4
            }
          },
          {
            "id": 41,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 39,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 17,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 17,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "repository",
              null
            ],
            "view": {
              "row": 4,
              "col": 4
            }
          },
          {
            "id": 28,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 17,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 26,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 26,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "name",
              null
            ],
            "view": {
              "row": 3,
              "col": 4
            }
          },
          {
            "id": 29,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 26,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 16,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 16,
            "type": "method",
            "library": "JSON",
            "method": "stringify",
            "args": [
              null,
              null,
              "  "
            ],
            "view": {
              "row": 2,
              "col": 4
            }
          },
          {
            "id": 24,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 16,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 22,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 22,
            "type": "method",
            "library": "Array",
            "method": "map",
            "args": [
              null,
              "ƒ_map_2",
              null
            ],
            "view": {
              "row": 1,
              "col": 5
            }
          },
          {
            "id": 25,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 22,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "fixedArray",
              "ptr": ""
            }
          },
          {
            "id": 43,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 8,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 17,
              "ptr": "/args/2/value"
            }
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "examples": [
                      "bundles"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "examples": [
                      "directory"
                    ]
                  },
                  "content": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "ac_agenda_jobs"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "examples": [
                            "directory"
                          ]
                        },
                        "content": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "IAP Artifacts ASA Firewall Object Group Update.json"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "file"
                                ]
                              },
                              "content": {
                                "type": "string",
                                "examples": [
                                  "{\n  \"_id\": \"5f3c38e78236fd5385c31bbd\",\n  \"name\": \"IAP Artifacts ASA Firewall Object Group Update\",\n  \"data\": {\n    \"lastUpdated\": \"2020-03-23T19:45:50.899Z\",\n    \"formData\": {\n      \"zeroTouch\": true,\n      \"asaFirewallDevice\": \"asa-aws-ansible\",\n      \"hostList\": [],\n      \"checkbox1\": true\n    },\n    \"formId\": \"IAP Artifacts ASA Firewall Object Group Update\",\n    \"workflowId\": \"IAP Artifacts ASA Firewall Object Group Update\",\n    \"description\": \"IAP Artifacts ASA Firewall Object Group Update\",\n    \"gbac\": {\n      \"write\": [],\n      \"read\": []\n    },\n    \"modifiedById\": \"5f3bda043e82cb0740b460d6\",\n    \"modifiedByUsername\": \"justin.cotton\"\n  },\n  \"lastModifiedBy\": \"DSUP-IAP20201:11193\",\n  \"lastRunAt\": null,\n  \"nextRunAt\": null,\n  \"priority\": 0,\n  \"repeatInterval\": null,\n  \"repeatTimezone\": null,\n  \"type\": \"normal\"\n}"
                                ]
                              }
                            },
                            "required": []
                          }
                        }
                      },
                      "required": []
                    }
                  }
                },
                "required": [],
                "$id": "element"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "bundles"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "examples": [
                        "directory"
                      ]
                    },
                    "content": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "examples": [
                              "ac_agenda_jobs"
                            ]
                          },
                          "type": {
                            "type": "string",
                            "examples": [
                              "directory"
                            ]
                          },
                          "content": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "examples": [
                                    "IAP Artifacts ASA Firewall Object Group Update.json"
                                  ]
                                },
                                "type": {
                                  "type": "string",
                                  "examples": [
                                    "file"
                                  ]
                                },
                                "content": {
                                  "type": "string",
                                  "examples": [
                                    "{\n  \"_id\": \"5f3c38e78236fd5385c31bbd\",\n  \"name\": \"IAP Artifacts ASA Firewall Object Group Update\",\n  \"data\": {\n    \"lastUpdated\": \"2020-03-23T19:45:50.899Z\",\n    \"formData\": {\n      \"zeroTouch\": true,\n      \"asaFirewallDevice\": \"asa-aws-ansible\",\n      \"hostList\": [],\n      \"checkbox1\": true\n    },\n    \"formId\": \"IAP Artifacts ASA Firewall Object Group Update\",\n    \"workflowId\": \"IAP Artifacts ASA Firewall Object Group Update\",\n    \"description\": \"IAP Artifacts ASA Firewall Object Group Update\",\n    \"gbac\": {\n      \"write\": [],\n      \"read\": []\n    },\n    \"modifiedById\": \"5f3bda043e82cb0740b460d6\",\n    \"modifiedByUsername\": \"justin.cotton\"\n  },\n  \"lastModifiedBy\": \"DSUP-IAP20201:11193\",\n  \"lastRunAt\": null,\n  \"nextRunAt\": null,\n  \"priority\": 0,\n  \"repeatInterval\": null,\n  \"repeatTimezone\": null,\n  \"type\": \"normal\"\n}"
                                  ]
                                }
                              },
                              "required": []
                            }
                          }
                        },
                        "required": []
                      }
                    }
                  },
                  "required": []
                },
                "optional": true
              },
              {
                "$id": "constantValue1",
                "type": "string",
                "isConstValue": true
              }
            ],
            "outgoing": [
              {
                "title": "return",
                "type": "boolean",
                "$id": "return"
              }
            ],
            "steps": [
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "element",
                  "ptr": "/name"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 1,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  "package.json"
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "return",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "ƒ_query_1",
            "view": {
              "col": 3,
              "row": 5
            },
            "id": "ƒ_query_1",
            "comments": []
          },
          {
            "incoming": [
              {
                "$id": "accumulator",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "examples": [
                      "bundles"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "examples": [
                      "directory"
                    ]
                  },
                  "content": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "ac_agenda_jobs"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "examples": [
                            "directory"
                          ]
                        },
                        "content": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "IAP Artifacts ASA Firewall Object Group Update.json"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "file"
                                ]
                              },
                              "content": {
                                "type": "string",
                                "examples": [
                                  "{\n  \"_id\": \"5f3c38e78236fd5385c31bbd\",\n  \"name\": \"IAP Artifacts ASA Firewall Object Group Update\",\n  \"data\": {\n    \"lastUpdated\": \"2020-03-23T19:45:50.899Z\",\n    \"formData\": {\n      \"zeroTouch\": true,\n      \"asaFirewallDevice\": \"asa-aws-ansible\",\n      \"hostList\": [],\n      \"checkbox1\": true\n    },\n    \"formId\": \"IAP Artifacts ASA Firewall Object Group Update\",\n    \"workflowId\": \"IAP Artifacts ASA Firewall Object Group Update\",\n    \"description\": \"IAP Artifacts ASA Firewall Object Group Update\",\n    \"gbac\": {\n      \"write\": [],\n      \"read\": []\n    },\n    \"modifiedById\": \"5f3bda043e82cb0740b460d6\",\n    \"modifiedByUsername\": \"justin.cotton\"\n  },\n  \"lastModifiedBy\": \"DSUP-IAP20201:11193\",\n  \"lastRunAt\": null,\n  \"nextRunAt\": null,\n  \"priority\": 0,\n  \"repeatInterval\": null,\n  \"repeatTimezone\": null,\n  \"type\": \"normal\"\n}"
                                ]
                              }
                            },
                            "required": []
                          }
                        }
                      },
                      "required": []
                    }
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "bundles"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "examples": [
                        "directory"
                      ]
                    },
                    "content": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "examples": [
                              "ac_agenda_jobs"
                            ]
                          },
                          "type": {
                            "type": "string",
                            "examples": [
                              "directory"
                            ]
                          },
                          "content": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "examples": [
                                    "IAP Artifacts ASA Firewall Object Group Update.json"
                                  ]
                                },
                                "type": {
                                  "type": "string",
                                  "examples": [
                                    "file"
                                  ]
                                },
                                "content": {
                                  "type": "string",
                                  "examples": [
                                    "{\n  \"_id\": \"5f3c38e78236fd5385c31bbd\",\n  \"name\": \"IAP Artifacts ASA Firewall Object Group Update\",\n  \"data\": {\n    \"lastUpdated\": \"2020-03-23T19:45:50.899Z\",\n    \"formData\": {\n      \"zeroTouch\": true,\n      \"asaFirewallDevice\": \"asa-aws-ansible\",\n      \"hostList\": [],\n      \"checkbox1\": true\n    },\n    \"formId\": \"IAP Artifacts ASA Firewall Object Group Update\",\n    \"workflowId\": \"IAP Artifacts ASA Firewall Object Group Update\",\n    \"description\": \"IAP Artifacts ASA Firewall Object Group Update\",\n    \"gbac\": {\n      \"write\": [],\n      \"read\": []\n    },\n    \"modifiedById\": \"5f3bda043e82cb0740b460d6\",\n    \"modifiedByUsername\": \"justin.cotton\"\n  },\n  \"lastModifiedBy\": \"DSUP-IAP20201:11193\",\n  \"lastRunAt\": null,\n  \"nextRunAt\": null,\n  \"priority\": 0,\n  \"repeatInterval\": null,\n  \"repeatTimezone\": null,\n  \"type\": \"normal\"\n}"
                                  ]
                                }
                              },
                              "required": []
                            }
                          }
                        },
                        "required": []
                      }
                    }
                  },
                  "required": []
                },
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "accumulator",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              }
            ],
            "steps": [],
            "functions": [],
            "name": "ƒ_reduce_1",
            "view": {
              "col": 2,
              "row": 5
            },
            "id": "ƒ_reduce_1",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "examples": [
                      "bundles"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "examples": [
                      "directory"
                    ]
                  },
                  "content": {
                    "type": "string"
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "bundles"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "examples": [
                        "directory"
                      ]
                    },
                    "content": {
                      "type": "string"
                    }
                  },
                  "required": []
                },
                "optional": true
              },
              {
                "$id": "constantValue1",
                "type": "string",
                "isConstValue": true
              }
            ],
            "outgoing": [
              {
                "title": "newValue",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "editable": true,
                "$id": "newValue"
              }
            ],
            "steps": [
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/name"
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 8,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "constantValue1",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 4,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  "package.json"
                ],
                "view": {
                  "row": 2,
                  "col": 1
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 7,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "content",
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 2
                }
              },
              {
                "id": 10,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 1,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 3
                }
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "newValue",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "ƒ_map_1",
            "view": {
              "col": 3,
              "row": 5
            },
            "id": "ƒ_map_1",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "examples": [
                      "bundles"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "examples": [
                      "directory"
                    ]
                  },
                  "content": {
                    "type": [
                      "string",
                      "array"
                    ]
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "bundles"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "examples": [
                        "directory"
                      ]
                    },
                    "content": {
                      "type": [
                        "string",
                        "array"
                      ]
                    }
                  },
                  "required": []
                },
                "optional": true
              },
              {
                "$id": "constantValue1",
                "type": "string",
                "isConstValue": true
              }
            ],
            "outgoing": [
              {
                "title": "newValue",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "editable": true,
                "$id": "newValue"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "content",
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 2
                }
              },
              {
                "id": 2,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  "package.json"
                ],
                "view": {
                  "row": 2,
                  "col": 2
                }
              },
              {
                "id": 3,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 3
                }
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/name"
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "constantValue1",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 8,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 10,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "newValue",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "ƒ_map_2",
            "view": {
              "col": 3,
              "row": 4
            },
            "id": "ƒ_map_2",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 6,
          "row": 6
        },
        "created": "2025-02-06T18:32:40.817Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:40.817Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "6075d13d8c016f0098c7284f",
        "name": "getUriForFilesGitlab",
        "description": "",
        "incoming": [
          {
            "$id": "repoID",
            "type": "integer"
          }
        ],
        "outgoing": [
          {
            "$id": "uriForGet",
            "type": "string"
          }
        ],
        "steps": [
          {
            "id": 3,
            "type": "declaration",
            "library": "String",
            "method": "new String",
            "args": [
              "https://gitlab.com/api/v4/projects/"
            ],
            "view": {
              "row": 1,
              "col": 2
            }
          },
          {
            "id": 7,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "repoID",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 1,
            "type": "method",
            "library": "Number",
            "method": "toString",
            "args": [
              null,
              null
            ],
            "view": {
              "row": 1,
              "col": 1
            }
          },
          {
            "id": 5,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 3,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 4,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 8,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 4,
              "ptr": "/args/1/value"
            }
          },
          {
            "id": 4,
            "type": "method",
            "library": "String",
            "method": "concat",
            "args": [
              null,
              null,
              "/repository/tree",
              "?recursive=true",
              "&per_page=5000"
            ],
            "view": {
              "row": 2,
              "col": 2
            }
          },
          {
            "id": 6,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 4,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "uriForGet",
              "ptr": ""
            }
          }
        ],
        "functions": [],
        "comments": [],
        "view": {
          "col": 3,
          "row": 5
        },
        "created": "2025-02-06T18:32:40.830Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:40.830Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "6075d1cf8c016f0098c72852",
        "name": "actionCreateGitlab",
        "description": "",
        "incoming": [
          {
            "$id": "commitUpdate",
            "type": "object",
            "properties": {
              "branch": {
                "type": "string",
                "examples": [
                  "major/2020-10-08T07-48-36"
                ]
              },
              "commit_message": {
                "type": "string",
                "examples": [
                  "10/8 I added a child job to the workflow and am now running the push to gitlab with re-discovery"
                ]
              },
              "actions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "action": {
                      "type": "string",
                      "examples": [
                        "update"
                      ]
                    },
                    "file_path": {
                      "type": "string",
                      "examples": [
                        "scripts/generate.js"
                      ]
                    },
                    "content": {
                      "type": "string",
                      "examples": [
                        "const path = require('path');\nconst fs = require('fs');\n\nconst files = ['package.json', 'manifest.json', 'README.md'];\nlet success = true;\n\nconst PID = process.argv[2];\nconst gitlabURL = process.argv[3];\nconst gitlabBranch = process.argv[4];\nif (PID === null || PID == undefined || Number.isNaN(parseInt(PID, 10))) {\n  console.error('Please run this script with Gitlab Project ID (integer) as an argument');\n  process.exit(2);\n}\nconsole.log(`Generating artifact.json file w/ ${PID} as GitLab Project ID`);\n\n/*function fileTypetoType(fileType) {\n  const underscoreToDash = fileType.replace(/_/g, '-');\n  if (\n    fileType === 'ac_agenda_jobs' ||\n    fileType === 'mop_templates' ||\n    fileType === 'mop_analytic_templates' ||\n    fileType === 'templates' ||\n    fileType === 'workflows'\n  ) {\n    const singularize = underscoreToDash.substring(\n      0,\n      underscoreToDash.length - 1\n    );\n    return singularize;\n  }\n  if (fileType === 'catalog_store') {\n    return 'service-catalog';\n  }\n  return underscoreToDash;\n}*/\nconst filePath = __dirname.replace(\"/scripts\", \"\");\ntry {\n  const [packageJSON, manifest, readme] = files.map(entry => {\n    const result = fs.readFileSync(path.join(filePath, `./${entry}`), {\n      encoding: 'utf-8'\n    });\n\n    if (entry !== 'README.md') {\n        const parsedRes = JSON.parse(result);\n        if (entry === 'manifest.json' && Object.prototype.hasOwnProperty.call(parsedRes, 'version')) {\n          delete parsedRes.version;\n        }\n      return parsedRes;\n    } else {\n      return result.replace(/\\.\\//gm, `${gitlabURL}/-/raw/${gitlabBranch}/`);\n    }\n  });\n\n  // const result = fs.readdirSync(path.join(__dirname, './bundles'));\n  const bundles = [];\n  // result.forEach(entry => {\n  //   console.log(`   ➡ generating ${entry}(s)`);\n  //   const fileNames = fs.readdirSync(path.join(__dirname, `./bundles/${entry}`));\n  //   fileNames.forEach(file => {\n  //     const data = fs.readFileSync(\n  //       path.join(__dirname, `./bundles/${entry}/${file}`),\n  //       { encoding: 'utf-8' }\n  //     );\n  //     try {\n  //       bundles.push({ type: fileTypetoType(entry), data: JSON.parse(data) });\n  //       console.log(`     ⚪ ${file}   -   ✅`);\n  //     } catch(err) {\n  //       success = false;\n  //       console.log(`     ⚪ ${file}   -   ❌  - ${err}`);\n  //     }\n  //   });\n  // });\n\n  const components = manifest.artifacts;\n  components.forEach(file => {\n    try {\n      const data = fs.readFileSync(\n        path.join(filePath, `./${file.location}`),\n        { encoding: 'utf-8' }\n      );\n      bundles.push({ type: file.type, data: JSON.parse(data) });\n      console.log(`     ⚪ (${file.type})   -   ${file.location}   -   ✅`);\n    } catch (err) {\n      success = false;\n      console.log(`     ⚪  (${file.type})   -   ${file.location}   -   ❌  - ${err}`);\n    }\n  });\n\n  const metadata = {\n    name: packageJSON.name,\n    version: packageJSON.version,\n    description: packageJSON.description,\n    license: packageJSON.license,\n    repository: packageJSON.repository,\n    keywords: packageJSON.keywords,\n    author: packageJSON.author,\n    IAPDependencies: packageJSON.IAPDependencies,\n    gitlabId: parseInt(PID, 10),\n  };\n\n  if (success) {\n    console.log(`\\n\\nFinished successfully`);\n  } else {\n    console.log(`\\n\\nFinished with error(s)`);\n    process.exit(1);\n  }\n  const artifact = { metadata, manifest, bundles, readme };\n  fs.writeFileSync(\n    path.join(filePath, './artifact.json'),\n    JSON.stringify(artifact, null, 2)\n  );\n} catch (err) {\n  console.error(`Failed to generate artifact.json file: ${err}`);\n  process.exit(1);\n}"
                      ]
                    }
                  },
                  "required": []
                }
              }
            },
            "required": []
          }
        ],
        "outgoing": [
          {
            "$id": "branch",
            "type": "string"
          },
          {
            "$id": "commit_message",
            "type": "string"
          },
          {
            "$id": "actions",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "string",
                  "examples": [
                    "update"
                  ]
                },
                "file_path": {
                  "type": "string",
                  "examples": [
                    "scripts/generate.js"
                  ]
                },
                "content": {
                  "type": "string",
                  "examples": [
                    "const path = require('path');\nconst fs = require('fs');\n\nconst files = ['package.json', 'manifest.json', 'README.md'];\nlet success = true;\n\nconst PID = process.argv[2];\nconst gitlabURL = process.argv[3];\nconst gitlabBranch = process.argv[4];\nif (PID === null || PID == undefined || Number.isNaN(parseInt(PID, 10))) {\n  console.error('Please run this script with Gitlab Project ID (integer) as an argument');\n  process.exit(2);\n}\nconsole.log(`Generating artifact.json file w/ ${PID} as GitLab Project ID`);\n\n/*function fileTypetoType(fileType) {\n  const underscoreToDash = fileType.replace(/_/g, '-');\n  if (\n    fileType === 'ac_agenda_jobs' ||\n    fileType === 'mop_templates' ||\n    fileType === 'mop_analytic_templates' ||\n    fileType === 'templates' ||\n    fileType === 'workflows'\n  ) {\n    const singularize = underscoreToDash.substring(\n      0,\n      underscoreToDash.length - 1\n    );\n    return singularize;\n  }\n  if (fileType === 'catalog_store') {\n    return 'service-catalog';\n  }\n  return underscoreToDash;\n}*/\nconst filePath = __dirname.replace(\"/scripts\", \"\");\ntry {\n  const [packageJSON, manifest, readme] = files.map(entry => {\n    const result = fs.readFileSync(path.join(filePath, `./${entry}`), {\n      encoding: 'utf-8'\n    });\n\n    if (entry !== 'README.md') {\n        const parsedRes = JSON.parse(result);\n        if (entry === 'manifest.json' && Object.prototype.hasOwnProperty.call(parsedRes, 'version')) {\n          delete parsedRes.version;\n        }\n      return parsedRes;\n    } else {\n      return result.replace(/\\.\\//gm, `${gitlabURL}/-/raw/${gitlabBranch}/`);\n    }\n  });\n\n  // const result = fs.readdirSync(path.join(__dirname, './bundles'));\n  const bundles = [];\n  // result.forEach(entry => {\n  //   console.log(`   ➡ generating ${entry}(s)`);\n  //   const fileNames = fs.readdirSync(path.join(__dirname, `./bundles/${entry}`));\n  //   fileNames.forEach(file => {\n  //     const data = fs.readFileSync(\n  //       path.join(__dirname, `./bundles/${entry}/${file}`),\n  //       { encoding: 'utf-8' }\n  //     );\n  //     try {\n  //       bundles.push({ type: fileTypetoType(entry), data: JSON.parse(data) });\n  //       console.log(`     ⚪ ${file}   -   ✅`);\n  //     } catch(err) {\n  //       success = false;\n  //       console.log(`     ⚪ ${file}   -   ❌  - ${err}`);\n  //     }\n  //   });\n  // });\n\n  const components = manifest.artifacts;\n  components.forEach(file => {\n    try {\n      const data = fs.readFileSync(\n        path.join(filePath, `./${file.location}`),\n        { encoding: 'utf-8' }\n      );\n      bundles.push({ type: file.type, data: JSON.parse(data) });\n      console.log(`     ⚪ (${file.type})   -   ${file.location}   -   ✅`);\n    } catch (err) {\n      success = false;\n      console.log(`     ⚪  (${file.type})   -   ${file.location}   -   ❌  - ${err}`);\n    }\n  });\n\n  const metadata = {\n    name: packageJSON.name,\n    version: packageJSON.version,\n    description: packageJSON.description,\n    license: packageJSON.license,\n    repository: packageJSON.repository,\n    keywords: packageJSON.keywords,\n    author: packageJSON.author,\n    IAPDependencies: packageJSON.IAPDependencies,\n    gitlabId: parseInt(PID, 10),\n  };\n\n  if (success) {\n    console.log(`\\n\\nFinished successfully`);\n  } else {\n    console.log(`\\n\\nFinished with error(s)`);\n    process.exit(1);\n  }\n  const artifact = { metadata, manifest, bundles, readme };\n  fs.writeFileSync(\n    path.join(filePath, './artifact.json'),\n    JSON.stringify(artifact, null, 2)\n  );\n} catch (err) {\n  console.error(`Failed to generate artifact.json file: ${err}`);\n  process.exit(1);\n}"
                  ]
                }
              },
              "required": []
            }
          }
        ],
        "steps": [
          {
            "id": 3,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "commitUpdate",
              "ptr": "/actions"
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 5,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "commitUpdate",
              "ptr": "/commit_message"
            },
            "to": {
              "location": "outgoing",
              "name": "commit_message",
              "ptr": ""
            }
          },
          {
            "id": 6,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "commitUpdate",
              "ptr": "/branch"
            },
            "to": {
              "location": "outgoing",
              "name": "branch",
              "ptr": ""
            }
          },
          {
            "id": 1,
            "type": "method",
            "library": "Array",
            "method": "map",
            "args": [
              null,
              "ƒ_map_1"
            ],
            "view": {
              "row": 2,
              "col": 1
            }
          },
          {
            "id": 4,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "actions",
              "ptr": ""
            }
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "action": {
                    "type": "string",
                    "examples": [
                      "update"
                    ]
                  },
                  "file_path": {
                    "type": "string",
                    "examples": [
                      "scripts/generate.js"
                    ]
                  },
                  "content": {
                    "type": "string",
                    "examples": [
                      "const path = require('path');\nconst fs = require('fs');\n\nconst files = ['package.json', 'manifest.json', 'README.md'];\nlet success = true;\n\nconst PID = process.argv[2];\nconst gitlabURL = process.argv[3];\nconst gitlabBranch = process.argv[4];\nif (PID === null || PID == undefined || Number.isNaN(parseInt(PID, 10))) {\n  console.error('Please run this script with Gitlab Project ID (integer) as an argument');\n  process.exit(2);\n}\nconsole.log(`Generating artifact.json file w/ ${PID} as GitLab Project ID`);\n\n/*function fileTypetoType(fileType) {\n  const underscoreToDash = fileType.replace(/_/g, '-');\n  if (\n    fileType === 'ac_agenda_jobs' ||\n    fileType === 'mop_templates' ||\n    fileType === 'mop_analytic_templates' ||\n    fileType === 'templates' ||\n    fileType === 'workflows'\n  ) {\n    const singularize = underscoreToDash.substring(\n      0,\n      underscoreToDash.length - 1\n    );\n    return singularize;\n  }\n  if (fileType === 'catalog_store') {\n    return 'service-catalog';\n  }\n  return underscoreToDash;\n}*/\nconst filePath = __dirname.replace(\"/scripts\", \"\");\ntry {\n  const [packageJSON, manifest, readme] = files.map(entry => {\n    const result = fs.readFileSync(path.join(filePath, `./${entry}`), {\n      encoding: 'utf-8'\n    });\n\n    if (entry !== 'README.md') {\n        const parsedRes = JSON.parse(result);\n        if (entry === 'manifest.json' && Object.prototype.hasOwnProperty.call(parsedRes, 'version')) {\n          delete parsedRes.version;\n        }\n      return parsedRes;\n    } else {\n      return result.replace(/\\.\\//gm, `${gitlabURL}/-/raw/${gitlabBranch}/`);\n    }\n  });\n\n  // const result = fs.readdirSync(path.join(__dirname, './bundles'));\n  const bundles = [];\n  // result.forEach(entry => {\n  //   console.log(`   ➡ generating ${entry}(s)`);\n  //   const fileNames = fs.readdirSync(path.join(__dirname, `./bundles/${entry}`));\n  //   fileNames.forEach(file => {\n  //     const data = fs.readFileSync(\n  //       path.join(__dirname, `./bundles/${entry}/${file}`),\n  //       { encoding: 'utf-8' }\n  //     );\n  //     try {\n  //       bundles.push({ type: fileTypetoType(entry), data: JSON.parse(data) });\n  //       console.log(`     ⚪ ${file}   -   ✅`);\n  //     } catch(err) {\n  //       success = false;\n  //       console.log(`     ⚪ ${file}   -   ❌  - ${err}`);\n  //     }\n  //   });\n  // });\n\n  const components = manifest.artifacts;\n  components.forEach(file => {\n    try {\n      const data = fs.readFileSync(\n        path.join(filePath, `./${file.location}`),\n        { encoding: 'utf-8' }\n      );\n      bundles.push({ type: file.type, data: JSON.parse(data) });\n      console.log(`     ⚪ (${file.type})   -   ${file.location}   -   ✅`);\n    } catch (err) {\n      success = false;\n      console.log(`     ⚪  (${file.type})   -   ${file.location}   -   ❌  - ${err}`);\n    }\n  });\n\n  const metadata = {\n    name: packageJSON.name,\n    version: packageJSON.version,\n    description: packageJSON.description,\n    license: packageJSON.license,\n    repository: packageJSON.repository,\n    keywords: packageJSON.keywords,\n    author: packageJSON.author,\n    IAPDependencies: packageJSON.IAPDependencies,\n    gitlabId: parseInt(PID, 10),\n  };\n\n  if (success) {\n    console.log(`\\n\\nFinished successfully`);\n  } else {\n    console.log(`\\n\\nFinished with error(s)`);\n    process.exit(1);\n  }\n  const artifact = { metadata, manifest, bundles, readme };\n  fs.writeFileSync(\n    path.join(filePath, './artifact.json'),\n    JSON.stringify(artifact, null, 2)\n  );\n} catch (err) {\n  console.error(`Failed to generate artifact.json file: ${err}`);\n  process.exit(1);\n}"
                    ]
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "action": {
                      "type": "string",
                      "examples": [
                        "update"
                      ]
                    },
                    "file_path": {
                      "type": "string",
                      "examples": [
                        "scripts/generate.js"
                      ]
                    },
                    "content": {
                      "type": "string",
                      "examples": [
                        "const path = require('path');\nconst fs = require('fs');\n\nconst files = ['package.json', 'manifest.json', 'README.md'];\nlet success = true;\n\nconst PID = process.argv[2];\nconst gitlabURL = process.argv[3];\nconst gitlabBranch = process.argv[4];\nif (PID === null || PID == undefined || Number.isNaN(parseInt(PID, 10))) {\n  console.error('Please run this script with Gitlab Project ID (integer) as an argument');\n  process.exit(2);\n}\nconsole.log(`Generating artifact.json file w/ ${PID} as GitLab Project ID`);\n\n/*function fileTypetoType(fileType) {\n  const underscoreToDash = fileType.replace(/_/g, '-');\n  if (\n    fileType === 'ac_agenda_jobs' ||\n    fileType === 'mop_templates' ||\n    fileType === 'mop_analytic_templates' ||\n    fileType === 'templates' ||\n    fileType === 'workflows'\n  ) {\n    const singularize = underscoreToDash.substring(\n      0,\n      underscoreToDash.length - 1\n    );\n    return singularize;\n  }\n  if (fileType === 'catalog_store') {\n    return 'service-catalog';\n  }\n  return underscoreToDash;\n}*/\nconst filePath = __dirname.replace(\"/scripts\", \"\");\ntry {\n  const [packageJSON, manifest, readme] = files.map(entry => {\n    const result = fs.readFileSync(path.join(filePath, `./${entry}`), {\n      encoding: 'utf-8'\n    });\n\n    if (entry !== 'README.md') {\n        const parsedRes = JSON.parse(result);\n        if (entry === 'manifest.json' && Object.prototype.hasOwnProperty.call(parsedRes, 'version')) {\n          delete parsedRes.version;\n        }\n      return parsedRes;\n    } else {\n      return result.replace(/\\.\\//gm, `${gitlabURL}/-/raw/${gitlabBranch}/`);\n    }\n  });\n\n  // const result = fs.readdirSync(path.join(__dirname, './bundles'));\n  const bundles = [];\n  // result.forEach(entry => {\n  //   console.log(`   ➡ generating ${entry}(s)`);\n  //   const fileNames = fs.readdirSync(path.join(__dirname, `./bundles/${entry}`));\n  //   fileNames.forEach(file => {\n  //     const data = fs.readFileSync(\n  //       path.join(__dirname, `./bundles/${entry}/${file}`),\n  //       { encoding: 'utf-8' }\n  //     );\n  //     try {\n  //       bundles.push({ type: fileTypetoType(entry), data: JSON.parse(data) });\n  //       console.log(`     ⚪ ${file}   -   ✅`);\n  //     } catch(err) {\n  //       success = false;\n  //       console.log(`     ⚪ ${file}   -   ❌  - ${err}`);\n  //     }\n  //   });\n  // });\n\n  const components = manifest.artifacts;\n  components.forEach(file => {\n    try {\n      const data = fs.readFileSync(\n        path.join(filePath, `./${file.location}`),\n        { encoding: 'utf-8' }\n      );\n      bundles.push({ type: file.type, data: JSON.parse(data) });\n      console.log(`     ⚪ (${file.type})   -   ${file.location}   -   ✅`);\n    } catch (err) {\n      success = false;\n      console.log(`     ⚪  (${file.type})   -   ${file.location}   -   ❌  - ${err}`);\n    }\n  });\n\n  const metadata = {\n    name: packageJSON.name,\n    version: packageJSON.version,\n    description: packageJSON.description,\n    license: packageJSON.license,\n    repository: packageJSON.repository,\n    keywords: packageJSON.keywords,\n    author: packageJSON.author,\n    IAPDependencies: packageJSON.IAPDependencies,\n    gitlabId: parseInt(PID, 10),\n  };\n\n  if (success) {\n    console.log(`\\n\\nFinished successfully`);\n  } else {\n    console.log(`\\n\\nFinished with error(s)`);\n    process.exit(1);\n  }\n  const artifact = { metadata, manifest, bundles, readme };\n  fs.writeFileSync(\n    path.join(filePath, './artifact.json'),\n    JSON.stringify(artifact, null, 2)\n  );\n} catch (err) {\n  console.error(`Failed to generate artifact.json file: ${err}`);\n  process.exit(1);\n}"
                      ]
                    }
                  },
                  "required": []
                },
                "$id": "array",
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "newValue",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "editable": true,
                "$id": "newValue"
              }
            ],
            "steps": [
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 3,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "action",
                  "create"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "newValue",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "ƒ_map_1",
            "view": {
              "col": 3,
              "row": 6
            },
            "id": "ƒ_map_1",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 3,
          "row": 6
        },
        "created": "2025-02-06T18:32:40.839Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:40.839Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "623231be3230da01016b79de",
        "name": "convertFormDataPP",
        "description": "",
        "incoming": [
          {
            "$id": "formData",
            "type": "object",
            "properties": {
              "checkInPrebuilt": {
                "type": "object",
                "properties": {
                  "reDiscoverPrebuilt": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "addRepositoryDependencyFiles": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "makeProjectPrivateGithubOnly": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "forExistingProjects": {
                    "type": "object",
                    "properties": {
                      "mrType": {
                        "type": "string",
                        "examples": [
                          "patch"
                        ]
                      },
                      "commitMessage": {
                        "type": "string",
                        "examples": [
                          "init"
                        ]
                      },
                      "targetBranch": {
                        "type": "string",
                        "examples": [
                          "master"
                        ]
                      }
                    },
                    "required": []
                  },
                  "versionControlService": {
                    "type": "string",
                    "examples": [
                      "gitlab"
                    ]
                  },
                  "projectName": {
                    "type": "string",
                    "examples": [
                      "test"
                    ]
                  },
                  "groupPath": {
                    "type": "string",
                    "examples": [
                      "ACME/engineering"
                    ]
                  },
                  "prebuilt": {
                    "type": "string",
                    "examples": [
                      "@dsup/testprebuilt"
                    ]
                  }
                },
                "required": []
              }
            },
            "required": []
          },
          {
            "$id": "apps",
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "examples": [
                        "gitlab"
                      ]
                    },
                    "package_id": {
                      "type": "string",
                      "examples": [
                        "@itentialopensource/adapter-gitlab"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "examples": [
                        "Application"
                      ]
                    }
                  },
                  "required": []
                },
                "$id": "results"
              },
              "total": {
                "type": "integer",
                "examples": [
                  28
                ]
              }
            },
            "required": []
          }
        ],
        "outgoing": [
          {
            "$id": "ArtifactName",
            "type": "string",
            "examples": [
              "ArtifactName"
            ]
          },
          {
            "$id": "GroupPath",
            "type": "string",
            "examples": [
              "Repo Link"
            ]
          },
          {
            "$id": "RepositoryName",
            "type": "string",
            "examples": [
              "RepositoryName"
            ]
          },
          {
            "$id": "MRType",
            "type": "string",
            "examples": [
              "MR Type"
            ]
          },
          {
            "$id": "CommitMessage",
            "type": "string",
            "examples": [
              "Commit Message"
            ]
          },
          {
            "$id": "TargetBranch",
            "type": "string",
            "examples": [
              "TargetBranch"
            ]
          },
          {
            "$id": "rediscover",
            "type": "boolean",
            "examples": [
              true,
              false
            ]
          },
          {
            "$id": "Adapter",
            "type": "string",
            "examples": [
              "Adapter"
            ]
          },
          {
            "$id": "ServiceType",
            "type": "string"
          },
          {
            "$id": "ProjectPath",
            "type": "string"
          },
          {
            "$id": "privateRepo",
            "type": "boolean"
          },
          {
            "$id": "addRepositoryDependenyFiles",
            "type": "string",
            "examples": [
              "yes"
            ]
          }
        ],
        "steps": [
          {
            "id": 18,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formData",
              "ptr": "/checkInPrebuilt/reDiscoverPrebuilt"
            },
            "to": {
              "location": "outgoing",
              "name": "rediscover",
              "ptr": ""
            }
          },
          {
            "id": 19,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formData",
              "ptr": "/checkInPrebuilt/forExistingProjects/mrType"
            },
            "to": {
              "location": "outgoing",
              "name": "MRType",
              "ptr": ""
            }
          },
          {
            "id": 20,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formData",
              "ptr": "/checkInPrebuilt/forExistingProjects/commitMessage"
            },
            "to": {
              "location": "outgoing",
              "name": "CommitMessage",
              "ptr": ""
            }
          },
          {
            "id": 21,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formData",
              "ptr": "/checkInPrebuilt/forExistingProjects/targetBranch"
            },
            "to": {
              "location": "outgoing",
              "name": "TargetBranch",
              "ptr": ""
            }
          },
          {
            "id": 23,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formData",
              "ptr": "/checkInPrebuilt/projectName"
            },
            "to": {
              "location": "outgoing",
              "name": "RepositoryName",
              "ptr": ""
            }
          },
          {
            "id": 24,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formData",
              "ptr": "/checkInPrebuilt/groupPath"
            },
            "to": {
              "location": "outgoing",
              "name": "GroupPath",
              "ptr": ""
            }
          },
          {
            "id": 25,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formData",
              "ptr": "/checkInPrebuilt/prebuilt"
            },
            "to": {
              "location": "outgoing",
              "name": "ArtifactName",
              "ptr": ""
            }
          },
          {
            "id": 28,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formData",
              "ptr": "/checkInPrebuilt/versionControlService"
            },
            "to": {
              "location": "outgoing",
              "name": "Adapter",
              "ptr": ""
            }
          },
          {
            "id": 30,
            "type": "method",
            "library": "Object",
            "method": "optional chaining",
            "args": [
              null,
              "package_id"
            ],
            "view": {
              "row": 3,
              "col": 2
            }
          },
          {
            "id": 33,
            "type": "method",
            "library": "String",
            "method": "split",
            "args": [
              null,
              "/",
              null
            ],
            "view": {
              "row": 4,
              "col": 3
            }
          },
          {
            "id": 34,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 30,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 33,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 35,
            "type": "method",
            "library": "Array",
            "method": "getIndex",
            "args": [
              null,
              1
            ],
            "view": {
              "row": 4,
              "col": 4
            }
          },
          {
            "id": 36,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 33,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 35,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 38,
            "type": "method",
            "library": "String",
            "method": "split",
            "args": [
              null,
              "-",
              null
            ],
            "view": {
              "row": 4,
              "col": 5
            }
          },
          {
            "id": 39,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 35,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 38,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 40,
            "type": "method",
            "library": "Array",
            "method": "getIndex",
            "args": [
              null,
              1
            ],
            "view": {
              "row": 4,
              "col": 6
            }
          },
          {
            "id": 41,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 38,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 40,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 42,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 40,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "ServiceType",
              "ptr": ""
            }
          },
          {
            "id": 44,
            "type": "method",
            "library": "Array",
            "method": "find",
            "args": [
              null,
              "ƒ_query_2",
              null
            ],
            "view": {
              "row": 4,
              "col": 1
            }
          },
          {
            "id": 45,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "apps",
              "ptr": "/results"
            },
            "to": {
              "location": "method",
              "name": 44,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 46,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formData",
              "ptr": "/checkInPrebuilt/versionControlService"
            },
            "to": {
              "location": "method",
              "name": 44,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 47,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 44,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 30,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 48,
            "type": "method",
            "library": "Object",
            "method": "getProperty",
            "args": [
              null,
              "projectPath"
            ],
            "view": {
              "row": 1,
              "col": 1
            }
          },
          {
            "id": 49,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formData",
              "ptr": "/checkInPrebuilt"
            },
            "to": {
              "location": "method",
              "name": 48,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 50,
            "type": "method",
            "library": "Conditional",
            "method": "ternary",
            "args": [
              null,
              null,
              "none"
            ],
            "view": {
              "row": 1,
              "col": 2
            }
          },
          {
            "id": 51,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 48,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 50,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 52,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 48,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 50,
              "ptr": "/args/1/value"
            }
          },
          {
            "id": 53,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 50,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "ProjectPath",
              "ptr": ""
            }
          },
          {
            "id": 54,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formData",
              "ptr": "/checkInPrebuilt/makeProjectPrivateGithubOnly"
            },
            "to": {
              "location": "outgoing",
              "name": "privateRepo",
              "ptr": ""
            }
          },
          {
            "id": 55,
            "type": "method",
            "library": "Conditional",
            "method": "ternary",
            "args": [
              null,
              "yes",
              "no"
            ],
            "view": {
              "row": 5,
              "col": 4
            },
            "context": "#"
          },
          {
            "id": 56,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formData",
              "ptr": "/checkInPrebuilt/addRepositoryDependencyFiles"
            },
            "to": {
              "location": "method",
              "name": 55,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 57,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 55,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "addRepositoryDependenyFiles",
              "ptr": ""
            },
            "context": "#"
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "examples": [
                      "AdminEssentials"
                    ]
                  },
                  "package_id": {
                    "type": "string",
                    "examples": [
                      "@itential/app-admin_essentials"
                    ]
                  },
                  "version": {
                    "type": "string",
                    "examples": [
                      "2%2E25%2E42-2021%2E1%2E73%2E0"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "examples": [
                      "Application"
                    ]
                  },
                  "description": {
                    "type": "string",
                    "examples": [
                      "Itential Automation Platform's administration suite%2E"
                    ]
                  },
                  "state": {
                    "type": "string",
                    "examples": [
                      "RUNNING"
                    ]
                  },
                  "connection": {
                    "type": [
                      "null",
                      "object"
                    ]
                  },
                  "uptime": {
                    "type": "number",
                    "examples": [
                      1739.9893128
                    ]
                  },
                  "memoryUsage": {
                    "type": "object",
                    "properties": {
                      "rss": {
                        "type": "integer",
                        "examples": [
                          74420224
                        ]
                      },
                      "heapTotal": {
                        "type": "integer",
                        "examples": [
                          33263616
                        ]
                      },
                      "heapUsed": {
                        "type": "integer",
                        "examples": [
                          30971264
                        ]
                      },
                      "external": {
                        "type": "integer",
                        "examples": [
                          38405238
                        ]
                      },
                      "arrayBuffers": {
                        "type": "integer",
                        "examples": [
                          36810009
                        ]
                      }
                    },
                    "required": []
                  },
                  "cpuUsage": {
                    "type": "object",
                    "properties": {
                      "user": {
                        "type": "integer",
                        "examples": [
                          2594559
                        ]
                      },
                      "system": {
                        "type": "integer",
                        "examples": [
                          1433366
                        ]
                      }
                    },
                    "required": []
                  },
                  "pid": {
                    "type": [
                      "integer",
                      "number"
                    ],
                    "examples": [
                      160
                    ]
                  },
                  "logger": {
                    "type": "object",
                    "properties": {
                      "console": {
                        "type": "string",
                        "examples": [
                          "info"
                        ]
                      },
                      "file": {
                        "type": "string",
                        "examples": [
                          "info"
                        ]
                      },
                      "syslog": {
                        "type": "string",
                        "examples": [
                          "warning"
                        ]
                      }
                    },
                    "required": []
                  },
                  "routePrefix": {
                    "type": "string",
                    "examples": [
                      "admin"
                    ]
                  },
                  "prevUptime": {
                    "type": "number",
                    "examples": [
                      198.8608828
                    ]
                  }
                },
                "required": [],
                "$id": "element"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "examples": [
                        "AdminEssentials"
                      ]
                    },
                    "package_id": {
                      "type": "string",
                      "examples": [
                        "@itential/app-admin_essentials"
                      ]
                    },
                    "version": {
                      "type": "string",
                      "examples": [
                        "2%2E25%2E42-2021%2E1%2E73%2E0"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "examples": [
                        "Application"
                      ]
                    },
                    "description": {
                      "type": "string",
                      "examples": [
                        "Itential Automation Platform's administration suite%2E"
                      ]
                    },
                    "state": {
                      "type": "string",
                      "examples": [
                        "RUNNING"
                      ]
                    },
                    "connection": {
                      "type": [
                        "null",
                        "object"
                      ]
                    },
                    "uptime": {
                      "type": "number",
                      "examples": [
                        1739.9893128
                      ]
                    },
                    "memoryUsage": {
                      "type": "object",
                      "properties": {
                        "rss": {
                          "type": "integer",
                          "examples": [
                            74420224
                          ]
                        },
                        "heapTotal": {
                          "type": "integer",
                          "examples": [
                            33263616
                          ]
                        },
                        "heapUsed": {
                          "type": "integer",
                          "examples": [
                            30971264
                          ]
                        },
                        "external": {
                          "type": "integer",
                          "examples": [
                            38405238
                          ]
                        },
                        "arrayBuffers": {
                          "type": "integer",
                          "examples": [
                            36810009
                          ]
                        }
                      },
                      "required": []
                    },
                    "cpuUsage": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "integer",
                          "examples": [
                            2594559
                          ]
                        },
                        "system": {
                          "type": "integer",
                          "examples": [
                            1433366
                          ]
                        }
                      },
                      "required": []
                    },
                    "pid": {
                      "type": [
                        "integer",
                        "number"
                      ],
                      "examples": [
                        160
                      ]
                    },
                    "logger": {
                      "type": "object",
                      "properties": {
                        "console": {
                          "type": "string",
                          "examples": [
                            "info"
                          ]
                        },
                        "file": {
                          "type": "string",
                          "examples": [
                            "info"
                          ]
                        },
                        "syslog": {
                          "type": "string",
                          "examples": [
                            "warning"
                          ]
                        }
                      },
                      "required": []
                    },
                    "routePrefix": {
                      "type": "string",
                      "examples": [
                        "admin"
                      ]
                    },
                    "prevUptime": {
                      "type": "number",
                      "examples": [
                        198.8608828
                      ]
                    }
                  },
                  "required": []
                },
                "$id": "array",
                "optional": true
              },
              {
                "$id": "constantValue1",
                "type": "string",
                "isConstValue": true
              }
            ],
            "outgoing": [
              {
                "title": "return",
                "type": "boolean",
                "$id": "return"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 1
                }
              },
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "element",
                  "ptr": "/id"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "constantValue1",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "return",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "ƒ_query_1",
            "view": {
              "col": 7,
              "row": 5
            },
            "id": "ƒ_query_1",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "examples": [
                      "gitlab"
                    ]
                  },
                  "package_id": {
                    "type": "string",
                    "examples": [
                      "@itentialopensource/adapter-gitlab"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "examples": [
                      "Application"
                    ]
                  }
                },
                "required": [],
                "$id": "element"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "examples": [
                        "gitlab"
                      ]
                    },
                    "package_id": {
                      "type": "string",
                      "examples": [
                        "@itentialopensource/adapter-gitlab"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "examples": [
                        "Application"
                      ]
                    }
                  },
                  "required": []
                },
                "$id": "array",
                "optional": true
              },
              {
                "$id": "constantValue1",
                "type": "string",
                "isConstValue": true
              }
            ],
            "outgoing": [
              {
                "title": "return",
                "type": "boolean",
                "$id": "return"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "element",
                  "ptr": "/id"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "return",
                  "ptr": ""
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "constantValue1",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/1/value"
                }
              }
            ],
            "functions": [],
            "name": "ƒ_query_2",
            "view": {
              "col": 2,
              "row": 4
            },
            "id": "ƒ_query_2",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 6,
          "row": 6
        },
        "created": "2025-02-06T18:32:40.854Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:40.854Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "6075d09d8c016f0098c7284e",
        "name": "getPackageJsonGitlab",
        "description": "",
        "incoming": [
          {
            "$id": "repoId",
            "type": "string",
            "examples": [
              "fds"
            ]
          },
          {
            "$id": "targetBranch",
            "type": "string",
            "examples": [
              "fdsf"
            ]
          }
        ],
        "outgoing": [
          {
            "$id": "getPackageJsonURL",
            "type": "string",
            "examples": [
              "FDS"
            ]
          }
        ],
        "steps": [
          {
            "id": 1,
            "type": "declaration",
            "library": "String",
            "method": "new String",
            "args": [
              "https://gitlab.com/api/v4/projects/"
            ],
            "view": {
              "row": 1,
              "col": 1
            }
          },
          {
            "id": 4,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "repoId",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 2,
              "ptr": "/args/1/value"
            }
          },
          {
            "id": 3,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 2,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 2,
            "type": "method",
            "library": "String",
            "method": "concat",
            "args": [
              null,
              null,
              "/repository/files/package.json/raw?ref=",
              null
            ],
            "view": {
              "row": 1,
              "col": 2
            }
          },
          {
            "id": 5,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 2,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "getPackageJsonURL",
              "ptr": ""
            }
          },
          {
            "id": 6,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "targetBranch",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 2,
              "ptr": "/args/3/value"
            }
          }
        ],
        "functions": [],
        "comments": [],
        "view": {
          "col": 3,
          "row": 5
        },
        "created": "2025-02-06T18:32:40.868Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:40.868Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "64356046770ce80183cec91d",
        "name": "getRepoURLGitlab",
        "description": "",
        "incoming": [
          {
            "$id": "repoSearchName",
            "type": "string",
            "examples": [
              "fdsafdsa"
            ]
          },
          {
            "$id": "incomingRepo",
            "type": "object",
            "properties": {
              "icode": {
                "type": "string",
                "examples": [
                  "AD%2E200"
                ]
              },
              "response": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "examples": [
                        12213851
                      ]
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "Device Pre-Post Check Execution"
                      ]
                    },
                    "name_with_namespace": {
                      "type": "string",
                      "examples": [
                        "Itential Open Source / pre-built automations / Device Pre-Post Check Execution"
                      ]
                    },
                    "path": {
                      "type": "string",
                      "examples": [
                        "device-pre-post-check-execution"
                      ]
                    },
                    "path_with_namespace": {
                      "type": "string",
                      "examples": [
                        "itentialopensource/pre-built-automations/device-pre-post-check-execution"
                      ]
                    },
                    "default_branch": {
                      "type": "string",
                      "examples": [
                        "master"
                      ]
                    },
                    "ssh_url_to_repo": {
                      "type": "string",
                      "examples": [
                        "git@gitlab%2Ecom:itentialopensource/pre-built-automations/device-pre-post-check-execution%2Egit"
                      ]
                    },
                    "http_url_to_repo": {
                      "type": "string",
                      "examples": [
                        "https://gitlab%2Ecom/itentialopensource/pre-built-automations/device-pre-post-check-execution%2Egit"
                      ]
                    }
                  },
                  "required": []
                }
              }
            },
            "required": []
          }
        ],
        "outgoing": [
          {
            "$id": "repoURL",
            "type": "string",
            "examples": [
              "fdsa"
            ]
          },
          {
            "$id": "repoId",
            "type": "integer",
            "examples": [
              123545
            ]
          },
          {
            "$id": "httpURL",
            "type": "string",
            "examples": [
              "htthpURL"
            ]
          }
        ],
        "steps": [
          {
            "id": 2,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "repoSearchName",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 1,
            "type": "method",
            "library": "Array",
            "method": "find",
            "args": [
              null,
              "ƒ_query_1",
              null
            ],
            "view": {
              "row": 1,
              "col": 1
            }
          },
          {
            "id": 5,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 4,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 4,
            "type": "method",
            "library": "Object",
            "method": "getProperty",
            "args": [
              null,
              "id"
            ],
            "view": {
              "row": 1,
              "col": 2
            }
          },
          {
            "id": 10,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 4,
              "ptr": "/return"
            },
            "to": {
              "location": "declaration",
              "name": 9,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 13,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 4,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "repoId",
              "ptr": ""
            }
          },
          {
            "id": 9,
            "type": "declaration",
            "library": "String",
            "method": "new String",
            "args": [
              null
            ],
            "view": {
              "row": 2,
              "col": 2
            }
          },
          {
            "id": 11,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 9,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 8,
              "ptr": "/args/1/value"
            }
          },
          {
            "id": 8,
            "type": "method",
            "library": "String",
            "method": "concat",
            "args": [
              "https://gitlab.com/api/v4/projects/",
              null,
              "/repository/branches"
            ],
            "view": {
              "row": 1,
              "col": 3
            }
          },
          {
            "id": 12,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 8,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "repoURL",
              "ptr": ""
            }
          },
          {
            "id": 15,
            "type": "method",
            "library": "Object",
            "method": "getProperty",
            "args": [
              null,
              "http_url_to_repo"
            ],
            "view": {
              "row": 3,
              "col": 2
            }
          },
          {
            "id": 16,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 15,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 17,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 15,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "httpURL",
              "ptr": ""
            }
          },
          {
            "id": 18,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "incomingRepo",
              "ptr": "/response"
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/0/value"
            }
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "examples": [
                      21320079
                    ]
                  },
                  "description": {
                    "type": "null"
                  },
                  "name": {
                    "type": "string",
                    "examples": [
                      "deleteThisRepository"
                    ]
                  },
                  "name_with_namespace": {
                    "type": "string",
                    "examples": [
                      "Itential Open Source / pre-built automations / staging / deleteThisRepository"
                    ]
                  },
                  "path": {
                    "type": "string",
                    "examples": [
                      "deletethisrepository"
                    ]
                  },
                  "path_with_namespace": {
                    "type": "string",
                    "examples": [
                      "itentialopensource/pre-built-automations/staging/deletethisrepository"
                    ]
                  },
                  "created_at": {
                    "type": "string",
                    "examples": [
                      "2020-09-23T17:11:16.313Z"
                    ],
                    "format": "date-time"
                  },
                  "default_branch": {
                    "type": "string",
                    "examples": [
                      "master"
                    ]
                  },
                  "tag_list": {
                    "type": "array"
                  },
                  "ssh_url_to_repo": {
                    "type": "string",
                    "examples": [
                      "git@gitlab.com:itentialopensource/pre-built-automations/staging/deletethisrepository.git"
                    ]
                  },
                  "http_url_to_repo": {
                    "type": "string",
                    "examples": [
                      "https://gitlab.com/itentialopensource/pre-built-automations/staging/deletethisrepository.git"
                    ]
                  },
                  "web_url": {
                    "type": "string",
                    "examples": [
                      "https://gitlab.com/itentialopensource/pre-built-automations/staging/deletethisrepository"
                    ]
                  },
                  "readme_url": {
                    "type": "string",
                    "examples": [
                      "https://gitlab.com/itentialopensource/pre-built-automations/staging/deletethisrepository/-/blob/master/README.md"
                    ]
                  },
                  "avatar_url": {
                    "type": "null"
                  },
                  "forks_count": {
                    "type": "integer",
                    "examples": [
                      0
                    ]
                  },
                  "star_count": {
                    "type": "integer",
                    "examples": [
                      0
                    ]
                  },
                  "last_activity_at": {
                    "type": "string",
                    "examples": [
                      "2020-09-23T17:11:16.313Z"
                    ],
                    "format": "date-time"
                  },
                  "namespace": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "examples": [
                          6535607
                        ]
                      },
                      "name": {
                        "type": "string",
                        "examples": [
                          "staging"
                        ]
                      },
                      "path": {
                        "type": "string",
                        "examples": [
                          "staging"
                        ]
                      },
                      "kind": {
                        "type": "string",
                        "examples": [
                          "group"
                        ]
                      },
                      "full_path": {
                        "type": "string",
                        "examples": [
                          "itentialopensource/pre-built-automations/staging"
                        ]
                      },
                      "parent_id": {
                        "type": "integer",
                        "examples": [
                          4836995
                        ]
                      },
                      "avatar_url": {
                        "type": "string",
                        "examples": [
                          "https://gitlab.com/uploads/-/system/group/avatar/6535607/lab.png"
                        ]
                      },
                      "web_url": {
                        "type": "string",
                        "examples": [
                          "https://gitlab.com/groups/itentialopensource/pre-built-automations/staging"
                        ]
                      }
                    },
                    "required": []
                  }
                },
                "required": [],
                "$id": "element"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "examples": [
                        21320079
                      ]
                    },
                    "description": {
                      "type": "null"
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "deleteThisRepository"
                      ]
                    },
                    "name_with_namespace": {
                      "type": "string",
                      "examples": [
                        "Itential Open Source / pre-built automations / staging / deleteThisRepository"
                      ]
                    },
                    "path": {
                      "type": "string",
                      "examples": [
                        "deletethisrepository"
                      ]
                    },
                    "path_with_namespace": {
                      "type": "string",
                      "examples": [
                        "itentialopensource/pre-built-automations/staging/deletethisrepository"
                      ]
                    },
                    "created_at": {
                      "type": "string",
                      "examples": [
                        "2020-09-23T17:11:16.313Z"
                      ],
                      "format": "date-time"
                    },
                    "default_branch": {
                      "type": "string",
                      "examples": [
                        "master"
                      ]
                    },
                    "tag_list": {
                      "type": "array"
                    },
                    "ssh_url_to_repo": {
                      "type": "string",
                      "examples": [
                        "git@gitlab.com:itentialopensource/pre-built-automations/staging/deletethisrepository.git"
                      ]
                    },
                    "http_url_to_repo": {
                      "type": "string",
                      "examples": [
                        "https://gitlab.com/itentialopensource/pre-built-automations/staging/deletethisrepository.git"
                      ]
                    },
                    "web_url": {
                      "type": "string",
                      "examples": [
                        "https://gitlab.com/itentialopensource/pre-built-automations/staging/deletethisrepository"
                      ]
                    },
                    "readme_url": {
                      "type": "string",
                      "examples": [
                        "https://gitlab.com/itentialopensource/pre-built-automations/staging/deletethisrepository/-/blob/master/README.md"
                      ]
                    },
                    "avatar_url": {
                      "type": "null"
                    },
                    "forks_count": {
                      "type": "integer",
                      "examples": [
                        0
                      ]
                    },
                    "star_count": {
                      "type": "integer",
                      "examples": [
                        0
                      ]
                    },
                    "last_activity_at": {
                      "type": "string",
                      "examples": [
                        "2020-09-23T17:11:16.313Z"
                      ],
                      "format": "date-time"
                    },
                    "namespace": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "examples": [
                            6535607
                          ]
                        },
                        "name": {
                          "type": "string",
                          "examples": [
                            "staging"
                          ]
                        },
                        "path": {
                          "type": "string",
                          "examples": [
                            "staging"
                          ]
                        },
                        "kind": {
                          "type": "string",
                          "examples": [
                            "group"
                          ]
                        },
                        "full_path": {
                          "type": "string",
                          "examples": [
                            "itentialopensource/pre-built-automations/staging"
                          ]
                        },
                        "parent_id": {
                          "type": "integer",
                          "examples": [
                            4836995
                          ]
                        },
                        "avatar_url": {
                          "type": "string",
                          "examples": [
                            "https://gitlab.com/uploads/-/system/group/avatar/6535607/lab.png"
                          ]
                        },
                        "web_url": {
                          "type": "string",
                          "examples": [
                            "https://gitlab.com/groups/itentialopensource/pre-built-automations/staging"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "required": []
                },
                "$id": "array",
                "optional": true
              },
              {
                "$id": "constantValue1",
                "type": "string",
                "isConstValue": true
              }
            ],
            "outgoing": [
              {
                "title": "return",
                "type": "boolean",
                "$id": "return"
              }
            ],
            "steps": [
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "element",
                  "ptr": "/name"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "constantValue1",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 1,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "return",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "ƒ_query_1",
            "view": {
              "col": 3,
              "row": 5
            },
            "id": "ƒ_query_1",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "examples": [
                      21223957
                    ]
                  },
                  "description": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string",
                    "examples": [
                      "test"
                    ]
                  },
                  "name_with_namespace": {
                    "type": "string",
                    "examples": [
                      "itential / Delivery / DSUP / test"
                    ]
                  },
                  "path": {
                    "type": "string",
                    "examples": [
                      "test"
                    ]
                  },
                  "path_with_namespace": {
                    "type": "string",
                    "examples": [
                      "itential/delivery/dsup/test"
                    ]
                  },
                  "created_at": {
                    "type": "string",
                    "examples": [
                      "2020-09-18T19:27:23.454Z"
                    ],
                    "format": "date-time"
                  },
                  "default_branch": {
                    "type": "string",
                    "examples": [
                      "master"
                    ]
                  },
                  "tag_list": {
                    "type": "array"
                  },
                  "ssh_url_to_repo": {
                    "type": "string",
                    "examples": [
                      "git@gitlab.com:itential/delivery/dsup/test.git"
                    ]
                  },
                  "http_url_to_repo": {
                    "type": "string",
                    "examples": [
                      "https://gitlab.com/itential/delivery/dsup/test.git"
                    ]
                  },
                  "web_url": {
                    "type": "string",
                    "examples": [
                      "https://gitlab.com/itential/delivery/dsup/test"
                    ]
                  },
                  "readme_url": {
                    "type": "string",
                    "examples": [
                      "https://gitlab.com/itential/delivery/dsup/test/-/blob/master/README.md"
                    ]
                  },
                  "avatar_url": {
                    "type": "null"
                  },
                  "forks_count": {
                    "type": "integer",
                    "examples": [
                      0
                    ]
                  },
                  "star_count": {
                    "type": "integer",
                    "examples": [
                      0
                    ]
                  },
                  "last_activity_at": {
                    "type": "string",
                    "examples": [
                      "2020-09-18T19:27:23.454Z"
                    ],
                    "format": "date-time"
                  },
                  "namespace": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "examples": [
                          9416856
                        ]
                      },
                      "name": {
                        "type": "string",
                        "examples": [
                          "DSUP"
                        ]
                      },
                      "path": {
                        "type": "string",
                        "examples": [
                          "dsup"
                        ]
                      },
                      "kind": {
                        "type": "string",
                        "examples": [
                          "group"
                        ]
                      },
                      "full_path": {
                        "type": "string",
                        "examples": [
                          "itential/delivery/dsup"
                        ]
                      },
                      "parent_id": {
                        "type": "integer",
                        "examples": [
                          4261797
                        ]
                      },
                      "avatar_url": {
                        "type": "null"
                      },
                      "web_url": {
                        "type": "string",
                        "examples": [
                          "https://gitlab.com/groups/itential/delivery/dsup"
                        ]
                      }
                    },
                    "required": []
                  },
                  "_links": {
                    "type": "object",
                    "properties": {
                      "self": {
                        "type": "string",
                        "examples": [
                          "https://gitlab.com/api/v4/projects/21223957"
                        ]
                      },
                      "issues": {
                        "type": "string",
                        "examples": [
                          "https://gitlab.com/api/v4/projects/21223957/issues"
                        ]
                      },
                      "merge_requests": {
                        "type": "string",
                        "examples": [
                          "https://gitlab.com/api/v4/projects/21223957/merge_requests"
                        ]
                      },
                      "repo_branches": {
                        "type": "string",
                        "examples": [
                          "https://gitlab.com/api/v4/projects/21223957/repository/branches"
                        ]
                      },
                      "labels": {
                        "type": "string",
                        "examples": [
                          "https://gitlab.com/api/v4/projects/21223957/labels"
                        ]
                      },
                      "events": {
                        "type": "string",
                        "examples": [
                          "https://gitlab.com/api/v4/projects/21223957/events"
                        ]
                      },
                      "members": {
                        "type": "string",
                        "examples": [
                          "https://gitlab.com/api/v4/projects/21223957/members"
                        ]
                      }
                    },
                    "required": []
                  },
                  "packages_enabled": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "empty_repo": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "archived": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "visibility": {
                    "type": "string",
                    "examples": [
                      "private"
                    ]
                  },
                  "resolve_outdated_diff_discussions": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "container_registry_enabled": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "container_expiration_policy": {
                    "type": "object",
                    "properties": {
                      "cadence": {
                        "type": "string",
                        "examples": [
                          "1d"
                        ]
                      },
                      "enabled": {
                        "type": "boolean",
                        "examples": [
                          true,
                          false
                        ]
                      },
                      "keep_n": {
                        "type": "integer",
                        "examples": [
                          10
                        ]
                      },
                      "older_than": {
                        "type": "string",
                        "examples": [
                          "90d"
                        ]
                      },
                      "name_regex": {
                        "type": "null"
                      },
                      "name_regex_keep": {
                        "type": "null"
                      },
                      "next_run_at": {
                        "type": "string",
                        "examples": [
                          "2020-09-21T20:40:10.356Z"
                        ],
                        "format": "date-time"
                      }
                    },
                    "required": []
                  },
                  "issues_enabled": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "merge_requests_enabled": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "wiki_enabled": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "jobs_enabled": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "snippets_enabled": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "service_desk_enabled": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "service_desk_address": {
                    "type": "string",
                    "examples": [
                      "incoming+itential-delivery-dsup-test-21223957-issue-@incoming.gitlab.com"
                    ],
                    "format": "email"
                  },
                  "can_create_merge_request_in": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "issues_access_level": {
                    "type": "string",
                    "examples": [
                      "enabled"
                    ]
                  },
                  "repository_access_level": {
                    "type": "string",
                    "examples": [
                      "enabled"
                    ]
                  },
                  "merge_requests_access_level": {
                    "type": "string",
                    "examples": [
                      "enabled"
                    ]
                  },
                  "forking_access_level": {
                    "type": "string",
                    "examples": [
                      "enabled"
                    ]
                  },
                  "wiki_access_level": {
                    "type": "string",
                    "examples": [
                      "enabled"
                    ]
                  },
                  "builds_access_level": {
                    "type": "string",
                    "examples": [
                      "enabled"
                    ]
                  },
                  "snippets_access_level": {
                    "type": "string",
                    "examples": [
                      "enabled"
                    ]
                  },
                  "pages_access_level": {
                    "type": "string",
                    "examples": [
                      "private"
                    ]
                  },
                  "emails_disabled": {
                    "type": "null"
                  },
                  "shared_runners_enabled": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "lfs_enabled": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "creator_id": {
                    "type": "integer",
                    "examples": [
                      5908256
                    ]
                  },
                  "import_status": {
                    "type": "string",
                    "examples": [
                      "none"
                    ]
                  },
                  "open_issues_count": {
                    "type": "integer",
                    "examples": [
                      0
                    ]
                  },
                  "ci_default_git_depth": {
                    "type": "integer",
                    "examples": [
                      50
                    ]
                  },
                  "public_jobs": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "build_timeout": {
                    "type": "integer",
                    "examples": [
                      3600
                    ]
                  },
                  "auto_cancel_pending_pipelines": {
                    "type": "string",
                    "examples": [
                      "enabled"
                    ]
                  },
                  "build_coverage_regex": {
                    "type": "null"
                  },
                  "ci_config_path": {
                    "type": "string"
                  },
                  "shared_with_groups": {
                    "type": "array"
                  },
                  "only_allow_merge_if_pipeline_succeeds": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "allow_merge_on_skipped_pipeline": {
                    "type": "null"
                  },
                  "request_access_enabled": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "only_allow_merge_if_all_discussions_are_resolved": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "remove_source_branch_after_merge": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "printing_merge_request_link_enabled": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "merge_method": {
                    "type": "string",
                    "examples": [
                      "merge"
                    ]
                  },
                  "suggestion_commit_message": {
                    "type": "null"
                  },
                  "auto_devops_enabled": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "auto_devops_deploy_strategy": {
                    "type": "string",
                    "examples": [
                      "continuous"
                    ]
                  },
                  "autoclose_referenced_issues": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "approvals_before_merge": {
                    "type": "integer",
                    "examples": [
                      0
                    ]
                  },
                  "mirror": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "external_authorization_classification_label": {
                    "type": "string"
                  },
                  "marked_for_deletion_at": {
                    "type": "null"
                  },
                  "marked_for_deletion_on": {
                    "type": "null"
                  },
                  "compliance_frameworks": {
                    "type": "array"
                  }
                },
                "required": [],
                "$id": "element"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "examples": [
                        21223957
                      ]
                    },
                    "description": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "test"
                      ]
                    },
                    "name_with_namespace": {
                      "type": "string",
                      "examples": [
                        "itential / Delivery / DSUP / test"
                      ]
                    },
                    "path": {
                      "type": "string",
                      "examples": [
                        "test"
                      ]
                    },
                    "path_with_namespace": {
                      "type": "string",
                      "examples": [
                        "itential/delivery/dsup/test"
                      ]
                    },
                    "created_at": {
                      "type": "string",
                      "examples": [
                        "2020-09-18T19:27:23.454Z"
                      ],
                      "format": "date-time"
                    },
                    "default_branch": {
                      "type": "string",
                      "examples": [
                        "master"
                      ]
                    },
                    "tag_list": {
                      "type": "array"
                    },
                    "ssh_url_to_repo": {
                      "type": "string",
                      "examples": [
                        "git@gitlab.com:itential/delivery/dsup/test.git"
                      ]
                    },
                    "http_url_to_repo": {
                      "type": "string",
                      "examples": [
                        "https://gitlab.com/itential/delivery/dsup/test.git"
                      ]
                    },
                    "web_url": {
                      "type": "string",
                      "examples": [
                        "https://gitlab.com/itential/delivery/dsup/test"
                      ]
                    },
                    "readme_url": {
                      "type": "string",
                      "examples": [
                        "https://gitlab.com/itential/delivery/dsup/test/-/blob/master/README.md"
                      ]
                    },
                    "avatar_url": {
                      "type": "null"
                    },
                    "forks_count": {
                      "type": "integer",
                      "examples": [
                        0
                      ]
                    },
                    "star_count": {
                      "type": "integer",
                      "examples": [
                        0
                      ]
                    },
                    "last_activity_at": {
                      "type": "string",
                      "examples": [
                        "2020-09-18T19:27:23.454Z"
                      ],
                      "format": "date-time"
                    },
                    "namespace": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "examples": [
                            9416856
                          ]
                        },
                        "name": {
                          "type": "string",
                          "examples": [
                            "DSUP"
                          ]
                        },
                        "path": {
                          "type": "string",
                          "examples": [
                            "dsup"
                          ]
                        },
                        "kind": {
                          "type": "string",
                          "examples": [
                            "group"
                          ]
                        },
                        "full_path": {
                          "type": "string",
                          "examples": [
                            "itential/delivery/dsup"
                          ]
                        },
                        "parent_id": {
                          "type": "integer",
                          "examples": [
                            4261797
                          ]
                        },
                        "avatar_url": {
                          "type": "null"
                        },
                        "web_url": {
                          "type": "string",
                          "examples": [
                            "https://gitlab.com/groups/itential/delivery/dsup"
                          ]
                        }
                      },
                      "required": []
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "self": {
                          "type": "string",
                          "examples": [
                            "https://gitlab.com/api/v4/projects/21223957"
                          ]
                        },
                        "issues": {
                          "type": "string",
                          "examples": [
                            "https://gitlab.com/api/v4/projects/21223957/issues"
                          ]
                        },
                        "merge_requests": {
                          "type": "string",
                          "examples": [
                            "https://gitlab.com/api/v4/projects/21223957/merge_requests"
                          ]
                        },
                        "repo_branches": {
                          "type": "string",
                          "examples": [
                            "https://gitlab.com/api/v4/projects/21223957/repository/branches"
                          ]
                        },
                        "labels": {
                          "type": "string",
                          "examples": [
                            "https://gitlab.com/api/v4/projects/21223957/labels"
                          ]
                        },
                        "events": {
                          "type": "string",
                          "examples": [
                            "https://gitlab.com/api/v4/projects/21223957/events"
                          ]
                        },
                        "members": {
                          "type": "string",
                          "examples": [
                            "https://gitlab.com/api/v4/projects/21223957/members"
                          ]
                        }
                      },
                      "required": []
                    },
                    "packages_enabled": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "empty_repo": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "archived": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "visibility": {
                      "type": "string",
                      "examples": [
                        "private"
                      ]
                    },
                    "resolve_outdated_diff_discussions": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "container_registry_enabled": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "container_expiration_policy": {
                      "type": "object",
                      "properties": {
                        "cadence": {
                          "type": "string",
                          "examples": [
                            "1d"
                          ]
                        },
                        "enabled": {
                          "type": "boolean",
                          "examples": [
                            true,
                            false
                          ]
                        },
                        "keep_n": {
                          "type": "integer",
                          "examples": [
                            10
                          ]
                        },
                        "older_than": {
                          "type": "string",
                          "examples": [
                            "90d"
                          ]
                        },
                        "name_regex": {
                          "type": "null"
                        },
                        "name_regex_keep": {
                          "type": "null"
                        },
                        "next_run_at": {
                          "type": "string",
                          "examples": [
                            "2020-09-21T20:40:10.356Z"
                          ],
                          "format": "date-time"
                        }
                      },
                      "required": []
                    },
                    "issues_enabled": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "merge_requests_enabled": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "wiki_enabled": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "jobs_enabled": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "snippets_enabled": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "service_desk_enabled": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "service_desk_address": {
                      "type": "string",
                      "examples": [
                        "incoming+itential-delivery-dsup-test-21223957-issue-@incoming.gitlab.com"
                      ],
                      "format": "email"
                    },
                    "can_create_merge_request_in": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "issues_access_level": {
                      "type": "string",
                      "examples": [
                        "enabled"
                      ]
                    },
                    "repository_access_level": {
                      "type": "string",
                      "examples": [
                        "enabled"
                      ]
                    },
                    "merge_requests_access_level": {
                      "type": "string",
                      "examples": [
                        "enabled"
                      ]
                    },
                    "forking_access_level": {
                      "type": "string",
                      "examples": [
                        "enabled"
                      ]
                    },
                    "wiki_access_level": {
                      "type": "string",
                      "examples": [
                        "enabled"
                      ]
                    },
                    "builds_access_level": {
                      "type": "string",
                      "examples": [
                        "enabled"
                      ]
                    },
                    "snippets_access_level": {
                      "type": "string",
                      "examples": [
                        "enabled"
                      ]
                    },
                    "pages_access_level": {
                      "type": "string",
                      "examples": [
                        "private"
                      ]
                    },
                    "emails_disabled": {
                      "type": "null"
                    },
                    "shared_runners_enabled": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "lfs_enabled": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "creator_id": {
                      "type": "integer",
                      "examples": [
                        5908256
                      ]
                    },
                    "import_status": {
                      "type": "string",
                      "examples": [
                        "none"
                      ]
                    },
                    "open_issues_count": {
                      "type": "integer",
                      "examples": [
                        0
                      ]
                    },
                    "ci_default_git_depth": {
                      "type": "integer",
                      "examples": [
                        50
                      ]
                    },
                    "public_jobs": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "build_timeout": {
                      "type": "integer",
                      "examples": [
                        3600
                      ]
                    },
                    "auto_cancel_pending_pipelines": {
                      "type": "string",
                      "examples": [
                        "enabled"
                      ]
                    },
                    "build_coverage_regex": {
                      "type": "null"
                    },
                    "ci_config_path": {
                      "type": "string"
                    },
                    "shared_with_groups": {
                      "type": "array"
                    },
                    "only_allow_merge_if_pipeline_succeeds": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "allow_merge_on_skipped_pipeline": {
                      "type": "null"
                    },
                    "request_access_enabled": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "only_allow_merge_if_all_discussions_are_resolved": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "remove_source_branch_after_merge": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "printing_merge_request_link_enabled": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "merge_method": {
                      "type": "string",
                      "examples": [
                        "merge"
                      ]
                    },
                    "suggestion_commit_message": {
                      "type": "null"
                    },
                    "auto_devops_enabled": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "auto_devops_deploy_strategy": {
                      "type": "string",
                      "examples": [
                        "continuous"
                      ]
                    },
                    "autoclose_referenced_issues": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "approvals_before_merge": {
                      "type": "integer",
                      "examples": [
                        0
                      ]
                    },
                    "mirror": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "external_authorization_classification_label": {
                      "type": "string"
                    },
                    "marked_for_deletion_at": {
                      "type": "null"
                    },
                    "marked_for_deletion_on": {
                      "type": "null"
                    },
                    "compliance_frameworks": {
                      "type": "array"
                    }
                  },
                  "required": []
                },
                "optional": true
              },
              {
                "$id": "constantValue1",
                "type": "string",
                "isConstValue": true
              }
            ],
            "outgoing": [
              {
                "title": "return",
                "type": "boolean",
                "$id": "return"
              }
            ],
            "steps": [
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "element",
                  "ptr": "/name"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "constantValue1",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 1,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "return",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "ƒ_query_2",
            "view": {
              "col": 3,
              "row": 5
            },
            "id": "ƒ_query_2",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 3,
          "row": 5
        },
        "created": "2025-02-06T18:32:40.875Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:40.875Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "6075cfe68c016f0098c7284d",
        "name": "getUriGitlab",
        "description": "",
        "incoming": [
          {
            "$id": "repoId",
            "type": "integer",
            "examples": [
              123
            ]
          }
        ],
        "outgoing": [
          {
            "$id": "gitlabCommitURI",
            "type": "string",
            "examples": [
              "fds"
            ]
          }
        ],
        "steps": [
          {
            "id": 1,
            "type": "declaration",
            "library": "String",
            "method": "new String",
            "args": [
              "https://gitlab.com/api/v4/projects/"
            ],
            "view": {
              "row": 1,
              "col": 2
            }
          },
          {
            "id": 3,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "repoId",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 2,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 2,
            "type": "method",
            "library": "Number",
            "method": "toString",
            "args": [
              null,
              null
            ],
            "view": {
              "row": 1,
              "col": 1
            }
          },
          {
            "id": 5,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 4,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 6,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 2,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 4,
              "ptr": "/args/1/value"
            }
          },
          {
            "id": 4,
            "type": "method",
            "library": "String",
            "method": "concat",
            "args": [
              null,
              null,
              "/repository/commits"
            ],
            "view": {
              "row": 2,
              "col": 2
            }
          },
          {
            "id": 7,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 4,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "gitlabCommitURI",
              "ptr": ""
            }
          }
        ],
        "functions": [],
        "comments": [],
        "view": {
          "col": 3,
          "row": 5
        },
        "created": "2025-02-06T18:32:40.894Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:40.894Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "6075cef28c016f0098c7284c",
        "name": "getArtifactPathGitlab",
        "description": "",
        "incoming": [
          {
            "$id": "artifactFullName",
            "type": "string",
            "examples": [
              "New Artifact"
            ]
          }
        ],
        "outgoing": [
          {
            "$id": "artifactName",
            "type": "string",
            "examples": [
              "fd-fsd-fs"
            ]
          }
        ],
        "steps": [
          {
            "id": 2,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "artifactFullName",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 6,
            "type": "declaration",
            "library": "RegExp",
            "method": "new RegExp",
            "args": [
              "\\s",
              "gm"
            ],
            "view": {
              "row": 2,
              "col": 1
            }
          },
          {
            "id": 1,
            "type": "method",
            "library": "String",
            "method": "toLowerCase",
            "args": [
              null
            ],
            "view": {
              "row": 1,
              "col": 1
            }
          },
          {
            "id": 7,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 6,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 3,
              "ptr": "/args/1/value"
            }
          },
          {
            "id": 4,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 3,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 3,
            "type": "method",
            "library": "String",
            "method": "replace",
            "args": [
              null,
              null,
              "-"
            ],
            "view": {
              "row": 1,
              "col": 2
            }
          },
          {
            "id": 5,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 3,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "artifactName",
              "ptr": ""
            }
          }
        ],
        "functions": [],
        "comments": [],
        "view": {
          "col": 2,
          "row": 5
        },
        "created": "2025-02-06T18:32:40.902Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:40.902Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "621002baa161ae00ef6164b5",
        "name": "translateSchemaPushBundles",
        "description": "Takes in the output of the componentDiscovery task in appartifacts and outputs a format that can be used in a form where the components can be edited.",
        "incoming": [
          {
            "$id": "componentDiscoveryOutput",
            "type": "object",
            "properties": {
              "componentMap": {
                "type": "object",
                "properties": {
                  "workflow": {
                    "type": "array"
                  },
                  "ac-agenda-job": {
                    "type": "array"
                  },
                  "automation": {
                    "type": "array"
                  },
                  "trigger": {
                    "type": "array"
                  },
                  "json-forms": {
                    "type": "array"
                  },
                  "template": {
                    "type": "array"
                  },
                  "forms": {
                    "type": "array"
                  },
                  "mop-template": {
                    "type": "array"
                  },
                  "mop-analytic-template": {
                    "type": "array"
                  },
                  "golden-config": {
                    "type": "array"
                  },
                  "transformation": {
                    "type": "array"
                  }
                },
                "required": []
              }
            },
            "required": []
          }
        ],
        "outgoing": [
          {
            "$id": "componentEditorFormInput",
            "type": "object",
            "properties": {
              "components": {
                "type": "object",
                "properties": {
                  "workflows": {
                    "type": "array"
                  },
                  "catalogAutomations": {
                    "type": "array"
                  },
                  "operationsAutomations": {
                    "type": "array"
                  },
                  "triggers": {
                    "type": "array"
                  },
                  "jsonForms": {
                    "type": "array"
                  },
                  "templates": {
                    "type": "array"
                  },
                  "forms": {
                    "type": "array"
                  },
                  "commandTemplates": {
                    "type": "array"
                  },
                  "analyticTemplates": {
                    "type": "array"
                  },
                  "goldenConfigTrees": {
                    "type": "array"
                  },
                  "transformations": {
                    "type": "array"
                  }
                },
                "required": []
              }
            },
            "required": []
          }
        ],
        "steps": [
          {
            "id": 1,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "componentDiscoveryOutput",
              "ptr": "/componentMap/workflow"
            },
            "to": {
              "location": "outgoing",
              "name": "componentEditorFormInput",
              "ptr": "/components/workflows"
            }
          },
          {
            "id": 2,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "componentDiscoveryOutput",
              "ptr": "/componentMap/ac-agenda-job"
            },
            "to": {
              "location": "outgoing",
              "name": "componentEditorFormInput",
              "ptr": "/components/catalogAutomations"
            }
          },
          {
            "id": 3,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "componentDiscoveryOutput",
              "ptr": "/componentMap/automation"
            },
            "to": {
              "location": "outgoing",
              "name": "componentEditorFormInput",
              "ptr": "/components/operationsAutomations"
            }
          },
          {
            "id": 4,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "componentDiscoveryOutput",
              "ptr": "/componentMap/trigger"
            },
            "to": {
              "location": "outgoing",
              "name": "componentEditorFormInput",
              "ptr": "/components/triggers"
            }
          },
          {
            "id": 5,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "componentDiscoveryOutput",
              "ptr": "/componentMap/json-forms"
            },
            "to": {
              "location": "outgoing",
              "name": "componentEditorFormInput",
              "ptr": "/components/jsonForms"
            }
          },
          {
            "id": 6,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "componentDiscoveryOutput",
              "ptr": "/componentMap/template"
            },
            "to": {
              "location": "outgoing",
              "name": "componentEditorFormInput",
              "ptr": "/components/templates"
            }
          },
          {
            "id": 7,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "componentDiscoveryOutput",
              "ptr": "/componentMap/forms"
            },
            "to": {
              "location": "outgoing",
              "name": "componentEditorFormInput",
              "ptr": "/components/forms"
            }
          },
          {
            "id": 8,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "componentDiscoveryOutput",
              "ptr": "/componentMap/mop-template"
            },
            "to": {
              "location": "outgoing",
              "name": "componentEditorFormInput",
              "ptr": "/components/commandTemplates"
            }
          },
          {
            "id": 9,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "componentDiscoveryOutput",
              "ptr": "/componentMap/mop-analytic-template"
            },
            "to": {
              "location": "outgoing",
              "name": "componentEditorFormInput",
              "ptr": "/components/analyticTemplates"
            }
          },
          {
            "id": 10,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "componentDiscoveryOutput",
              "ptr": "/componentMap/golden-config"
            },
            "to": {
              "location": "outgoing",
              "name": "componentEditorFormInput",
              "ptr": "/components/goldenConfigTrees"
            }
          },
          {
            "id": 11,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "componentDiscoveryOutput",
              "ptr": "/componentMap/transformation"
            },
            "to": {
              "location": "outgoing",
              "name": "componentEditorFormInput",
              "ptr": "/components/transformations"
            }
          }
        ],
        "functions": [],
        "comments": [],
        "view": {
          "col": 1,
          "row": 5
        },
        "created": "2025-02-06T18:32:40.905Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:40.905Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "6075d19a8c016f0098c72851",
        "name": "createDeleteCommitGitlab",
        "description": "",
        "incoming": [
          {
            "$id": "commit_message",
            "type": "string"
          },
          {
            "$id": "branch",
            "type": "string"
          },
          {
            "$id": "filteredBody",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "pathParam": {
                  "type": "string",
                  "examples": [
                    "bundles/transformations/filterArrayOfObjects%2Ejson"
                  ]
                },
                "id": {
                  "type": "string",
                  "examples": [
                    "d1adbd909d19e4c16fa8489baa518c91aab2a074"
                  ]
                },
                "name": {
                  "type": "string",
                  "examples": [
                    "filterArrayOfObjects%2Ejson"
                  ]
                },
                "type": {
                  "type": "string",
                  "examples": [
                    "blob"
                  ]
                },
                "mode": {
                  "type": "string",
                  "examples": [
                    "100644"
                  ]
                }
              },
              "required": []
            }
          }
        ],
        "outgoing": [
          {
            "$id": "commitDeleteBody",
            "type": "object",
            "properties": {
              "branch": {
                "type": "string",
                "examples": [
                  "major/2020-10-08T07-48-36"
                ]
              },
              "commit_message": {
                "type": "string",
                "examples": [
                  "10/8 I added a child job to the workflow and am now running the push to gitlab with re-discovery"
                ]
              },
              "actions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "action": {
                      "type": "string",
                      "examples": [
                        "update"
                      ]
                    },
                    "file_path": {
                      "type": "string",
                      "examples": [
                        "scripts/generate.js"
                      ]
                    },
                    "content": {
                      "type": "string",
                      "examples": [
                        "const path = require('path');\nconst fs = require('fs');\n\nconst files = ['package.json', 'manifest.json', 'README.md'];\nlet success = true;\n\nconst PID = process.argv[2];\nconst gitlabURL = process.argv[3];\nconst gitlabBranch = process.argv[4];\nif (PID === null || PID == undefined || Number.isNaN(parseInt(PID, 10))) {\n  console.error('Please run this script with Gitlab Project ID (integer) as an argument');\n  process.exit(2);\n}\nconsole.log(`Generating artifact.json file w/ ${PID} as GitLab Project ID`);\n\n/*function fileTypetoType(fileType) {\n  const underscoreToDash = fileType.replace(/_/g, '-');\n  if (\n    fileType === 'ac_agenda_jobs' ||\n    fileType === 'mop_templates' ||\n    fileType === 'mop_analytic_templates' ||\n    fileType === 'templates' ||\n    fileType === 'workflows'\n  ) {\n    const singularize = underscoreToDash.substring(\n      0,\n      underscoreToDash.length - 1\n    );\n    return singularize;\n  }\n  if (fileType === 'catalog_store') {\n    return 'service-catalog';\n  }\n  return underscoreToDash;\n}*/\nconst filePath = __dirname.replace(\"/scripts\", \"\");\ntry {\n  const [packageJSON, manifest, readme] = files.map(entry => {\n    const result = fs.readFileSync(path.join(filePath, `./${entry}`), {\n      encoding: 'utf-8'\n    });\n\n    if (entry !== 'README.md') {\n        const parsedRes = JSON.parse(result);\n        if (entry === 'manifest.json' && Object.prototype.hasOwnProperty.call(parsedRes, 'version')) {\n          delete parsedRes.version;\n        }\n      return parsedRes;\n    } else {\n      return result.replace(/\\.\\//gm, `${gitlabURL}/-/raw/${gitlabBranch}/`);\n    }\n  });\n\n  // const result = fs.readdirSync(path.join(__dirname, './bundles'));\n  const bundles = [];\n  // result.forEach(entry => {\n  //   console.log(`   ➡ generating ${entry}(s)`);\n  //   const fileNames = fs.readdirSync(path.join(__dirname, `./bundles/${entry}`));\n  //   fileNames.forEach(file => {\n  //     const data = fs.readFileSync(\n  //       path.join(__dirname, `./bundles/${entry}/${file}`),\n  //       { encoding: 'utf-8' }\n  //     );\n  //     try {\n  //       bundles.push({ type: fileTypetoType(entry), data: JSON.parse(data) });\n  //       console.log(`     ⚪ ${file}   -   ✅`);\n  //     } catch(err) {\n  //       success = false;\n  //       console.log(`     ⚪ ${file}   -   ❌  - ${err}`);\n  //     }\n  //   });\n  // });\n\n  const components = manifest.artifacts;\n  components.forEach(file => {\n    try {\n      const data = fs.readFileSync(\n        path.join(filePath, `./${file.location}`),\n        { encoding: 'utf-8' }\n      );\n      bundles.push({ type: file.type, data: JSON.parse(data) });\n      console.log(`     ⚪ (${file.type})   -   ${file.location}   -   ✅`);\n    } catch (err) {\n      success = false;\n      console.log(`     ⚪  (${file.type})   -   ${file.location}   -   ❌  - ${err}`);\n    }\n  });\n\n  const metadata = {\n    name: packageJSON.name,\n    version: packageJSON.version,\n    description: packageJSON.description,\n    license: packageJSON.license,\n    repository: packageJSON.repository,\n    keywords: packageJSON.keywords,\n    author: packageJSON.author,\n    IAPDependencies: packageJSON.IAPDependencies,\n    gitlabId: parseInt(PID, 10),\n  };\n\n  if (success) {\n    console.log(`\\n\\nFinished successfully`);\n  } else {\n    console.log(`\\n\\nFinished with error(s)`);\n    process.exit(1);\n  }\n  const artifact = { metadata, manifest, bundles, readme };\n  fs.writeFileSync(\n    path.join(filePath, './artifact.json'),\n    JSON.stringify(artifact, null, 2)\n  );\n} catch (err) {\n  console.error(`Failed to generate artifact.json file: ${err}`);\n  process.exit(1);\n}"
                      ]
                    }
                  },
                  "required": []
                }
              }
            },
            "required": []
          }
        ],
        "steps": [
          {
            "id": 9,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "filteredBody",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 8,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 12,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "branch",
              "ptr": ""
            },
            "to": {
              "location": "outgoing",
              "name": "commitDeleteBody",
              "ptr": "/branch"
            }
          },
          {
            "id": 8,
            "type": "method",
            "library": "Array",
            "method": "map",
            "args": [
              null,
              "ƒ_map_2"
            ],
            "view": {
              "row": 2,
              "col": 1
            }
          },
          {
            "id": 10,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 8,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "commitDeleteBody",
              "ptr": "/actions"
            }
          },
          {
            "id": 13,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "commit_message",
              "ptr": ""
            },
            "to": {
              "location": "outgoing",
              "name": "commitDeleteBody",
              "ptr": "/commit_message"
            }
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "examples": [
                      "964adac3432107ae93c8eb09340e63d4e776a3e4"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "examples": [
                      "nick-1.json"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "examples": [
                      "blob"
                    ]
                  },
                  "path": {
                    "type": "string",
                    "examples": [
                      "bundles/workflows/nick-1.json"
                    ]
                  },
                  "mode": {
                    "type": "string",
                    "examples": [
                      "100644"
                    ]
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "examples": [
                        "964adac3432107ae93c8eb09340e63d4e776a3e4"
                      ]
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "nick-1.json"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "examples": [
                        "blob"
                      ]
                    },
                    "path": {
                      "type": "string",
                      "examples": [
                        "bundles/workflows/nick-1.json"
                      ]
                    },
                    "mode": {
                      "type": "string",
                      "examples": [
                        "100644"
                      ]
                    }
                  },
                  "required": []
                },
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "newValue",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "editable": true,
                "$id": "newValue"
              }
            ],
            "steps": [
              {
                "id": 2,
                "type": "declaration",
                "library": "Object",
                "method": "new Object",
                "args": [
                  "{}"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/path"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 2,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 5,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "action",
                  "delete"
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 1,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "file_path",
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 2
                }
              },
              {
                "id": 8,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "newValue",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "ƒ_map_1",
            "view": {
              "col": 2,
              "row": 6
            },
            "id": "ƒ_map_1",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "pathParam": {
                    "type": "string",
                    "examples": [
                      "bundles/transformations/filterArrayOfObjects%2Ejson"
                    ]
                  },
                  "id": {
                    "type": "string",
                    "examples": [
                      "d1adbd909d19e4c16fa8489baa518c91aab2a074"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "examples": [
                      "filterArrayOfObjects%2Ejson"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "examples": [
                      "blob"
                    ]
                  },
                  "mode": {
                    "type": "string",
                    "examples": [
                      "100644"
                    ]
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "pathParam": {
                      "type": "string",
                      "examples": [
                        "bundles/transformations/filterArrayOfObjects%2Ejson"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "examples": [
                        "d1adbd909d19e4c16fa8489baa518c91aab2a074"
                      ]
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "filterArrayOfObjects%2Ejson"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "examples": [
                        "blob"
                      ]
                    },
                    "mode": {
                      "type": "string",
                      "examples": [
                        "100644"
                      ]
                    }
                  },
                  "required": []
                },
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "newValue",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "editable": true,
                "$id": "newValue"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "declaration",
                "library": "Object",
                "method": "new Object",
                "args": [
                  "{}"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 2,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "action",
                  "delete"
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 4,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "file_path",
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 2
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/pathParam"
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "newValue",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "ƒ_map_2",
            "view": {
              "col": 2,
              "row": 5
            },
            "id": "ƒ_map_2",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 1,
          "row": 6
        },
        "created": "2025-02-06T18:32:40.923Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:40.923Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "5f7caed7a6f94b2e4b558b71",
        "name": "convertFormOutputToDiscoveryFormat",
        "description": "",
        "incoming": [
          {
            "$id": "formOutput",
            "type": "object",
            "properties": {
              "components": {
                "type": "object",
                "properties": {
                  "catalogAutomations": {
                    "type": "array"
                  },
                  "operationsAutomations": {
                    "type": "array"
                  },
                  "workflows": {
                    "type": "array"
                  },
                  "jsonForms": {
                    "type": "array"
                  },
                  "forms": {
                    "type": "array"
                  },
                  "templates": {
                    "type": "array"
                  },
                  "commandTemplates": {
                    "type": "array"
                  },
                  "analyticTemplates": {
                    "type": "array"
                  },
                  "goldenConfigTrees": {
                    "type": "array"
                  },
                  "transformations": {
                    "type": "array"
                  },
                  "triggers": {
                    "type": "array"
                  }
                },
                "required": []
              }
            },
            "required": []
          }
        ],
        "outgoing": [
          {
            "$id": "discoveryEntryPoint",
            "type": "object",
            "properties": {
              "catalogAutomation": {
                "type": [
                  "null",
                  "array"
                ],
                "items": {
                  "type": "string",
                  "examples": [
                    "zackAll"
                  ]
                }
              },
              "workflow": {
                "type": [
                  "null",
                  "array"
                ]
              },
              "transformation": {
                "type": [
                  "null",
                  "array"
                ]
              },
              "operationsAutomation": {
                "type": [
                  "null",
                  "array"
                ]
              }
            },
            "required": []
          }
        ],
        "steps": [
          {
            "id": 1,
            "type": "declaration",
            "library": "Object",
            "method": "new Object",
            "args": [
              {
                "catalogAutomation": [],
                "workflow": [],
                "transformation": [],
                "operationsAutomation": []
              }
            ],
            "view": {
              "row": 1,
              "col": 3
            }
          },
          {
            "id": 6,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formOutput",
              "ptr": "/components/workflows"
            },
            "to": {
              "location": "function",
              "name": 3,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 2,
            "type": "function",
            "function": "userFunc_1",
            "args": [
              null
            ],
            "view": {
              "row": 1,
              "col": 2
            }
          },
          {
            "id": 3,
            "type": "function",
            "function": "userFunc_1",
            "args": [
              null
            ],
            "view": {
              "row": 2,
              "col": 2
            }
          },
          {
            "id": 9,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 8,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 10,
            "type": "assign",
            "from": {
              "location": "function",
              "name": 2,
              "ptr": "/return/arrayedNames"
            },
            "to": {
              "location": "method",
              "name": 8,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 15,
            "type": "assign",
            "from": {
              "location": "function",
              "name": 3,
              "ptr": "/return/arrayedNames"
            },
            "to": {
              "location": "method",
              "name": 11,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 8,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "catalogAutomation",
              null
            ],
            "view": {
              "row": 2,
              "col": 3
            }
          },
          {
            "id": 12,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 8,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 11,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 11,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "workflow",
              null
            ],
            "view": {
              "row": 3,
              "col": 3
            }
          },
          {
            "id": 14,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 11,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 13,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 13,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "transformation",
              []
            ],
            "view": {
              "row": 4,
              "col": 3
            }
          },
          {
            "id": 21,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formOutput",
              "ptr": "/components/catalogAutomations"
            },
            "to": {
              "location": "function",
              "name": 2,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 22,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "operationsAutomation",
              null
            ],
            "view": {
              "row": 5,
              "col": 3
            }
          },
          {
            "id": 23,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 13,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 22,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 24,
            "type": "function",
            "function": "userFunc_1",
            "args": [
              null
            ],
            "view": {
              "row": 4,
              "col": 2
            }
          },
          {
            "id": 25,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formOutput",
              "ptr": "/components/operationsAutomations"
            },
            "to": {
              "location": "function",
              "name": 24,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 26,
            "type": "assign",
            "from": {
              "location": "function",
              "name": 24,
              "ptr": "/return/arrayedNames"
            },
            "to": {
              "location": "method",
              "name": 22,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 27,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 22,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "discoveryEntryPoint",
              "ptr": ""
            }
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "$id": "componentArray",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "zackAll"
                      ]
                    }
                  },
                  "required": []
                }
              }
            ],
            "outgoing": [
              {
                "$id": "arrayedNames",
                "type": "array",
                "items": {
                  "type": "string",
                  "examples": [
                    "zackAll"
                  ]
                }
              }
            ],
            "steps": [
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "componentArray",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 1,
                "type": "method",
                "library": "Array",
                "method": "map",
                "args": [
                  null,
                  "ƒ_map_1"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "arrayedNames",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "process\\Array",
            "view": {
              "col": 2,
              "row": 7
            },
            "id": "userFunc_1",
            "comments": []
          },
          {
            "incoming": [
              {
                "$id": "transformationComponentArray",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "zackAll"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "examples": [
                        "5f7c62b43451a606c2fb0305"
                      ]
                    }
                  },
                  "required": []
                }
              }
            ],
            "outgoing": [
              {
                "$id": "arrayedNames",
                "type": "array",
                "items": {
                  "type": "string",
                  "examples": [
                    "zackAll"
                  ]
                }
              }
            ],
            "steps": [
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "transformationComponentArray",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 1,
                "type": "method",
                "library": "Array",
                "method": "map",
                "args": [
                  null,
                  "ƒ_map_1 (1)"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "arrayedNames",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "processTransformations",
            "view": {
              "col": 1,
              "row": 6
            },
            "id": "userFunc_2",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "examples": [
                      "zackAll"
                    ]
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "zackAll"
                      ]
                    }
                  },
                  "required": []
                },
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "newValue",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "editable": true,
                "$id": "newValue"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/name"
                },
                "to": {
                  "location": "outgoing",
                  "name": "newValue",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "ƒ_map_1",
            "view": {
              "col": 1,
              "row": 7
            },
            "id": "ƒ_map_1",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "examples": [
                      "zackAll"
                    ]
                  },
                  "id": {
                    "type": "string",
                    "examples": [
                      "5f7c62b43451a606c2fb0305"
                    ]
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "zackAll"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "examples": [
                        "5f7c62b43451a606c2fb0305"
                      ]
                    }
                  },
                  "required": []
                },
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "newValue",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "editable": true,
                "$id": "newValue"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/id"
                },
                "to": {
                  "location": "outgoing",
                  "name": "newValue",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "ƒ_map_1 (1)",
            "view": {
              "col": 1,
              "row": 6
            },
            "id": "ƒ_map_1 (1)",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 4,
          "row": 7
        },
        "created": "2025-02-06T18:32:40.932Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:40.932Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "6210015da161ae00ef6164b4",
        "name": "convertArtifactInfoToForm",
        "description": "",
        "incoming": [
          {
            "$id": "input",
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "examples": [
                  "5f3c38e78cd2e02bacdd59eb"
                ]
              },
              "name": {
                "type": "string",
                "examples": [
                  "@itentialopensource/asa-firewall-object-group-update"
                ]
              },
              "version": {
                "type": "string",
                "examples": [
                  "0%2E0%2E11-2020%2E1%2E1"
                ]
              },
              "description": {
                "type": "string",
                "examples": [
                  "This artifact contains the Cisco ASA group policy object update workflow for Ansible using IAP"
                ]
              },
              "license": {
                "type": "string",
                "examples": [
                  "Apache-2%2E0"
                ]
              },
              "repository": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "examples": [
                      "git"
                    ]
                  },
                  "url": {
                    "type": "string",
                    "examples": [
                      "https://gitlab%2Ecom:itentialopensource/pre-built-automations/asa-firewall-object-group-update%2Egit"
                    ]
                  }
                },
                "required": []
              },
              "keywords": {
                "type": "array",
                "items": {
                  "type": "string",
                  "examples": [
                    "Itential"
                  ]
                },
                "$id": "keywords"
              },
              "IAPDependencies": {
                "type": "object",
                "properties": {
                  "@itential/app-automation_catalog": {
                    "type": "string",
                    "examples": [
                      "2%2E6%2E3"
                    ]
                  },
                  "@itential/app-json_forms": {
                    "type": "string",
                    "examples": [
                      "1%2E14%2E1"
                    ]
                  },
                  "@itential/app-workflow_engine": {
                    "type": "string",
                    "examples": [
                      "7%2E9%2E4"
                    ]
                  }
                },
                "required": []
              },
              "gitlabId": {
                "type": "integer",
                "examples": [
                  17671583
                ]
              },
              "author": {
                "type": "string",
                "examples": [
                  "Itential Artifacts"
                ]
              },
              "components": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  }
                },
                "$id": "components"
              },
              "readme": {
                "type": "string",
                "examples": [
                  "<!-- This is a comment in md (Markdown) format, it will not be visible to the end user -->\n<!-- Update the below line with your artifact name -->\n# ASA Firewall Object Group Update \n<!-- Add a short description or tag-line -->\nThis artifact contains the Cisco ASA group policy object update workflow for Ansible using IAP%2E  This workflow is designed to create and/or update an existing group object to add and remove hosts on a Cisco ASA firewall physical and virtual devices via Ansible%2E\n​​\n<!-- Leave TOC intact unless you've added or removed headers -->\n## Table of Contents\n​\n- [Overview](#overview)\n- [Features](#features)\n- [Requirements](#requirements)\n- [Future Enhancements](#future-enhancements)\n- [How to Install](#how-to-install)\n- [How to Run](#how-to-run)\n- [Additional Information](#additional-information)\n​\n## Overview\n<!-- Write a few sentences about the artifact and explain the use case(s) -->\n<!-- Ex%2E: The Migration Wizard enables IAP users to conveniently move their automation use cases between their different IAP environments -->\n<!--  (e%2Eg%2E from Dev to Pre-Production or from Lab to Production)%2E  -->\nThis artifact contains the Cisco ASA group policy object update workflow for Ansible using IAP%2E  This workflow is designed to create and/or update an existing group object to add and remove hosts on a Cisco ASA firewall physical and virtual devices via Ansible%2E\n​\nThis solution consists of the following:\n* Main Workflow (**IAP-Artifacts ASA Firewall Group Policy Update**)\n* Automation Catalog entry (**IAP Artifacts ASA Firewall Object Group Update**)\n* JSON Form (**IAP Artifacts ASA Firewall Object Group Update**)\n​\n<!-- Workflow(s) Image Placeholder - TO BE ADDED DIRECTLY TO GITLAB -->\n<table><tr><td>\n  <img src=\"https://gitlab.com/itentialopensource/pre-built-automations/ASA-Firewall-Object-Group-Update/raw/master/images/overview.png\" alt=\"workflow\" width=\"800px\">\n</td></tr></table>\n\n​\n## Features\n<!-- Bullet point highlighting the most exciting features of the artifact -->\n<!-- Ex%2E: * Automatically checks for device type -->\n<!-- Ex%2E: * Displays dry-run to user (asking for confirmation) prior to pushing config to the device -->\n<!-- Ex%2E: * Verifies downloaded file integrity (using md5), will try to download again if failed -->\n  * Group Update Host Addition and Removal%2E\n  * Allow for a rollback in case functionality checks have failed%2E\n  * Zero touch mode of operation is available to select via JSON form%2E\n​\n## Requirements\n<!-- Explain any pre-req%2E Ex%2E: This artifact requires Ansible or NSO (with F5 NED) in order to run -->\nThis artifact requires Ansible, Itential Automation Gateway, and a Cisco ASA device%2E\n​\n## Supported Device Types\n  * Cisco ASA/ASAv\n​\n## Test Environment\n  * Devices Ver%2E:\n    * asa: 9%2E12\n  * IAP Ver%2E 2019%2E3%2E2\n  * Itential Automation Gateway Ver%2E: 2%2E36%2E3+2019%2E3%2E14\n  * Ansible Ver%2E: 2%2E8%2E3\n​\n## Future Enhancements\n<!-- OPTIONAL Mention If the artifact has known limited support%2E Ex%2E: This artifact only support Cisco IOS and XR devices -->\n* This workflow is designed to run only against Ansible devices; don't try to run it against Cisco-ASA devices orchastrated by Cisco NSO%2E\n* Form validation on list of hosts only supports IPv4 addresses\n​\n## How to Install\n<!-- OPTIONAL - Explain if external (to IAP) components are required%2E Ex%2E The ansible roles required for this artifact can be found in www%2Egitlab%2Ecom/itentialopensource%2E%2E%2E%2E%2E%2E   -->\n * To install this artifact in IAP, use **App-Artifact** available in Nexus repo%2E \n <table><tr><td>\n  <img src=\"https://gitlab.com/itentialopensource/pre-built-automations/ASA-Firewall-Object-Group-Update/raw/master/images/install.png\" alt=\"workflow\" width=\"800px\">\n</td></tr></table>\n​\n\n## How to Run\n<!-- Explain what is/are the main entrypoint(s) for this artifact: automation catalog document, workflow builder, postman, etc%2E  -->\nStarting the ASA Firewall Group Policy Update is done via the Automation Catalog%2E Please provide the device, group and hosts in the provided form%2E\n <table><tr><td>\n  <img src=\"https://gitlab.com/itentialopensource/pre-built-automations/ASA-Firewall-Object-Group-Update/raw/master/images/runAutomation.png\" alt=\"workflow\" width=\"800px\">\n</td></tr></table>\n\n## Additional Information\nPlease use your Itential Customer Success account if you need support when using this artifact%2E\n"
                ]
              },
              "manifest": {
                "type": "object",
                "properties": {
                  "bundleName": {
                    "type": "string",
                    "examples": [
                      "ASA Firewall Object Group Update"
                    ]
                  },
                  "fingerprint": {
                    "type": "string",
                    "examples": [
                      "5e7917201b809a70972fc6e5"
                    ]
                  },
                  "createdEpoch": {
                    "type": "string",
                    "examples": [
                      "1584994080756"
                    ]
                  },
                  "artifacts": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "examples": [
                            "IAP Artifacts ASA Firewall Object Group Update"
                          ]
                        },
                        "name": {
                          "type": "string",
                          "examples": [
                            "IAP Artifacts ASA Firewall Object Group Update"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "examples": [
                            "ac-agenda-job"
                          ]
                        },
                        "location": {
                          "type": "string",
                          "examples": [
                            "/bundles/ac_agenda_jobs/IAP Artifacts ASA Firewall Object Group Update%2Ejson"
                          ]
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "entryPoint": {
                              "type": "boolean",
                              "examples": [
                                true,
                                false
                              ]
                            }
                          },
                          "required": []
                        }
                      },
                      "required": []
                    },
                    "$id": "artifacts"
                  }
                },
                "required": []
              }
            },
            "required": []
          }
        ],
        "outgoing": [
          {
            "$id": "output",
            "type": "object",
            "properties": {
              "componentMap": {
                "type": "object",
                "properties": {
                  "ac-agenda-job": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "prit"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f6a4e3657b8159234644bdd"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "automation": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "prit"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f6a4e3657b8159234644bdd"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "workflow": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "prit"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f6a4e3657b8159234644bdd"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "json-forms": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "prit"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f6a4e3657b8159234644bdd"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "forms": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "prit"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f6a4e3657b8159234644bdd"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "template": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "prit"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f6a4e3657b8159234644bdd"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "mop-template": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "prit"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f6a4e3657b8159234644bdd"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "mop-analytic-template": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "prit"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f6a4e3657b8159234644bdd"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "golden-config": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "prit"
                          ]
                        },
                        "treeId": {
                          "type": "string",
                          "examples": [
                            "5f6a4e3657b8159234644bdd"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "transformation": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "prit"
                          ]
                        },
                        "id": {
                          "type": "string",
                          "examples": [
                            "5f6a4e3657b8159234644bdd"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "trigger": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "prit"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f6a4e3657b8159234644bdd"
                          ]
                        }
                      },
                      "required": []
                    }
                  }
                },
                "required": []
              }
            },
            "required": []
          }
        ],
        "steps": [
          {
            "id": 2,
            "type": "declaration",
            "library": "Object",
            "method": "new Object",
            "args": [
              {
                "ac-agenda-job": [],
                "automation": [],
                "workflow": [],
                "json-forms": [],
                "forms": [],
                "template": [],
                "mop-template": [],
                "mop-analytic-template": [],
                "golden-config": [],
                "transformation": [],
                "trigger": []
              }
            ],
            "view": {
              "row": 2,
              "col": 1
            }
          },
          {
            "id": 4,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "input",
              "ptr": "/components"
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 3,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 2,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 1,
            "type": "method",
            "library": "Array",
            "method": "reduce",
            "args": [
              null,
              "ƒ_reduce_3",
              null
            ],
            "view": {
              "row": 1,
              "col": 2
            }
          },
          {
            "id": 5,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "output",
              "ptr": "/componentMap"
            }
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "examples": [
                      "workflow"
                    ]
                  },
                  "id": {
                    "type": "string",
                    "examples": [
                      "22a02846-c48a-4ced-9609-4e40c7f0eec1"
                    ],
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string",
                    "examples": [
                      "IAP Artifacts ASA Firewall Object Group Update"
                    ]
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "examples": [
                        "workflow"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "examples": [
                        "22a02846-c48a-4ced-9609-4e40c7f0eec1"
                      ],
                      "format": "uuid"
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "IAP Artifacts ASA Firewall Object Group Update"
                      ]
                    }
                  },
                  "required": []
                },
                "$id": "array",
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "accumulator",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              }
            ],
            "steps": [
              {
                "id": 16,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/id"
                },
                "to": {
                  "location": "function",
                  "name": 15,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 17,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/name"
                },
                "to": {
                  "location": "function",
                  "name": 15,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 18,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/type"
                },
                "to": {
                  "location": "function",
                  "name": 15,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 15,
                "type": "function",
                "function": "userFunc_1",
                "args": [
                  "",
                  "",
                  ""
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 19,
                "type": "method",
                "library": "Object",
                "method": "getProperty",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 20,
                "type": "method",
                "library": "Array",
                "method": "push",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 3
                }
              },
              {
                "id": 21,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 3
                }
              },
              {
                "id": 22,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 19,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 23,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/type"
                },
                "to": {
                  "location": "method",
                  "name": 19,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 24,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 19,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 20,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 25,
                "type": "assign",
                "from": {
                  "location": "function",
                  "name": 15,
                  "ptr": "/return/output"
                },
                "to": {
                  "location": "method",
                  "name": 20,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 26,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 20,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 21,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 27,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 21,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 28,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/type"
                },
                "to": {
                  "location": "method",
                  "name": 21,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 29,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 21,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "accumulator",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "sortComponent",
            "view": {
              "col": 3,
              "row": 4
            },
            "id": "ƒ_reduce_1",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              },
              {
                "type": "object",
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "$id": "array",
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "accumulator",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "function",
                "function": "setIdentifier",
                "args": [],
                "view": {
                  "row": 1,
                  "col": 3
                }
              },
              {
                "id": 2,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  "treeId",
                  "id"
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 3,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  "golden-config"
                ],
                "view": {
                  "row": 2,
                  "col": 1
                }
              },
              {
                "id": 4,
                "type": "method",
                "library": "Object",
                "method": "getProperty",
                "args": [
                  null,
                  "type"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 8,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/return"
                },
                "to": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 10,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 11,
                "type": "method",
                "library": "Object",
                "method": "getProperty",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 4
                }
              },
              {
                "id": 12,
                "type": "method",
                "library": "Array",
                "method": "push",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 4
                }
              },
              {
                "id": 13,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 5
                }
              },
              {
                "id": 14,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 15,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 16,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 12,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 17,
                "type": "assign",
                "from": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/return/output"
                },
                "to": {
                  "location": "method",
                  "name": 12,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 18,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 12,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 19,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 20,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 21,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "accumulator",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "ƒ_reduce_2",
            "view": {
              "col": 5,
              "row": 4
            },
            "id": "ƒ_reduce_2",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              },
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                },
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  }
                },
                "$id": "array",
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "accumulator",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "function",
                "function": "formatComponents",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/type"
                },
                "to": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 4,
                "type": "method",
                "library": "Object",
                "method": "getProperty",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 5,
                "type": "method",
                "library": "Array",
                "method": "push",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 2
                }
              },
              {
                "id": 6,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 3
                }
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 10,
                "type": "assign",
                "from": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/return/output"
                },
                "to": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 11,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 6,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 12,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/type"
                },
                "to": {
                  "location": "method",
                  "name": 6,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 13,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 6,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 14,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 6,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "accumulator",
                  "ptr": ""
                }
              },
              {
                "id": 15,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/type"
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/1/value"
                }
              }
            ],
            "functions": [],
            "name": "ƒ_reduce_3",
            "view": {
              "col": 3,
              "row": 4
            },
            "id": "ƒ_reduce_3",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "type": "array",
                "$id": "array",
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "newValue",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "editable": true,
                "$id": "newValue"
              }
            ],
            "steps": [],
            "functions": [],
            "name": "ƒ_map_1",
            "view": {
              "col": 1,
              "row": 4
            },
            "id": "ƒ_map_1",
            "comments": []
          },
          {
            "incoming": [
              {
                "$id": "name",
                "type": "string",
                "examples": [
                  "name"
                ]
              },
              {
                "$id": "_id",
                "type": "string",
                "examples": [
                  "_id"
                ]
              },
              {
                "$id": "type",
                "type": "string",
                "examples": [
                  "fdsa"
                ]
              }
            ],
            "outgoing": [
              {
                "$id": "output",
                "type": "object",
                "properties": {},
                "required": []
              }
            ],
            "steps": [
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "type",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 6,
                "type": "declaration",
                "library": "Object",
                "method": "new Object",
                "args": [
                  "{}"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 9,
                "type": "declaration",
                "library": "Object",
                "method": "new Object",
                "args": [
                  "{}"
                ],
                "view": {
                  "row": 2,
                  "col": 1
                }
              },
              {
                "id": 18,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "name",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 19,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "_id",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 20,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "name",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 10,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 21,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "_id",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 1,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  "transformation"
                ],
                "view": {
                  "row": 3,
                  "col": 1
                }
              },
              {
                "id": 14,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 6,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 15,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 9,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 10,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 7,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "name",
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 10,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "name",
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 2
                }
              },
              {
                "id": 16,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 17,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 10,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 8,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "id",
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 3
                }
              },
              {
                "id": 11,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "_id",
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 3
                }
              },
              {
                "id": 12,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 13,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 3,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 4
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "output",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "nameId",
            "view": {
              "col": 4,
              "row": 4
            },
            "id": "userFunc_1",
            "comments": []
          },
          {
            "incoming": [
              {
                "$id": "input",
                "type": "object",
                "properties": {
                  "ac-agenda-job": {
                    "type": "array"
                  },
                  "workflow": {
                    "type": "array"
                  },
                  "json-forms": {
                    "type": "array"
                  },
                  "forms": {
                    "type": "array"
                  },
                  "template": {
                    "type": "array"
                  },
                  "mop-template": {
                    "type": "array"
                  },
                  "mop-analytic-template": {
                    "type": "array"
                  },
                  "golden-config": {
                    "type": "array"
                  },
                  "transformation": {
                    "type": "array"
                  }
                },
                "required": []
              },
              {
                "$id": "itemToPush",
                "type": "object",
                "properties": {},
                "required": []
              },
              {
                "$id": "type",
                "type": "string",
                "examples": [
                  "type"
                ]
              }
            ],
            "outgoing": [
              {
                "$id": "output",
                "type": "object",
                "properties": {
                  "ac-agenda-job": {
                    "type": "array"
                  },
                  "workflow": {
                    "type": "array"
                  },
                  "json-forms": {
                    "type": "array"
                  },
                  "forms": {
                    "type": "array"
                  },
                  "template": {
                    "type": "array"
                  },
                  "mop-template": {
                    "type": "array"
                  },
                  "mop-analytic-template": {
                    "type": "array"
                  },
                  "golden-config": {
                    "type": "array"
                  },
                  "transformation": {
                    "type": "array"
                  }
                },
                "required": []
              }
            ],
            "steps": [
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "type",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "itemToPush",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "type",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 12,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "input",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 13,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "input",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 1,
                "type": "method",
                "library": "Object",
                "method": "getProperty",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 1
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 4,
                "type": "method",
                "library": "Array",
                "method": "push",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 10,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 7,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 3
                }
              },
              {
                "id": 14,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "output",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "pushComponent",
            "view": {
              "col": 3,
              "row": 4
            },
            "id": "userFunc_2",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              },
              {
                "type": "object",
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "$id": "array",
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "accumulator",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "function",
                "function": "setIdentifier",
                "args": [
                  "",
                  "",
                  ""
                ],
                "view": {
                  "row": 1,
                  "col": 3
                }
              },
              {
                "id": 2,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  "treeId",
                  "id"
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 3,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  "golden-config"
                ],
                "view": {
                  "row": 2,
                  "col": 1
                }
              },
              {
                "id": 4,
                "type": "method",
                "library": "Object",
                "method": "getProperty",
                "args": [
                  null,
                  "type"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 8,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/return"
                },
                "to": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 11,
                "type": "method",
                "library": "Object",
                "method": "getProperty",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 4
                }
              },
              {
                "id": 12,
                "type": "method",
                "library": "Array",
                "method": "push",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 4
                }
              },
              {
                "id": 13,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 5
                }
              },
              {
                "id": 14,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 15,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 16,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 12,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 17,
                "type": "assign",
                "from": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/return/output"
                },
                "to": {
                  "location": "method",
                  "name": 12,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 18,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 12,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 19,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 20,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 21,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "accumulator",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "ƒ_reduce_2 (1)",
            "view": {
              "col": 5,
              "row": 4
            },
            "id": "ƒ_reduce_2 (1)",
            "comments": []
          },
          {
            "incoming": [
              {
                "$id": "idType",
                "type": "string"
              },
              {
                "$id": "componentObject",
                "type": "object"
              },
              {
                "$id": "type",
                "type": "string"
              }
            ],
            "outgoing": [
              {
                "$id": "output",
                "type": "object"
              }
            ],
            "steps": [
              {
                "id": 2,
                "type": "method",
                "library": "Object",
                "method": "getProperty",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 1
                }
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "componentObject",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "idType",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 6,
                "type": "method",
                "library": "Object",
                "method": "deleteProperty",
                "args": [
                  null,
                  "type"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "componentObject",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 6,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 8,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 4
                }
              },
              {
                "id": 9,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  "transformation"
                ],
                "view": {
                  "row": 3,
                  "col": 1
                }
              },
              {
                "id": 10,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "type",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 9,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 11,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 9,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 12,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 6,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 13,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 3
                }
              },
              {
                "id": 15,
                "type": "method",
                "library": "Object",
                "method": "deleteProperty",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 3
                }
              },
              {
                "id": 16,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 15,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 17,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 15,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 18,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  "golden-config"
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 19,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "type",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 18,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 20,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  "treeId",
                  "_id"
                ],
                "view": {
                  "row": 1,
                  "col": 3
                }
              },
              {
                "id": 21,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 18,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 20,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 22,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 20,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 23,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 6,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 24,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 25,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "idType",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 15,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 26,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "output",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "setIdentifier",
            "view": {
              "col": 4,
              "row": 4
            },
            "id": "setIdentifier",
            "comments": []
          },
          {
            "incoming": [
              {
                "$id": "componentObject",
                "type": "object"
              },
              {
                "$id": "type",
                "type": "string"
              }
            ],
            "outgoing": [
              {
                "$id": "output",
                "type": "object"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "method",
                "library": "Object",
                "method": "deleteProperty",
                "args": [
                  null,
                  "type"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "componentObject",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 3,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  "transformation"
                ],
                "view": {
                  "row": 2,
                  "col": 1
                }
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "type",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 5,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  "golden-config"
                ],
                "view": {
                  "row": 3,
                  "col": 1
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "type",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 7,
                "type": "method",
                "library": "Logical",
                "method": "or",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 2
                }
              },
              {
                "id": 8,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 10,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 4
                }
              },
              {
                "id": 11,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 10,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 12,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 10,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 13,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "_id",
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 3
                }
              },
              {
                "id": 14,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 15,
                "type": "method",
                "library": "Object",
                "method": "getProperty",
                "args": [
                  null,
                  "id"
                ],
                "view": {
                  "row": 3,
                  "col": 2
                }
              },
              {
                "id": 16,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 15,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 17,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 15,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 18,
                "type": "method",
                "library": "Object",
                "method": "deleteProperty",
                "args": [
                  null,
                  "id"
                ],
                "view": {
                  "row": 3,
                  "col": 4
                }
              },
              {
                "id": 19,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 18,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 20,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 18,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 10,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 21,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 10,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "output",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "formatComponents",
            "view": {
              "col": 4,
              "row": 4
            },
            "id": "formatComponents",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 3,
          "row": 4
        },
        "created": "2025-02-06T18:32:40.944Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:40.944Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "60647088fa6304009929d8d6",
        "name": "filterArrayOfObjectsGitLab",
        "incoming": [
          {
            "$id": "filterableArray",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": true
            }
          },
          {
            "$id": "keyToFilterOn",
            "type": "string",
            "default": "keyToFilterOn",
            "examples": [
              "keyToFilterOn"
            ]
          },
          {
            "$id": "valueToFind",
            "type": "string",
            "default": "valueToFind",
            "examples": [
              "valueToFind"
            ]
          },
          {
            "$id": "discardMatching",
            "type": "boolean",
            "examples": [
              true,
              false
            ]
          }
        ],
        "outgoing": [
          {
            "$id": "filteredArray",
            "type": "array"
          },
          {
            "$id": "firstFilteredElement",
            "type": "object",
            "properties": {},
            "required": []
          }
        ],
        "steps": [
          {
            "id": 6,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "filterableArray",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 7,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "keyToFilterOn",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 8,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "valueToFind",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/3/value"
            }
          },
          {
            "id": 9,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "discardMatching",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/4/value"
            }
          },
          {
            "id": 1,
            "type": "method",
            "library": "Array",
            "method": "filter",
            "args": [
              null,
              "ƒ_query_1",
              null,
              null,
              null
            ],
            "view": {
              "row": 1,
              "col": 1
            }
          },
          {
            "id": 3,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 2,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 5,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "filteredArray",
              "ptr": ""
            }
          },
          {
            "id": 2,
            "type": "method",
            "library": "Array",
            "method": "getIndex",
            "args": [
              null,
              0
            ],
            "view": {
              "row": 2,
              "col": 2
            }
          },
          {
            "id": 4,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 2,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "firstFilteredElement",
              "ptr": ""
            }
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "type": "object",
                "properties": {},
                "required": [],
                "additionalProperties": true,
                "$id": "element"
              },
              {
                "title": "index",
                "type": "number",
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {},
                  "required": [],
                  "additionalProperties": true
                }
              },
              {
                "$id": "constantValue1",
                "type": "string",
                "isConstValue": true
              },
              {
                "$id": "constantValue2",
                "type": "string",
                "isConstValue": true
              },
              {
                "$id": "constantValue3",
                "type": "boolean",
                "isConstValue": true
              }
            ],
            "outgoing": [
              {
                "title": "return",
                "type": "boolean",
                "$id": "return"
              }
            ],
            "steps": [
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "element",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "constantValue1",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 15,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "constantValue3",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 14,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 31,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "constantValue3",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 10,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 34,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "constantValue2",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 32,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 14,
                "type": "method",
                "library": "Logical",
                "method": "not",
                "args": [
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 2
                }
              },
              {
                "id": 1,
                "type": "method",
                "library": "Object",
                "method": "getProperty",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 30,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 14,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 33,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 32,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 32,
                "type": "method",
                "library": "Equality",
                "method": "deepEquals",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 35,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 32,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 36,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 32,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 22,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 22,
                "type": "method",
                "library": "Logical",
                "method": "not",
                "args": [
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 3
                }
              },
              {
                "id": 24,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 22,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 10,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 7,
                "type": "method",
                "library": "Logical",
                "method": "and",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 3
                }
              },
              {
                "id": 10,
                "type": "method",
                "library": "Logical",
                "method": "and",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 3
                }
              },
              {
                "id": 27,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 26,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 28,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 10,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 26,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 26,
                "type": "method",
                "library": "Logical",
                "method": "or",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 4
                }
              },
              {
                "id": 29,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 26,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "return",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "ƒ_query_1",
            "view": {
              "col": 4,
              "row": 5
            },
            "id": "ƒ_query_1",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 3,
          "row": 6
        },
        "created": "2025-02-06T18:32:40.978Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:40.978Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "6075bda98c016f0098c72849",
        "name": "getMetadataAndComponentsGitlab",
        "description": "",
        "incoming": [
          {
            "$id": "artifactDataUnformatted",
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "examples": [
                  "5f3c38e78cd2e02bacdd59eb"
                ]
              },
              "name": {
                "type": "string",
                "examples": [
                  "@itentialopensource/asa-firewall-object-group-update"
                ]
              },
              "version": {
                "type": "string",
                "examples": [
                  "0.0.11-2020.1.1"
                ]
              },
              "description": {
                "type": "string",
                "examples": [
                  "This artifact contains the Cisco ASA group policy object update workflow for Ansible using IAP"
                ]
              },
              "license": {
                "type": "string",
                "examples": [
                  "Apache-2.0"
                ]
              },
              "repository": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "examples": [
                      "git"
                    ]
                  },
                  "url": {
                    "type": "string",
                    "examples": [
                      "https://gitlab.com:itentialopensource/pre-built-automations/asa-firewall-object-group-update.git"
                    ]
                  }
                },
                "required": []
              },
              "keywords": {
                "type": "array",
                "items": {
                  "type": "string",
                  "examples": [
                    "Itential"
                  ]
                }
              },
              "IAPDependencies": {
                "type": "object",
                "properties": {
                  "@itential/app-automation_catalog": {
                    "type": "string",
                    "examples": [
                      "2.6.3"
                    ]
                  },
                  "@itential/app-json_forms": {
                    "type": "string",
                    "examples": [
                      "1.14.1"
                    ]
                  },
                  "@itential/app-workflow_engine": {
                    "type": "string",
                    "examples": [
                      "7.9.4"
                    ]
                  }
                },
                "required": []
              },
              "gitlabId": {
                "type": "integer",
                "examples": [
                  17671583
                ]
              },
              "author": {
                "type": "string",
                "examples": [
                  "Itential Artifacts"
                ]
              },
              "components": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "examples": [
                        "workflow"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "examples": [
                        "22a02846-c48a-4ced-9609-4e40c7f0eec1"
                      ],
                      "format": "uuid"
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "IAP Artifacts ASA Firewall Object Group Update"
                      ]
                    }
                  },
                  "required": []
                }
              },
              "readme": {
                "type": "string",
                "examples": [
                  "<!-- This is a comment in md (Markdown) format, it will not be visible to the end user -->\n<!-- Update the below line with your artifact name -->\n# ASA Firewall Object Group Update \n<!-- Add a short description or tag-line -->\nThis artifact contains the Cisco ASA group policy object update workflow for Ansible using IAP.  This workflow is designed to create and/or update an existing group object to add and remove hosts on a Cisco ASA firewall physical and virtual devices via Ansible.\n​​\n<!-- Leave TOC intact unless you've added or removed headers -->\n## Table of Contents\n​\n- [Overview](#overview)\n- [Features](#features)\n- [Requirements](#requirements)\n- [Future Enhancements](#future-enhancements)\n- [How to Install](#how-to-install)\n- [How to Run](#how-to-run)\n- [Additional Information](#additional-information)\n​\n## Overview\n<!-- Write a few sentences about the artifact and explain the use case(s) -->\n<!-- Ex.: The Migration Wizard enables IAP users to conveniently move their automation use cases between their different IAP environments -->\n<!--  (e.g. from Dev to Pre-Production or from Lab to Production).  -->\nThis artifact contains the Cisco ASA group policy object update workflow for Ansible using IAP.  This workflow is designed to create and/or update an existing group object to add and remove hosts on a Cisco ASA firewall physical and virtual devices via Ansible.\n​\nThis solution consists of the following:\n* Main Workflow (**IAP-Artifacts ASA Firewall Group Policy Update**)\n* Automation Catalog entry (**IAP Artifacts ASA Firewall Object Group Update**)\n* JSON Form (**IAP Artifacts ASA Firewall Object Group Update**)\n​\n<!-- Workflow(s) Image Placeholder - TO BE ADDED DIRECTLY TO GITLAB -->\n<table><tr><td>\n  <img src=\"https://gitlab.com/itentialopensource/pre-built-automations/ASA-Firewall-Object-Group-Update/raw/master/images/overview.png\" alt=\"workflow\" width=\"800px\">\n</td></tr></table>\n\n​\n## Features\n<!-- Bullet point highlighting the most exciting features of the artifact -->\n<!-- Ex.: * Automatically checks for device type -->\n<!-- Ex.: * Displays dry-run to user (asking for confirmation) prior to pushing config to the device -->\n<!-- Ex.: * Verifies downloaded file integrity (using md5), will try to download again if failed -->\n  * Group Update Host Addition and Removal.\n  * Allow for a rollback in case functionality checks have failed.\n  * Zero touch mode of operation is available to select via JSON form.\n​\n## Requirements\n<!-- Explain any pre-req. Ex.: This artifact requires Ansible or NSO (with F5 NED) in order to run -->\nThis artifact requires Ansible, Itential Automation Gateway, and a Cisco ASA device.\n​\n## Supported Device Types\n  * Cisco ASA/ASAv\n​\n## Test Environment\n  * Devices Ver.:\n    * asa: 9.12\n  * IAP Ver. 2019.3.2\n  * Itential Automation Gateway Ver.: 2.36.3+2019.3.14\n  * Ansible Ver.: 2.8.3\n​\n## Future Enhancements\n<!-- OPTIONAL Mention If the artifact has known limited support. Ex.: This artifact only support Cisco IOS and XR devices -->\n* This workflow is designed to run only against Ansible devices; don't try to run it against Cisco-ASA devices orchastrated by Cisco NSO.\n* Form validation on list of hosts only supports IPv4 addresses\n​\n## How to Install\n<!-- OPTIONAL - Explain if external (to IAP) components are required. Ex. The ansible roles required for this artifact can be found in www.gitlab.com/itentialopensource......   -->\n * To install this artifact in IAP, use **App-Artifact** available in Nexus repo. \n <table><tr><td>\n  <img src=\"https://gitlab.com/itentialopensource/pre-built-automations/ASA-Firewall-Object-Group-Update/raw/master/images/install.png\" alt=\"workflow\" width=\"800px\">\n</td></tr></table>\n​\n\n## How to Run\n<!-- Explain what is/are the main entrypoint(s) for this artifact: automation catalog document, workflow builder, postman, etc.  -->\nStarting the ASA Firewall Group Policy Update is done via the Automation Catalog. Please provide the device, group and hosts in the provided form.\n <table><tr><td>\n  <img src=\"https://gitlab.com/itentialopensource/pre-built-automations/ASA-Firewall-Object-Group-Update/raw/master/images/runAutomation.png\" alt=\"workflow\" width=\"800px\">\n</td></tr></table>\n\n## Additional Information\nPlease use your Itential Customer Success account if you need support when using this artifact.\n"
                ]
              },
              "manifest": {
                "type": "object",
                "properties": {
                  "bundleName": {
                    "type": "string",
                    "examples": [
                      "ASA Firewall Object Group Update"
                    ]
                  },
                  "fingerprint": {
                    "type": "string",
                    "examples": [
                      "5e7917201b809a70972fc6e5"
                    ]
                  },
                  "createdEpoch": {
                    "type": "string",
                    "examples": [
                      "1584994080756"
                    ]
                  },
                  "artifacts": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "examples": [
                            "IAP Artifacts ASA Firewall Object Group Update"
                          ]
                        },
                        "name": {
                          "type": "string",
                          "examples": [
                            "IAP Artifacts ASA Firewall Object Group Update"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "examples": [
                            "ac-agenda-job"
                          ]
                        },
                        "location": {
                          "type": "string",
                          "examples": [
                            "/bundles/ac_agenda_jobs/IAP Artifacts ASA Firewall Object Group Update.json"
                          ]
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "entryPoint": {
                              "type": "boolean",
                              "examples": [
                                true,
                                false
                              ]
                            }
                          },
                          "required": []
                        }
                      },
                      "required": []
                    }
                  }
                },
                "required": []
              }
            },
            "required": []
          },
          {
            "$id": "componentObject",
            "type": "object",
            "properties": {
              "components": {
                "type": "object",
                "properties": {
                  "ac-agenda-job": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "IAP Artifacts ASA Firewall Object Group Update"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f3c38e78236fd5385c31bbd"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "automation": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "IAP Artifacts ASA Firewall Object Group Update"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f3c38e78236fd5385c31bbd"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "workflow": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "IAP Artifacts ASA Firewall Object Group Update"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "22a02846-c48a-4ced-9609-4e40c7f0eec1"
                          ],
                          "format": "uuid"
                        }
                      },
                      "required": []
                    }
                  },
                  "json-forms": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "IAP Artifacts ASA Firewall Object Group Update"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5e667e015bfbbe055e92e55e"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "forms": {
                    "type": "array"
                  },
                  "template": {
                    "type": "array"
                  },
                  "mop-template": {
                    "type": "array"
                  },
                  "mop-analytic-template": {
                    "type": "array"
                  },
                  "golden-config": {
                    "type": "array"
                  },
                  "transformation": {
                    "type": "array"
                  }
                },
                "required": []
              }
            },
            "required": []
          }
        ],
        "outgoing": [
          {
            "$id": "artifactDataFormatted",
            "type": "object",
            "properties": {},
            "required": []
          }
        ],
        "steps": [
          {
            "id": 1,
            "type": "declaration",
            "library": "Object",
            "method": "new Object",
            "args": [
              "{}"
            ],
            "view": {
              "row": 1,
              "col": 1
            }
          },
          {
            "id": 8,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "artifactDataUnformatted",
              "ptr": "/name"
            },
            "to": {
              "location": "method",
              "name": 6,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 11,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "artifactDataUnformatted",
              "ptr": "/description"
            },
            "to": {
              "location": "method",
              "name": 9,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 14,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "artifactDataUnformatted",
              "ptr": "/author"
            },
            "to": {
              "location": "method",
              "name": 12,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 20,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "artifactDataUnformatted",
              "ptr": "/readme"
            },
            "to": {
              "location": "method",
              "name": 18,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 23,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "artifactDataUnformatted",
              "ptr": "/license"
            },
            "to": {
              "location": "method",
              "name": 21,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 30,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "artifactDataUnformatted",
              "ptr": "/keywords"
            },
            "to": {
              "location": "method",
              "name": 25,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 32,
            "type": "declaration",
            "library": "Object",
            "method": "new Object",
            "args": [
              "{}"
            ],
            "view": {
              "row": 1,
              "col": 3
            }
          },
          {
            "id": 37,
            "type": "declaration",
            "library": "Array",
            "method": "new Array",
            "args": [],
            "view": {
              "row": 6,
              "col": 1
            },
            "polymorphIndex": 0
          },
          {
            "id": 43,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "componentObject",
              "ptr": "/components"
            },
            "to": {
              "location": "method",
              "name": 39,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 45,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "artifactDataUnformatted",
              "ptr": "/IAPDependencies"
            },
            "to": {
              "location": "method",
              "name": 44,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 50,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "artifactDataUnformatted",
              "ptr": "/author"
            },
            "to": {
              "location": "method",
              "name": 47,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 15,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 6,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 34,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 32,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 33,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 38,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 37,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 24,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 44,
            "type": "method",
            "library": "Object",
            "method": "keys",
            "args": [
              null
            ],
            "view": {
              "row": 7,
              "col": 1
            }
          },
          {
            "id": 46,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 44,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 26,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 6,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "name",
              null
            ],
            "view": {
              "row": 1,
              "col": 2
            }
          },
          {
            "id": 16,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 6,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 9,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 9,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "description",
              null
            ],
            "view": {
              "row": 2,
              "col": 2
            }
          },
          {
            "id": 17,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 9,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 12,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 12,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "contributor",
              null
            ],
            "view": {
              "row": 3,
              "col": 2
            }
          },
          {
            "id": 48,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 12,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 47,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 47,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "author",
              null
            ],
            "view": {
              "row": 3,
              "col": 1
            }
          },
          {
            "id": 49,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 47,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 18,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 18,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "readme",
              null
            ],
            "view": {
              "row": 4,
              "col": 2
            }
          },
          {
            "id": 22,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 18,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 21,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 21,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "license",
              null
            ],
            "view": {
              "row": 5,
              "col": 2
            }
          },
          {
            "id": 27,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 21,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 24,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 24,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "categories",
              null
            ],
            "view": {
              "row": 6,
              "col": 2
            }
          },
          {
            "id": 28,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 24,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 25,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 25,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "keywords",
              null
            ],
            "view": {
              "row": 7,
              "col": 2
            }
          },
          {
            "id": 29,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 25,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 26,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 26,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "dependencies",
              null
            ],
            "view": {
              "row": 8,
              "col": 2
            }
          },
          {
            "id": 35,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 26,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 33,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 33,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "metadata",
              null
            ],
            "view": {
              "row": 2,
              "col": 3
            }
          },
          {
            "id": 40,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 33,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 39,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 39,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "components",
              null
            ],
            "view": {
              "row": 3,
              "col": 3
            }
          },
          {
            "id": 42,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 39,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "artifactDataFormatted",
              "ptr": ""
            }
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "examples": [
                      "workflow"
                    ]
                  },
                  "id": {
                    "type": "string",
                    "examples": [
                      "22a02846-c48a-4ced-9609-4e40c7f0eec1"
                    ],
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string",
                    "examples": [
                      "IAP Artifacts ASA Firewall Object Group Update"
                    ]
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "examples": [
                        "workflow"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "examples": [
                        "22a02846-c48a-4ced-9609-4e40c7f0eec1"
                      ],
                      "format": "uuid"
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "IAP Artifacts ASA Firewall Object Group Update"
                      ]
                    }
                  },
                  "required": []
                },
                "$id": "array",
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "newValue",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "newValue"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "declaration",
                "library": "Object",
                "method": "new Object",
                "args": [
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 2,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "name",
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 3,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "_id",
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 2
                }
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/name"
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/id"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 8,
                "type": "method",
                "library": "String",
                "method": "includes",
                "args": [
                  null,
                  "ac-agenda-job",
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 3
                }
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/type"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 10,
                "type": "declaration",
                "library": "Array",
                "method": "new Array",
                "args": [],
                "view": {
                  "row": 1,
                  "col": 4
                },
                "polymorphIndex": 0
              },
              {
                "id": 11,
                "type": "method",
                "library": "Array",
                "method": "push",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 5
                }
              },
              {
                "id": 12,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 10,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 13,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/args/1/value"
                }
              }
            ],
            "functions": [],
            "name": "ƒ_map_1",
            "view": {
              "col": 6,
              "row": 5
            },
            "id": "ƒ_map_1",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 4,
          "row": 9
        },
        "created": "2025-02-06T18:32:40.987Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:40.987Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "620ea276e3638a010009b10e",
        "name": "componentsObject",
        "description": "",
        "incoming": [
          {
            "$id": "input",
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "examples": [
                  "5f3c38e78cd2e02bacdd59eb"
                ]
              },
              "name": {
                "type": "string",
                "examples": [
                  "@itentialopensource/asa-firewall-object-group-update"
                ]
              },
              "version": {
                "type": "string",
                "examples": [
                  "0%2E0%2E11-2020%2E1%2E1"
                ]
              },
              "description": {
                "type": "string",
                "examples": [
                  "This artifact contains the Cisco ASA group policy object update workflow for Ansible using IAP"
                ]
              },
              "license": {
                "type": "string",
                "examples": [
                  "Apache-2%2E0"
                ]
              },
              "repository": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "examples": [
                      "git"
                    ]
                  },
                  "url": {
                    "type": "string",
                    "examples": [
                      "https://gitlab%2Ecom:itentialopensource/pre-built-automations/asa-firewall-object-group-update%2Egit"
                    ]
                  }
                },
                "required": []
              },
              "keywords": {
                "type": "array",
                "items": {
                  "type": "string",
                  "examples": [
                    "Itential"
                  ]
                },
                "$id": "keywords"
              },
              "IAPDependencies": {
                "type": "object",
                "properties": {
                  "@itential/app-automation_catalog": {
                    "type": "string",
                    "examples": [
                      "2%2E6%2E3"
                    ]
                  },
                  "@itential/app-json_forms": {
                    "type": "string",
                    "examples": [
                      "1%2E14%2E1"
                    ]
                  },
                  "@itential/app-workflow_engine": {
                    "type": "string",
                    "examples": [
                      "7%2E9%2E4"
                    ]
                  }
                },
                "required": []
              },
              "gitlabId": {
                "type": "integer",
                "examples": [
                  17671583
                ]
              },
              "author": {
                "type": "string",
                "examples": [
                  "Itential Artifacts"
                ]
              },
              "components": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  }
                },
                "$id": "components"
              },
              "readme": {
                "type": "string",
                "examples": [
                  "<!-- This is a comment in md (Markdown) format, it will not be visible to the end user -->\n<!-- Update the below line with your artifact name -->\n# ASA Firewall Object Group Update \n<!-- Add a short description or tag-line -->\nThis artifact contains the Cisco ASA group policy object update workflow for Ansible using IAP%2E  This workflow is designed to create and/or update an existing group object to add and remove hosts on a Cisco ASA firewall physical and virtual devices via Ansible%2E\n​​\n<!-- Leave TOC intact unless you've added or removed headers -->\n## Table of Contents\n​\n- [Overview](#overview)\n- [Features](#features)\n- [Requirements](#requirements)\n- [Future Enhancements](#future-enhancements)\n- [How to Install](#how-to-install)\n- [How to Run](#how-to-run)\n- [Additional Information](#additional-information)\n​\n## Overview\n<!-- Write a few sentences about the artifact and explain the use case(s) -->\n<!-- Ex%2E: The Migration Wizard enables IAP users to conveniently move their automation use cases between their different IAP environments -->\n<!--  (e%2Eg%2E from Dev to Pre-Production or from Lab to Production)%2E  -->\nThis artifact contains the Cisco ASA group policy object update workflow for Ansible using IAP%2E  This workflow is designed to create and/or update an existing group object to add and remove hosts on a Cisco ASA firewall physical and virtual devices via Ansible%2E\n​\nThis solution consists of the following:\n* Main Workflow (**IAP-Artifacts ASA Firewall Group Policy Update**)\n* Automation Catalog entry (**IAP Artifacts ASA Firewall Object Group Update**)\n* JSON Form (**IAP Artifacts ASA Firewall Object Group Update**)\n​\n<!-- Workflow(s) Image Placeholder - TO BE ADDED DIRECTLY TO GITLAB -->\n<table><tr><td>\n  <img src=\"https://gitlab.com/itentialopensource/pre-built-automations/ASA-Firewall-Object-Group-Update/raw/master/images/overview.png\" alt=\"workflow\" width=\"800px\">\n</td></tr></table>\n\n​\n## Features\n<!-- Bullet point highlighting the most exciting features of the artifact -->\n<!-- Ex%2E: * Automatically checks for device type -->\n<!-- Ex%2E: * Displays dry-run to user (asking for confirmation) prior to pushing config to the device -->\n<!-- Ex%2E: * Verifies downloaded file integrity (using md5), will try to download again if failed -->\n  * Group Update Host Addition and Removal%2E\n  * Allow for a rollback in case functionality checks have failed%2E\n  * Zero touch mode of operation is available to select via JSON form%2E\n​\n## Requirements\n<!-- Explain any pre-req%2E Ex%2E: This artifact requires Ansible or NSO (with F5 NED) in order to run -->\nThis artifact requires Ansible, Itential Automation Gateway, and a Cisco ASA device%2E\n​\n## Supported Device Types\n  * Cisco ASA/ASAv\n​\n## Test Environment\n  * Devices Ver%2E:\n    * asa: 9%2E12\n  * IAP Ver%2E 2019%2E3%2E2\n  * Itential Automation Gateway Ver%2E: 2%2E36%2E3+2019%2E3%2E14\n  * Ansible Ver%2E: 2%2E8%2E3\n​\n## Future Enhancements\n<!-- OPTIONAL Mention If the artifact has known limited support%2E Ex%2E: This artifact only support Cisco IOS and XR devices -->\n* This workflow is designed to run only against Ansible devices; don't try to run it against Cisco-ASA devices orchastrated by Cisco NSO%2E\n* Form validation on list of hosts only supports IPv4 addresses\n​\n## How to Install\n<!-- OPTIONAL - Explain if external (to IAP) components are required%2E Ex%2E The ansible roles required for this artifact can be found in www%2Egitlab%2Ecom/itentialopensource%2E%2E%2E%2E%2E%2E   -->\n * To install this artifact in IAP, use **App-Artifact** available in Nexus repo%2E \n <table><tr><td>\n  <img src=\"https://gitlab.com/itentialopensource/pre-built-automations/ASA-Firewall-Object-Group-Update/raw/master/images/install.png\" alt=\"workflow\" width=\"800px\">\n</td></tr></table>\n​\n\n## How to Run\n<!-- Explain what is/are the main entrypoint(s) for this artifact: automation catalog document, workflow builder, postman, etc%2E  -->\nStarting the ASA Firewall Group Policy Update is done via the Automation Catalog%2E Please provide the device, group and hosts in the provided form%2E\n <table><tr><td>\n  <img src=\"https://gitlab.com/itentialopensource/pre-built-automations/ASA-Firewall-Object-Group-Update/raw/master/images/runAutomation.png\" alt=\"workflow\" width=\"800px\">\n</td></tr></table>\n\n## Additional Information\nPlease use your Itential Customer Success account if you need support when using this artifact%2E\n"
                ]
              },
              "manifest": {
                "type": "object",
                "properties": {
                  "bundleName": {
                    "type": "string",
                    "examples": [
                      "ASA Firewall Object Group Update"
                    ]
                  },
                  "fingerprint": {
                    "type": "string",
                    "examples": [
                      "5e7917201b809a70972fc6e5"
                    ]
                  },
                  "createdEpoch": {
                    "type": "string",
                    "examples": [
                      "1584994080756"
                    ]
                  },
                  "artifacts": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "examples": [
                            "IAP Artifacts ASA Firewall Object Group Update"
                          ]
                        },
                        "name": {
                          "type": "string",
                          "examples": [
                            "IAP Artifacts ASA Firewall Object Group Update"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "examples": [
                            "ac-agenda-job"
                          ]
                        },
                        "location": {
                          "type": "string",
                          "examples": [
                            "/bundles/ac_agenda_jobs/IAP Artifacts ASA Firewall Object Group Update%2Ejson"
                          ]
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "entryPoint": {
                              "type": "boolean",
                              "examples": [
                                true,
                                false
                              ]
                            }
                          },
                          "required": []
                        }
                      },
                      "required": []
                    },
                    "$id": "artifacts"
                  }
                },
                "required": []
              }
            },
            "required": []
          }
        ],
        "outgoing": [
          {
            "$id": "output",
            "type": "object",
            "properties": {
              "components": {
                "type": "object",
                "properties": {
                  "ac-agenda-job": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "prit"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f6a4e3657b8159234644bdd"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "automation": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "prit"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f6a4e3657b8159234644bdd"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "workflow": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "prit"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f6a4e3657b8159234644bdd"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "json-forms": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "prit"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f6a4e3657b8159234644bdd"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "forms": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "prit"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f6a4e3657b8159234644bdd"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "template": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "prit"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f6a4e3657b8159234644bdd"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "mop-template": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "prit"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f6a4e3657b8159234644bdd"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "mop-analytic-template": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "prit"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f6a4e3657b8159234644bdd"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "golden-config": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "prit"
                          ]
                        },
                        "treeId": {
                          "type": "string",
                          "examples": [
                            "5f6a4e3657b8159234644bdd"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "transformation": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "prit"
                          ]
                        },
                        "id": {
                          "type": "string",
                          "examples": [
                            "5f6a4e3657b8159234644bdd"
                          ]
                        }
                      },
                      "required": []
                    }
                  }
                },
                "required": []
              }
            },
            "required": []
          }
        ],
        "steps": [
          {
            "id": 2,
            "type": "declaration",
            "library": "Object",
            "method": "new Object",
            "args": [
              {
                "ac-agenda-job": [],
                "automation": [],
                "workflow": [],
                "json-forms": [],
                "forms": [],
                "template": [],
                "mop-template": [],
                "mop-analytic-template": [],
                "golden-config": [],
                "transformation": []
              }
            ],
            "view": {
              "row": 2,
              "col": 1
            }
          },
          {
            "id": 4,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "input",
              "ptr": "/components"
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 3,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 2,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 1,
            "type": "method",
            "library": "Array",
            "method": "reduce",
            "args": [
              null,
              "ƒ_reduce_3",
              null
            ],
            "view": {
              "row": 1,
              "col": 2
            }
          },
          {
            "id": 5,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "output",
              "ptr": "/components"
            }
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "examples": [
                      "workflow"
                    ]
                  },
                  "id": {
                    "type": "string",
                    "examples": [
                      "22a02846-c48a-4ced-9609-4e40c7f0eec1"
                    ],
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string",
                    "examples": [
                      "IAP Artifacts ASA Firewall Object Group Update"
                    ]
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "examples": [
                        "workflow"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "examples": [
                        "22a02846-c48a-4ced-9609-4e40c7f0eec1"
                      ],
                      "format": "uuid"
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "IAP Artifacts ASA Firewall Object Group Update"
                      ]
                    }
                  },
                  "required": []
                },
                "$id": "array",
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "accumulator",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              }
            ],
            "steps": [
              {
                "id": 16,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/id"
                },
                "to": {
                  "location": "function",
                  "name": 15,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 17,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/name"
                },
                "to": {
                  "location": "function",
                  "name": 15,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 18,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/type"
                },
                "to": {
                  "location": "function",
                  "name": 15,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 15,
                "type": "function",
                "function": "userFunc_1",
                "args": [
                  "",
                  "",
                  ""
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 19,
                "type": "method",
                "library": "Object",
                "method": "getProperty",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 20,
                "type": "method",
                "library": "Array",
                "method": "push",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 3
                }
              },
              {
                "id": 21,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 3
                }
              },
              {
                "id": 22,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 19,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 23,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/type"
                },
                "to": {
                  "location": "method",
                  "name": 19,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 24,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 19,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 20,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 25,
                "type": "assign",
                "from": {
                  "location": "function",
                  "name": 15,
                  "ptr": "/return/output"
                },
                "to": {
                  "location": "method",
                  "name": 20,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 26,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 20,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 21,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 27,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 21,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 28,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/type"
                },
                "to": {
                  "location": "method",
                  "name": 21,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 29,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 21,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "accumulator",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "sortComponent",
            "view": {
              "col": 3,
              "row": 4
            },
            "id": "ƒ_reduce_1",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              },
              {
                "type": "object",
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "$id": "array",
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "accumulator",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "function",
                "function": "setIdentifier",
                "args": [],
                "view": {
                  "row": 1,
                  "col": 3
                }
              },
              {
                "id": 2,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  "treeId",
                  "id"
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 3,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  "golden-config"
                ],
                "view": {
                  "row": 2,
                  "col": 1
                }
              },
              {
                "id": 4,
                "type": "method",
                "library": "Object",
                "method": "getProperty",
                "args": [
                  null,
                  "type"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 8,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/return"
                },
                "to": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 10,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 11,
                "type": "method",
                "library": "Object",
                "method": "getProperty",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 4
                }
              },
              {
                "id": 12,
                "type": "method",
                "library": "Array",
                "method": "push",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 4
                }
              },
              {
                "id": 13,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 5
                }
              },
              {
                "id": 14,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 15,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 16,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 12,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 17,
                "type": "assign",
                "from": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/return/output"
                },
                "to": {
                  "location": "method",
                  "name": 12,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 18,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 12,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 19,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 20,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 21,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "accumulator",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "ƒ_reduce_2",
            "view": {
              "col": 5,
              "row": 4
            },
            "id": "ƒ_reduce_2",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              },
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                },
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  }
                },
                "$id": "array",
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "accumulator",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "function",
                "function": "formatComponents",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/type"
                },
                "to": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 4,
                "type": "method",
                "library": "Object",
                "method": "getProperty",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 5,
                "type": "method",
                "library": "Array",
                "method": "push",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 2
                }
              },
              {
                "id": 6,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 3
                }
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 10,
                "type": "assign",
                "from": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/return/output"
                },
                "to": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 11,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 6,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 12,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/type"
                },
                "to": {
                  "location": "method",
                  "name": 6,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 13,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 6,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 14,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 6,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "accumulator",
                  "ptr": ""
                }
              },
              {
                "id": 15,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/type"
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/1/value"
                }
              }
            ],
            "functions": [],
            "name": "ƒ_reduce_3",
            "view": {
              "col": 3,
              "row": 4
            },
            "id": "ƒ_reduce_3",
            "comments": []
          },
          {
            "incoming": [
              {
                "$id": "name",
                "type": "string",
                "examples": [
                  "name"
                ]
              },
              {
                "$id": "_id",
                "type": "string",
                "examples": [
                  "_id"
                ]
              },
              {
                "$id": "type",
                "type": "string",
                "examples": [
                  "fdsa"
                ]
              }
            ],
            "outgoing": [
              {
                "$id": "output",
                "type": "object",
                "properties": {},
                "required": []
              }
            ],
            "steps": [
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "type",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 6,
                "type": "declaration",
                "library": "Object",
                "method": "new Object",
                "args": [
                  "{}"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 9,
                "type": "declaration",
                "library": "Object",
                "method": "new Object",
                "args": [
                  "{}"
                ],
                "view": {
                  "row": 2,
                  "col": 1
                }
              },
              {
                "id": 18,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "name",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 19,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "_id",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 20,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "name",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 10,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 21,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "_id",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 1,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  "transformation"
                ],
                "view": {
                  "row": 3,
                  "col": 1
                }
              },
              {
                "id": 14,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 6,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 15,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 9,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 10,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 7,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "name",
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 10,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "name",
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 2
                }
              },
              {
                "id": 16,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 17,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 10,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 8,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "id",
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 3
                }
              },
              {
                "id": 11,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "_id",
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 3
                }
              },
              {
                "id": 12,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 13,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 3,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 4
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "output",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "nameId",
            "view": {
              "col": 4,
              "row": 4
            },
            "id": "userFunc_1",
            "comments": []
          },
          {
            "incoming": [
              {
                "$id": "input",
                "type": "object",
                "properties": {
                  "ac-agenda-job": {
                    "type": "array"
                  },
                  "workflow": {
                    "type": "array"
                  },
                  "json-forms": {
                    "type": "array"
                  },
                  "forms": {
                    "type": "array"
                  },
                  "template": {
                    "type": "array"
                  },
                  "mop-template": {
                    "type": "array"
                  },
                  "mop-analytic-template": {
                    "type": "array"
                  },
                  "golden-config": {
                    "type": "array"
                  },
                  "transformation": {
                    "type": "array"
                  }
                },
                "required": []
              },
              {
                "$id": "itemToPush",
                "type": "object",
                "properties": {},
                "required": []
              },
              {
                "$id": "type",
                "type": "string",
                "examples": [
                  "type"
                ]
              }
            ],
            "outgoing": [
              {
                "$id": "output",
                "type": "object",
                "properties": {
                  "ac-agenda-job": {
                    "type": "array"
                  },
                  "workflow": {
                    "type": "array"
                  },
                  "json-forms": {
                    "type": "array"
                  },
                  "forms": {
                    "type": "array"
                  },
                  "template": {
                    "type": "array"
                  },
                  "mop-template": {
                    "type": "array"
                  },
                  "mop-analytic-template": {
                    "type": "array"
                  },
                  "golden-config": {
                    "type": "array"
                  },
                  "transformation": {
                    "type": "array"
                  }
                },
                "required": []
              }
            ],
            "steps": [
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "type",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "itemToPush",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "type",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 12,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "input",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 13,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "input",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 1,
                "type": "method",
                "library": "Object",
                "method": "getProperty",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 1
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 4,
                "type": "method",
                "library": "Array",
                "method": "push",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 10,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 7,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 3
                }
              },
              {
                "id": 14,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "output",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "pushComponent",
            "view": {
              "col": 3,
              "row": 4
            },
            "id": "userFunc_2",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              },
              {
                "type": "object",
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "$id": "array",
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "accumulator",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "accumulator"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "function",
                "function": "setIdentifier",
                "args": [
                  "",
                  "",
                  ""
                ],
                "view": {
                  "row": 1,
                  "col": 3
                }
              },
              {
                "id": 2,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  "treeId",
                  "id"
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 3,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  "golden-config"
                ],
                "view": {
                  "row": 2,
                  "col": 1
                }
              },
              {
                "id": 4,
                "type": "method",
                "library": "Object",
                "method": "getProperty",
                "args": [
                  null,
                  "type"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 8,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/return"
                },
                "to": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 11,
                "type": "method",
                "library": "Object",
                "method": "getProperty",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 4
                }
              },
              {
                "id": 12,
                "type": "method",
                "library": "Array",
                "method": "push",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 4
                }
              },
              {
                "id": 13,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 5
                }
              },
              {
                "id": 14,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 15,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 16,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 12,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 17,
                "type": "assign",
                "from": {
                  "location": "function",
                  "name": 1,
                  "ptr": "/return/output"
                },
                "to": {
                  "location": "method",
                  "name": 12,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 18,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 12,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 19,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "accumulator",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 20,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 21,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "accumulator",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "ƒ_reduce_2 (1)",
            "view": {
              "col": 5,
              "row": 4
            },
            "id": "ƒ_reduce_2 (1)",
            "comments": []
          },
          {
            "incoming": [
              {
                "$id": "idType",
                "type": "string"
              },
              {
                "$id": "componentObject",
                "type": "object"
              },
              {
                "$id": "type",
                "type": "string"
              }
            ],
            "outgoing": [
              {
                "$id": "output",
                "type": "object"
              }
            ],
            "steps": [
              {
                "id": 2,
                "type": "method",
                "library": "Object",
                "method": "getProperty",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 1
                }
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "componentObject",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "idType",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 6,
                "type": "method",
                "library": "Object",
                "method": "deleteProperty",
                "args": [
                  null,
                  "type"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "componentObject",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 6,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 8,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 4
                }
              },
              {
                "id": 9,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  "transformation"
                ],
                "view": {
                  "row": 3,
                  "col": 1
                }
              },
              {
                "id": 10,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "type",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 9,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 11,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 9,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 12,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 6,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 13,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 3
                }
              },
              {
                "id": 15,
                "type": "method",
                "library": "Object",
                "method": "deleteProperty",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 3
                }
              },
              {
                "id": 16,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 15,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 17,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 15,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 18,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  "golden-config"
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 19,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "type",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 18,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 20,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  "treeId",
                  "_id"
                ],
                "view": {
                  "row": 1,
                  "col": 3
                }
              },
              {
                "id": 21,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 18,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 20,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 22,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 20,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 23,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 6,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 24,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 25,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "idType",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 15,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 26,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "output",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "setIdentifier",
            "view": {
              "col": 4,
              "row": 4
            },
            "id": "setIdentifier",
            "comments": []
          },
          {
            "incoming": [
              {
                "$id": "componentObject",
                "type": "object"
              },
              {
                "$id": "type",
                "type": "string"
              }
            ],
            "outgoing": [
              {
                "$id": "output",
                "type": "object"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "method",
                "library": "Object",
                "method": "deleteProperty",
                "args": [
                  null,
                  "type"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "componentObject",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 3,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  "transformation"
                ],
                "view": {
                  "row": 2,
                  "col": 1
                }
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "type",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 5,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  "golden-config"
                ],
                "view": {
                  "row": 3,
                  "col": 1
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "type",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 7,
                "type": "method",
                "library": "Logical",
                "method": "or",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 2
                }
              },
              {
                "id": 8,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 10,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 4
                }
              },
              {
                "id": 11,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 10,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 12,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 10,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 13,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "_id",
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 3
                }
              },
              {
                "id": 14,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 15,
                "type": "method",
                "library": "Object",
                "method": "getProperty",
                "args": [
                  null,
                  "id"
                ],
                "view": {
                  "row": 3,
                  "col": 2
                }
              },
              {
                "id": 16,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 15,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 17,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 15,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 18,
                "type": "method",
                "library": "Object",
                "method": "deleteProperty",
                "args": [
                  null,
                  "id"
                ],
                "view": {
                  "row": 3,
                  "col": 4
                }
              },
              {
                "id": 19,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 18,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 20,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 18,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 10,
                  "ptr": "/args/2/value"
                }
              },
              {
                "id": 21,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 10,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "output",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "formatComponents",
            "view": {
              "col": 4,
              "row": 4
            },
            "id": "formatComponents",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 2,
          "row": 4
        },
        "created": "2025-02-06T18:32:41.002Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:41.002Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "6227a41704a9540111aef712",
        "name": "Prebuilt Promotion Version Control Instance Filter",
        "description": "",
        "incoming": [
          {
            "$id": "results",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {}
            },
            "required": []
          }
        ],
        "outgoing": [
          {
            "$id": "myresults",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "steps": [
          {
            "id": 8,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "results",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 7,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 7,
            "type": "method",
            "library": "Array",
            "method": "filter",
            "args": [
              null,
              "queryMatchingAdapters"
            ],
            "view": {
              "row": 1,
              "col": 1
            },
            "context": "#"
          },
          {
            "id": 9,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 7,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 4,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 4,
            "type": "method",
            "library": "Array",
            "method": "map",
            "args": [
              null,
              "standardizePropertyNames"
            ],
            "view": {
              "row": 1,
              "col": 2
            }
          },
          {
            "id": 6,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 4,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "myresults",
              "ptr": ""
            }
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "type": "array",
                "$id": "array",
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "newValue",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "editable": true,
                "$id": "newValue"
              }
            ],
            "steps": [
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 1,
                "type": "method",
                "library": "Object",
                "method": "optional chaining",
                "args": [
                  null,
                  "id"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "newValue",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "standardizePropertyNames",
            "view": {
              "col": 1,
              "row": 4
            },
            "id": "standardizePropertyNames",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": "object",
                "properties": {},
                "$id": "element"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {}
                },
                "required": [],
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "return",
                "type": "boolean",
                "$id": "return"
              }
            ],
            "steps": [
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "element",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 5,
                "type": "declaration",
                "library": "Array",
                "method": "new Array",
                "args": [
                  "@itentialopensource/adapter-gitlab",
                  "@itentialopensource/adapter-bitbucket",
                  "@itentialopensource/adapter-github"
                ],
                "view": {
                  "row": 2,
                  "col": 2
                },
                "context": "#",
                "polymorphIndex": 0
              },
              {
                "id": 1,
                "type": "method",
                "library": "Object",
                "method": "getProperty",
                "args": [
                  null,
                  "package_id"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                },
                "context": "#"
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 5,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 6,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 3,
                "type": "method",
                "library": "Logical",
                "method": "nullish",
                "args": [
                  null,
                  "none"
                ],
                "view": {
                  "row": 1,
                  "col": 2
                },
                "context": "#"
              },
              {
                "id": 8,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 6,
                  "ptr": "/args/1/value"
                },
                "context": "#"
              },
              {
                "id": 6,
                "type": "method",
                "library": "Array",
                "method": "includes",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 3
                },
                "context": "#"
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 6,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "return",
                  "ptr": ""
                },
                "context": "#"
              }
            ],
            "functions": [],
            "name": "queryMatchingAdapters",
            "view": {
              "col": 3,
              "row": 4
            },
            "id": "queryMatchingAdapters",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 2,
          "row": 5
        },
        "created": "2025-02-06T18:32:41.117Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:41.117Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "6234aa0b329ee901170bd820",
        "name": "buildGETAdapterByNameURI",
        "description": "",
        "incoming": [
          {
            "$id": "adapterName",
            "type": "string"
          }
        ],
        "outgoing": [
          {
            "$id": "getAdapterByNameURI",
            "type": "string"
          }
        ],
        "steps": [
          {
            "id": 1,
            "type": "declaration",
            "library": "String",
            "method": "new String",
            "args": [
              "/adapters?"
            ],
            "view": {
              "row": 1,
              "col": 1
            }
          },
          {
            "id": 2,
            "type": "method",
            "library": "String",
            "method": "concat",
            "args": [
              null,
              "contains=",
              null,
              "&containsField=name"
            ],
            "view": {
              "row": 2,
              "col": 2
            }
          },
          {
            "id": 4,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 2,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 5,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "adapterName",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 2,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 6,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 2,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "getAdapterByNameURI",
              "ptr": ""
            }
          }
        ],
        "functions": [],
        "comments": [],
        "view": {
          "col": 3,
          "row": 5
        },
        "created": "2025-02-06T18:32:41.125Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:41.125Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "62322beada0c6c470881bdaf",
        "name": "setRepositoryInPackageJson",
        "description": "",
        "incoming": [
          {
            "$id": "originalPackageJson",
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "author": {
                "type": "string",
                "examples": [
                  "Itential Automation Platform"
                ]
              },
              "version": {
                "type": "string",
                "examples": [
                  "0%2E0%2E0"
                ]
              },
              "description": {
                "type": "string",
                "examples": [
                  "Checked in new artifact"
                ]
              },
              "scripts": {
                "type": "object",
                "properties": {
                  "test": {
                    "type": "string",
                    "examples": [
                      "echo \"Error: no test specified\" && exit 1"
                    ]
                  },
                  "deploy": {
                    "type": "string",
                    "examples": [
                      "echo not needed npm publish --access=public --registry=http://registry%2Enpmjs%2Eorg"
                    ]
                  },
                  "validateSchema": {
                    "type": "string",
                    "examples": [
                      "node test/manifestTester%2Ejs manifest%2Ejson manifest-schema%2Ejson"
                    ]
                  },
                  "validateSchemaLinks": {
                    "type": "string",
                    "examples": [
                      "node test/manifestLinkTester%2Ejs manifest%2Ejson"
                    ]
                  },
                  "generateImageLinks": {
                    "type": "string",
                    "examples": [
                      "node utils/generateImageLinks%2Ejs"
                    ]
                  }
                },
                "required": []
              },
              "repository": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "examples": [
                      "gitlab"
                    ]
                  },
                  "hostname": {
                    "type": "string",
                    "examples": [
                      "gitlab%2Ecom"
                    ]
                  },
                  "path": {
                    "type": "string",
                    "examples": [
                      "itentialopensource/pre-built-automations"
                    ]
                  }
                },
                "required": []
              },
              "keywords": {
                "type": "array",
                "items": {
                  "type": "string",
                  "examples": [
                    "Itential"
                  ]
                },
                "$id": "keywords"
              },
              "license": {
                "type": "string",
                "examples": [
                  "Apache-2%2E0"
                ]
              },
              "devDependencies": {
                "type": "object",
                "properties": {
                  "r2": {
                    "type": "string",
                    "examples": [
                      "^2%2E0%2E1"
                    ]
                  },
                  "ajv": {
                    "type": "string",
                    "examples": [
                      "6%2E10%2E0"
                    ]
                  },
                  "better-ajv-errors": {
                    "type": "string",
                    "examples": [
                      "^0%2E6%2E1"
                    ]
                  },
                  "fs-extra": {
                    "type": "string",
                    "examples": [
                      "^7%2E0%2E1"
                    ]
                  }
                },
                "required": []
              }
            },
            "required": []
          },
          {
            "$id": "adapterType",
            "type": "string",
            "examples": [
              "gitlab"
            ]
          },
          {
            "$id": "groupPath",
            "type": "string",
            "examples": [
              "itential/dsup"
            ]
          },
          {
            "$id": "adapterProperties",
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "gitlab2"
                          ]
                        },
                        "model": {
                          "type": "string",
                          "examples": [
                            "@itentialopensource/adapter-gitlab"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "examples": [
                            "Adapter"
                          ]
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "examples": [
                                "gitlab2"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "examples": [
                                "Gitlab"
                              ]
                            },
                            "properties": {
                              "type": "object",
                              "properties": {
                                "host": {
                                  "type": "string",
                                  "examples": [
                                    "docker%2Edsup%2Eitential%2Eio"
                                  ]
                                },
                                "port": {
                                  "type": "integer",
                                  "examples": [
                                    8929
                                  ]
                                }
                              },
                              "required": []
                            }
                          },
                          "required": []
                        },
                        "isEncrypted": {
                          "type": "boolean",
                          "examples": [
                            true,
                            false
                          ]
                        },
                        "virtual": {
                          "type": "boolean",
                          "examples": [
                            true,
                            false
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "required": []
                },
                "$id": "results"
              },
              "total": {
                "type": "integer",
                "examples": [
                  1
                ]
              }
            },
            "required": []
          }
        ],
        "outgoing": [
          {
            "$id": "updatedPackageJson",
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "author": {
                "type": "string",
                "examples": [
                  "Itential Automation Platform"
                ]
              },
              "version": {
                "type": "string",
                "examples": [
                  "0%2E0%2E0"
                ]
              },
              "description": {
                "type": "string",
                "examples": [
                  "Checked in new artifact"
                ]
              },
              "scripts": {
                "type": "object",
                "properties": {
                  "test": {
                    "type": "string",
                    "examples": [
                      "echo \"Error: no test specified\" && exit 1"
                    ]
                  },
                  "deploy": {
                    "type": "string",
                    "examples": [
                      "echo not needed npm publish --access=public --registry=http://registry%2Enpmjs%2Eorg"
                    ]
                  },
                  "validateSchema": {
                    "type": "string",
                    "examples": [
                      "node test/manifestTester%2Ejs manifest%2Ejson manifest-schema%2Ejson"
                    ]
                  },
                  "validateSchemaLinks": {
                    "type": "string",
                    "examples": [
                      "node test/manifestLinkTester%2Ejs manifest%2Ejson"
                    ]
                  },
                  "generateImageLinks": {
                    "type": "string",
                    "examples": [
                      "node utils/generateImageLinks%2Ejs"
                    ]
                  }
                },
                "required": []
              },
              "repository": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "examples": [
                      "gitlab"
                    ]
                  },
                  "hostname": {
                    "type": "string",
                    "examples": [
                      "gitlab%2Ecom"
                    ]
                  },
                  "path": {
                    "type": "string",
                    "examples": [
                      "itentialopensource/pre-built-automations"
                    ]
                  }
                },
                "required": []
              },
              "keywords": {
                "type": "array",
                "items": {
                  "type": "string",
                  "examples": [
                    "Itential"
                  ]
                }
              },
              "license": {
                "type": "string",
                "examples": [
                  "Apache-2%2E0"
                ]
              },
              "devDependencies": {
                "type": "object",
                "properties": {
                  "r2": {
                    "type": "string",
                    "examples": [
                      "^2%2E0%2E1"
                    ]
                  },
                  "ajv": {
                    "type": "string",
                    "examples": [
                      "6%2E10%2E0"
                    ]
                  },
                  "better-ajv-errors": {
                    "type": "string",
                    "examples": [
                      "^0%2E6%2E1"
                    ]
                  },
                  "fs-extra": {
                    "type": "string",
                    "examples": [
                      "^7%2E0%2E1"
                    ]
                  }
                },
                "required": []
              }
            },
            "required": []
          }
        ],
        "steps": [
          {
            "id": 1,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "repository",
              null
            ],
            "view": {
              "row": 2,
              "col": 2
            }
          },
          {
            "id": 2,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "originalPackageJson",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 3,
            "type": "declaration",
            "library": "Object",
            "method": "new Object",
            "args": [
              {}
            ],
            "view": {
              "row": 3,
              "col": 1
            }
          },
          {
            "id": 4,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "type",
              null
            ],
            "view": {
              "row": 3,
              "col": 2
            }
          },
          {
            "id": 5,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 3,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 4,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 6,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "adapterType",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 4,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 7,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "hostname",
              null
            ],
            "view": {
              "row": 3,
              "col": 3
            }
          },
          {
            "id": 8,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 4,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 7,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 9,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "path",
              null
            ],
            "view": {
              "row": 3,
              "col": 4
            }
          },
          {
            "id": 10,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 7,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 9,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 11,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "groupPath",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 9,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 12,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 9,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 13,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "updatedPackageJson",
              "ptr": ""
            }
          },
          {
            "id": 14,
            "type": "method",
            "library": "Array",
            "method": "getIndex",
            "args": [
              null,
              0
            ],
            "view": {
              "row": 5,
              "col": 1
            }
          },
          {
            "id": 15,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "adapterProperties",
              "ptr": "/results"
            },
            "to": {
              "location": "method",
              "name": 14,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 16,
            "type": "method",
            "library": "Object",
            "method": "optional chaining",
            "args": [
              null,
              "data",
              "properties",
              "properties",
              "host"
            ],
            "view": {
              "row": 5,
              "col": 2
            }
          },
          {
            "id": 17,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 14,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 16,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 18,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 16,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 7,
              "ptr": "/args/2/value"
            }
          }
        ],
        "functions": [],
        "comments": [],
        "view": {
          "col": 4,
          "row": 6
        },
        "created": "2025-02-06T18:32:41.068Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:41.068Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "6075d17e8c016f0098c72850",
        "name": "filterBodyGitlab",
        "description": "",
        "incoming": [
          {
            "$id": "bodyFromGetCall",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "pathParam": {
                  "type": "string",
                  "examples": [
                    "bundles"
                  ]
                },
                "id": {
                  "type": "string",
                  "examples": [
                    "fbc1fb7a78692930919164dc83bae2da0aee6a8d"
                  ]
                },
                "name": {
                  "type": "string",
                  "examples": [
                    "bundles"
                  ]
                },
                "type": {
                  "type": "string",
                  "examples": [
                    "tree"
                  ]
                },
                "mode": {
                  "type": "string",
                  "examples": [
                    "040000"
                  ]
                }
              },
              "required": []
            }
          }
        ],
        "outgoing": [
          {
            "$id": "filteredBody",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "examples": [
                    "791bb17eb88379d50a494b08692c3ffd1d3b1731"
                  ]
                },
                "name": {
                  "type": "string",
                  "examples": [
                    "bundles"
                  ]
                },
                "type": {
                  "type": "string",
                  "examples": [
                    "tree"
                  ]
                },
                "path": {
                  "type": "string",
                  "examples": [
                    "bundles"
                  ]
                },
                "mode": {
                  "type": "string",
                  "examples": [
                    "040000"
                  ]
                }
              },
              "required": []
            }
          }
        ],
        "steps": [
          {
            "id": 2,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "bodyFromGetCall",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 1,
            "type": "method",
            "library": "Array",
            "method": "filter",
            "args": [
              null,
              "ƒ_query_2"
            ],
            "view": {
              "row": 1,
              "col": 1
            }
          },
          {
            "id": 3,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "filteredBody",
              "ptr": ""
            }
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "examples": [
                      "791bb17eb88379d50a494b08692c3ffd1d3b1731"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "examples": [
                      "bundles"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "examples": [
                      "tree"
                    ]
                  },
                  "path": {
                    "type": "string",
                    "examples": [
                      "bundles"
                    ]
                  },
                  "mode": {
                    "type": "string",
                    "examples": [
                      "040000"
                    ]
                  }
                },
                "required": [],
                "$id": "element"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "examples": [
                        "791bb17eb88379d50a494b08692c3ffd1d3b1731"
                      ]
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "bundles"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "examples": [
                        "tree"
                      ]
                    },
                    "path": {
                      "type": "string",
                      "examples": [
                        "bundles"
                      ]
                    },
                    "mode": {
                      "type": "string",
                      "examples": [
                        "040000"
                      ]
                    }
                  },
                  "required": []
                },
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "return",
                "type": "boolean",
                "$id": "return"
              }
            ],
            "steps": [
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "element",
                  "ptr": "/path"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "element",
                  "ptr": "/path"
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "element",
                  "ptr": "/type"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 1,
                "type": "method",
                "library": "String",
                "method": "includes",
                "args": [
                  null,
                  "bundles/",
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 2,
                "type": "method",
                "library": "String",
                "method": "includes",
                "args": [
                  null,
                  "manifest.json",
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 2
                }
              },
              {
                "id": 3,
                "type": "method",
                "library": "String",
                "method": "includes",
                "args": [
                  null,
                  "blob",
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 2
                }
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 10,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 11,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 8,
                "type": "method",
                "library": "Logical",
                "method": "or",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 3
                }
              },
              {
                "id": 12,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 7,
                "type": "method",
                "library": "Logical",
                "method": "and",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 3
                }
              },
              {
                "id": 13,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 7,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "return",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "ƒ_query_1",
            "view": {
              "col": 3,
              "row": 6
            },
            "id": "ƒ_query_1",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "pathParam": {
                    "type": "string",
                    "examples": [
                      "bundles"
                    ]
                  },
                  "id": {
                    "type": "string",
                    "examples": [
                      "fbc1fb7a78692930919164dc83bae2da0aee6a8d"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "examples": [
                      "bundles"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "examples": [
                      "tree"
                    ]
                  },
                  "mode": {
                    "type": "string",
                    "examples": [
                      "040000"
                    ]
                  }
                },
                "required": [],
                "$id": "element"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "pathParam": {
                      "type": "string",
                      "examples": [
                        "bundles"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "examples": [
                        "fbc1fb7a78692930919164dc83bae2da0aee6a8d"
                      ]
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "bundles"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "examples": [
                        "tree"
                      ]
                    },
                    "mode": {
                      "type": "string",
                      "examples": [
                        "040000"
                      ]
                    }
                  },
                  "required": []
                },
                "optional": true
              }
            ],
            "outgoing": [
              {
                "title": "return",
                "type": "boolean",
                "$id": "return"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "method",
                "library": "String",
                "method": "includes",
                "args": [
                  null,
                  "bundles/",
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 1
                }
              },
              {
                "id": 2,
                "type": "method",
                "library": "String",
                "method": "includes",
                "args": [
                  null,
                  "manifest.json",
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 1
                }
              },
              {
                "id": 3,
                "type": "method",
                "library": "String",
                "method": "includes",
                "args": [
                  null,
                  "blob",
                  null
                ],
                "view": {
                  "row": 4,
                  "col": 1
                }
              },
              {
                "id": 4,
                "type": "method",
                "library": "Logical",
                "method": "and",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 3
                }
              },
              {
                "id": 5,
                "type": "method",
                "library": "Logical",
                "method": "or",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "element",
                  "ptr": "/pathParam"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "element",
                  "ptr": "/pathParam"
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 8,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "element",
                  "ptr": "/type"
                },
                "to": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 10,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 12,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 3,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 13,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "return",
                  "ptr": ""
                }
              },
              {
                "id": 14,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  "README.md"
                ],
                "view": {
                  "row": 3,
                  "col": 1
                },
                "context": "#"
              },
              {
                "id": 15,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "element",
                  "ptr": "/pathParam"
                },
                "to": {
                  "location": "method",
                  "name": 14,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 16,
                "type": "method",
                "library": "Logical",
                "method": "or",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 2
                },
                "context": "#"
              },
              {
                "id": 17,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 16,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 18,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 14,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 16,
                  "ptr": "/args/1/value"
                },
                "context": "#"
              },
              {
                "id": 19,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 16,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              }
            ],
            "functions": [],
            "name": "ƒ_query_2",
            "view": {
              "col": 3,
              "row": 5
            },
            "id": "ƒ_query_2",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 1,
          "row": 6
        },
        "created": "2025-02-06T18:32:41.075Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:41.075Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "63effc7c2680b700eb4eeefa",
        "name": "createNewProjectRequest",
        "description": "Creates request object for new project call",
        "incoming": [
          {
            "$id": "foundGroups",
            "type": "object",
            "properties": {
              "response": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "examples": [
                        1
                      ]
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "ARCHIVE"
                      ]
                    },
                    "path": {
                      "type": "string",
                      "examples": [
                        "archive"
                      ]
                    },
                    "full_name": {
                      "type": "string",
                      "examples": [
                        "Itential Open Source / pre-built automations"
                      ]
                    },
                    "full_path": {
                      "type": "string",
                      "examples": [
                        "itentialopensource/pre-built-automations"
                      ]
                    },
                    "parent_id": {
                      "type": "integer",
                      "examples": [
                        6535607
                      ]
                    }
                  },
                  "required": []
                }
              }
            },
            "required": []
          },
          {
            "$id": "path",
            "type": "string",
            "examples": [
              "test"
            ]
          },
          {
            "$id": "projectName",
            "type": "string"
          }
        ],
        "outgoing": [
          {
            "$id": "createProjectRequest",
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "namespace_id": {
                "type": [
                  "integer",
                  "number"
                ]
              }
            },
            "required": []
          }
        ],
        "steps": [
          {
            "id": 1,
            "type": "method",
            "library": "Array",
            "method": "find",
            "args": [
              null,
              "findGroupByPath",
              null
            ],
            "view": {
              "row": 1,
              "col": 1
            },
            "context": "#"
          },
          {
            "id": 2,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "foundGroups",
              "ptr": "/response"
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 3,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "path",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/2/value"
            },
            "context": "#"
          },
          {
            "id": 4,
            "type": "method",
            "library": "WorkFlowEngine",
            "method": "query",
            "args": [
              true,
              "id",
              null
            ],
            "view": {
              "row": 1,
              "col": 2
            },
            "context": "#"
          },
          {
            "id": 5,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 4,
              "ptr": "/args/2/value"
            },
            "context": "#"
          },
          {
            "id": 6,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 4,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "createProjectRequest",
              "ptr": "/namespace_id"
            },
            "context": "#"
          },
          {
            "id": 7,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "projectName",
              "ptr": ""
            },
            "to": {
              "location": "outgoing",
              "name": "createProjectRequest",
              "ptr": "/name"
            },
            "context": "#"
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "examples": [
                      1
                    ]
                  },
                  "name": {
                    "type": "string",
                    "examples": [
                      "ARCHIVE"
                    ]
                  },
                  "path": {
                    "type": "string",
                    "examples": [
                      "archive"
                    ]
                  },
                  "full_name": {
                    "type": "string",
                    "examples": [
                      "Itential Open Source / pre-built automations"
                    ]
                  },
                  "full_path": {
                    "type": "string",
                    "examples": [
                      "itentialopensource/pre-built-automations"
                    ]
                  },
                  "parent_id": {
                    "type": "integer",
                    "examples": [
                      6535607
                    ]
                  }
                },
                "required": [],
                "$id": "element"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "examples": [
                        1
                      ]
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "ARCHIVE"
                      ]
                    },
                    "path": {
                      "type": "string",
                      "examples": [
                        "archive"
                      ]
                    },
                    "full_name": {
                      "type": "string",
                      "examples": [
                        "Itential Open Source / pre-built automations"
                      ]
                    },
                    "full_path": {
                      "type": "string",
                      "examples": [
                        "itentialopensource/pre-built-automations"
                      ]
                    },
                    "parent_id": {
                      "type": "integer",
                      "examples": [
                        6535607
                      ]
                    }
                  },
                  "required": []
                },
                "$id": "array",
                "optional": true
              },
              {
                "$id": "constantValue1",
                "type": "string",
                "isConstValue": true
              }
            ],
            "outgoing": [
              {
                "title": "return",
                "type": "boolean",
                "$id": "return"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 1
                },
                "context": "#"
              },
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "element",
                  "ptr": "/full_path"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "constantValue1",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/1/value"
                },
                "context": "#"
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "return",
                  "ptr": ""
                },
                "context": "#"
              }
            ],
            "functions": [],
            "name": "findGroupByPath",
            "view": {
              "col": 1,
              "row": 4
            },
            "id": "findGroupByPath",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 2,
          "row": 6
        },
        "created": "2025-02-06T18:32:41.081Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:41.081Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "605b870f21c795008dc26119",
        "name": "createArtifactForPublish",
        "description": "",
        "incoming": [
          {
            "$id": "AEartifactInfo",
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "examples": [
                  "5f7c62f0b80b0a2a91782437"
                ]
              },
              "name": {
                "type": "string",
                "examples": [
                  "@itentialopensource/zackall"
                ]
              },
              "version": {
                "type": "string",
                "examples": [
                  "0.0.1"
                ]
              },
              "description": {
                "type": "string",
                "examples": [
                  "zackAll"
                ]
              },
              "author": {
                "type": "string",
                "examples": [
                  "Itential Artifacts"
                ]
              },
              "repository": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "examples": [
                      "git"
                    ]
                  },
                  "url": {
                    "type": "string",
                    "examples": [
                      "https://gitlab.com/itentialopensource/pre-built-automations/"
                    ]
                  }
                },
                "required": []
              },
              "license": {
                "type": "string",
                "examples": [
                  "Apache-2.0"
                ]
              },
              "keywords": {
                "type": "array",
                "items": {
                  "type": "string",
                  "examples": [
                    "Itential"
                  ]
                },
                "$id": "keywords"
              },
              "IAPDependencies": {
                "type": "object",
                "properties": {
                  "@itential/app-automation_catalog": {
                    "type": "string"
                  },
                  "@itential/app-json_forms": {
                    "type": "string"
                  },
                  "@itential/app-workflow_engine": {
                    "type": "string"
                  },
                  "@itential/app-mop": {
                    "type": "string"
                  },
                  "@itential/app-template_builder": {
                    "type": "string"
                  },
                  "@itential/app-form_builder": {
                    "type": "string"
                  }
                },
                "required": []
              },
              "gitlabId": {
                "type": "integer",
                "examples": [
                  1601987312797
                ]
              },
              "components": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "examples": [
                        "ac-agenda-job"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "examples": [
                        "5f7c622d038374d99a024d66"
                      ]
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "zackAll"
                      ]
                    }
                  },
                  "required": []
                },
                "$id": "components"
              },
              "readme": {
                "type": "string",
                "examples": [
                  "zackAll"
                ]
              },
              "manifest": {
                "type": "object",
                "properties": {
                  "bundleName": {
                    "type": "string",
                    "examples": [
                      "ZackAll"
                    ]
                  },
                  "fingerprint": {
                    "type": "string",
                    "examples": [
                      "5f7c62f077c8212a9141d822"
                    ]
                  },
                  "createdEpoch": {
                    "type": "string",
                    "examples": [
                      "1601987312364"
                    ]
                  },
                  "artifacts": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "examples": [
                            "ac-agenda-job"
                          ]
                        },
                        "location": {
                          "type": "string",
                          "examples": [
                            "/bundles/ac_agenda_jobs/zackAll.json"
                          ]
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "entryPoint": {
                              "type": "boolean",
                              "examples": [
                                true,
                                false
                              ]
                            }
                          },
                          "required": []
                        }
                      },
                      "required": []
                    },
                    "$id": "artifacts"
                  }
                },
                "required": []
              }
            },
            "required": []
          },
          {
            "$id": "formOutput",
            "type": "object",
            "properties": {
              "components": {
                "type": "object",
                "properties": {
                  "catalogAutomations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f7c622d038374d99a024d66"
                          ]
                        }
                      },
                      "required": []
                    },
                    "$id": "catalogAutomations"
                  },
                  "operationsAutomations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f7c622d038374d99a024d66"
                          ]
                        }
                      },
                      "required": []
                    },
                    "$id": "operationsAutomations"
                  },
                  "workflows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        }
                      },
                      "required": []
                    },
                    "$id": "workflows"
                  },
                  "jsonForms": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        }
                      },
                      "required": []
                    },
                    "$id": "jsonForms"
                  },
                  "templates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        }
                      },
                      "required": []
                    },
                    "$id": "templates"
                  },
                  "forms": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "Demo"
                          ]
                        }
                      },
                      "required": []
                    },
                    "$id": "forms"
                  },
                  "commandTemplates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        }
                      },
                      "required": []
                    },
                    "$id": "commandTemplates"
                  },
                  "analyticTemplates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        }
                      },
                      "required": []
                    },
                    "$id": "analyticTemplates"
                  },
                  "transformations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "examples": [
                            "5f7c62b43451a606c2fb0305"
                          ]
                        }
                      },
                      "required": []
                    },
                    "$id": "transformations"
                  },
                  "goldenConfigTrees": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "treeId": {
                          "type": "string",
                          "examples": [
                            "5f7c62b43451a606c2fb0305"
                          ]
                        }
                      },
                      "required": []
                    },
                    "$id": "goldenConfigTrees"
                  }
                },
                "required": []
              }
            },
            "required": []
          },
          {
            "$id": "discovery",
            "type": "object",
            "properties": {
              "componentMap": {
                "type": "object",
                "properties": {
                  "ac-agenda-job": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f7c622d038374d99a024d66"
                          ]
                        }
                      },
                      "required": []
                    },
                    "$id": "ac-agenda-job"
                  },
                  "automation": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f7c622d038374d99a024d66"
                          ]
                        }
                      },
                      "required": []
                    },
                    "$id": "automation"
                  },
                  "workflow": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "parent": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "zackAll"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "ac-agenda-job"
                                ]
                              }
                            },
                            "required": []
                          },
                          "$id": "parent"
                        }
                      },
                      "required": []
                    },
                    "$id": "workflow"
                  },
                  "json-forms": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f7c6221e607880ade9b11bb"
                          ]
                        },
                        "parent": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "zackAll"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "ac-agenda-job"
                                ]
                              }
                            },
                            "required": []
                          },
                          "$id": "parent"
                        }
                      },
                      "required": []
                    },
                    "$id": "json-forms"
                  },
                  "mop-template": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "parent": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "zackAll"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "workflow"
                                ]
                              }
                            },
                            "required": []
                          },
                          "$id": "parent"
                        }
                      },
                      "required": []
                    },
                    "$id": "mop-template"
                  },
                  "template": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "parent": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "zackAll"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "workflow"
                                ]
                              }
                            },
                            "required": []
                          },
                          "$id": "parent"
                        }
                      },
                      "required": []
                    },
                    "$id": "template"
                  },
                  "mop-analytic-template": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "parent": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "zackAll"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "workflow"
                                ]
                              }
                            },
                            "required": []
                          },
                          "$id": "parent"
                        }
                      },
                      "required": []
                    },
                    "$id": "mop-analytic-template"
                  },
                  "forms": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "parent": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "zackAll"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "workflow"
                                ]
                              }
                            },
                            "required": []
                          },
                          "$id": "parent"
                        }
                      },
                      "required": []
                    },
                    "$id": "forms"
                  },
                  "transformation": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "examples": [
                            "5f7c62b43451a606c2fb0305"
                          ]
                        },
                        "parent": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "zackAll"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "workflow"
                                ]
                              }
                            },
                            "required": []
                          },
                          "$id": "parent"
                        }
                      },
                      "required": []
                    },
                    "$id": "transformation"
                  },
                  "golden-config": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "treeId": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "parent": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "zackAll"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "workflow"
                                ]
                              }
                            },
                            "required": []
                          },
                          "$id": "parent"
                        }
                      },
                      "required": []
                    },
                    "$id": "golden-config"
                  }
                },
                "required": []
              },
              "dependencies": {
                "type": "array",
                "items": {
                  "type": "string",
                  "examples": [
                    "@itential/app-automation_catalog"
                  ]
                },
                "$id": "dependencies"
              },
              "invalidComponents": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "examples": [
                        "golden-config"
                      ]
                    },
                    "component": {
                      "type": "object",
                      "properties": {
                        "treeId": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "parent": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "zackAll"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "workflow"
                                ]
                              }
                            },
                            "required": []
                          },
                          "$id": "parent"
                        }
                      },
                      "required": []
                    }
                  },
                  "required": []
                },
                "$id": "invalidComponents"
              }
            },
            "required": []
          }
        ],
        "outgoing": [
          {
            "$id": "mata",
            "type": "object",
            "properties": {
              "metadata": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "examples": [
                      "ZackAll"
                    ]
                  },
                  "description": {
                    "type": "string",
                    "examples": [
                      "zackAll"
                    ]
                  },
                  "contributor": {
                    "type": "string",
                    "examples": [
                      "zackAll"
                    ]
                  },
                  "readme": {
                    "type": "string",
                    "examples": [
                      "zackAll"
                    ]
                  },
                  "license": {
                    "type": "string"
                  },
                  "categories": {
                    "type": "array"
                  },
                  "keywords": {
                    "type": "array"
                  },
                  "dependencies": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "examples": [
                        "@itential/app-automation_catalog"
                      ]
                    }
                  }
                },
                "required": []
              },
              "components": {
                "type": "object",
                "properties": {
                  "ac-agenda-job": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f7c622d038374d99a024d66"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "automation": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f7c622d038374d99a024d66"
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "workflow": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "parent": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "zackAll"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "ac-agenda-job"
                                ]
                              }
                            },
                            "required": []
                          }
                        }
                      },
                      "required": []
                    }
                  },
                  "json-forms": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "_id": {
                          "type": "string",
                          "examples": [
                            "5f7c6221e607880ade9b11bb"
                          ]
                        },
                        "parent": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "zackAll"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "ac-agenda-job"
                                ]
                              }
                            },
                            "required": []
                          }
                        }
                      },
                      "required": []
                    }
                  },
                  "forms": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "parent": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "zackAll"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "workflow"
                                ]
                              }
                            },
                            "required": []
                          }
                        }
                      },
                      "required": []
                    }
                  },
                  "template": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "parent": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "zackAll"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "workflow"
                                ]
                              }
                            },
                            "required": []
                          }
                        }
                      },
                      "required": []
                    }
                  },
                  "mop-template": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "parent": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "zackAll"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "workflow"
                                ]
                              }
                            },
                            "required": []
                          }
                        }
                      },
                      "required": []
                    }
                  },
                  "mop-analytic-template": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "zackAll"
                          ]
                        },
                        "parent": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "zackAll"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "workflow"
                                ]
                              }
                            },
                            "required": []
                          }
                        }
                      },
                      "required": []
                    }
                  },
                  "golden-config": {
                    "type": "array"
                  },
                  "transformation": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "examples": [
                            "5f7c62b43451a606c2fb0305"
                          ]
                        },
                        "parent": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "zackAll"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "workflow"
                                ]
                              }
                            },
                            "required": []
                          }
                        }
                      },
                      "required": []
                    }
                  }
                },
                "required": []
              }
            },
            "required": []
          },
          {
            "$id": "packageJSON",
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "examples": [
                  "@itentialopensource/artifact-template"
                ]
              },
              "version": {
                "type": "string",
                "examples": [
                  "0.0.5"
                ]
              },
              "description": {
                "type": "string",
                "examples": [
                  "Template for creating new artifacts"
                ]
              },
              "scripts": {
                "type": "object",
                "properties": {
                  "test": {
                    "type": "string",
                    "examples": [
                      "echo \"Error: no test specified\" && exit 1"
                    ]
                  },
                  "deploy": {
                    "type": "string",
                    "examples": [
                      "echo not needed npm publish --access=public --registry=http://registry.npmjs.org"
                    ]
                  },
                  "validateSchema": {
                    "type": "string",
                    "examples": [
                      "node test/manifestTester.js manifest.json manifest-schema.json"
                    ]
                  },
                  "validateSchemaLinks": {
                    "type": "string",
                    "examples": [
                      "node test/manifestLinkTester.js manifest.json"
                    ]
                  },
                  "generateImageLinks": {
                    "type": "string",
                    "examples": [
                      "node utils/generateImageLinks.js"
                    ]
                  }
                },
                "required": []
              },
              "repository": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "examples": [
                      "git"
                    ]
                  },
                  "url": {
                    "type": "string",
                    "examples": [
                      "https://gitlab.com/itentialopensource/pre-built-automations/artifact-template.git"
                    ]
                  }
                },
                "required": []
              },
              "keywords": {
                "type": "array",
                "items": {
                  "type": "string",
                  "examples": [
                    "Itential"
                  ]
                }
              },
              "contributors": {
                "type": "array",
                "items": {
                  "type": "string",
                  "examples": [
                    "Itential Artifacts"
                  ]
                }
              },
              "author": {
                "type": "string",
                "examples": [
                  "Itential Artifacts"
                ]
              },
              "license": {
                "type": "string",
                "examples": [
                  "Apache-2.0"
                ]
              },
              "devDependencies": {
                "type": "object",
                "properties": {
                  "r2": {
                    "type": "string",
                    "examples": [
                      "^2.0.1"
                    ]
                  },
                  "ajv": {
                    "type": "string",
                    "examples": [
                      "6.10.0"
                    ]
                  },
                  "better-ajv-errors": {
                    "type": "string",
                    "examples": [
                      "^0.6.1"
                    ]
                  },
                  "fs-extra": {
                    "type": "string",
                    "examples": [
                      "^7.0.1"
                    ]
                  }
                },
                "required": []
              }
            },
            "required": []
          }
        ],
        "steps": [
          {
            "id": 2,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "AEartifactInfo",
              "ptr": "/readme"
            },
            "to": {
              "location": "outgoing",
              "name": "mata",
              "ptr": "/metadata/readme"
            }
          },
          {
            "id": 3,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "AEartifactInfo",
              "ptr": "/description"
            },
            "to": {
              "location": "outgoing",
              "name": "mata",
              "ptr": "/metadata/description"
            }
          },
          {
            "id": 5,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "AEartifactInfo",
              "ptr": "/repository"
            },
            "to": {
              "location": "outgoing",
              "name": "packageJSON",
              "ptr": "/repository"
            }
          },
          {
            "id": 6,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "AEartifactInfo",
              "ptr": "/version"
            },
            "to": {
              "location": "outgoing",
              "name": "packageJSON",
              "ptr": "/version"
            }
          },
          {
            "id": 9,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "AEartifactInfo",
              "ptr": "/keywords"
            },
            "to": {
              "location": "outgoing",
              "name": "packageJSON",
              "ptr": "/keywords"
            }
          },
          {
            "id": 10,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "AEartifactInfo",
              "ptr": "/license"
            },
            "to": {
              "location": "outgoing",
              "name": "packageJSON",
              "ptr": "/license"
            }
          },
          {
            "id": 11,
            "type": "declaration",
            "library": "Object",
            "method": "new Object",
            "args": [
              "{         \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",         \"deploy\": \"echo not needed npm publish --access=public --registry=http://registry.npmjs.org\",         \"validateSchema\": \"node test/manifestTester.js manifest.json manifest-schema.json\",         \"validateSchemaLinks\": \"node test/manifestLinkTester.js manifest.json\",         \"generateImageLinks\": \"node utils/generateImageLinks.js\"     }"
            ],
            "view": {
              "row": 9,
              "col": 3
            }
          },
          {
            "id": 13,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "AEartifactInfo",
              "ptr": "/author"
            },
            "to": {
              "location": "outgoing",
              "name": "packageJSON",
              "ptr": "/author"
            }
          },
          {
            "id": 14,
            "type": "declaration",
            "library": "Object",
            "method": "new Object",
            "args": [
              "{         \"r2\": \"^2.0.1\",         \"ajv\": \"6.10.0\",         \"better-ajv-errors\": \"^0.6.1\",         \"fs-extra\": \"^7.0.1\"     }"
            ],
            "view": {
              "row": 11,
              "col": 3
            }
          },
          {
            "id": 17,
            "type": "declaration",
            "library": "Array",
            "method": "new Array",
            "args": [
              "Itential Artifacts"
            ],
            "view": {
              "row": 10,
              "col": 3
            },
            "polymorphIndex": 0
          },
          {
            "id": 19,
            "type": "declaration",
            "library": "String",
            "method": "new String",
            "args": [
              "Itential Artifacts"
            ],
            "view": {
              "row": 1,
              "col": 4
            }
          },
          {
            "id": 21,
            "type": "declaration",
            "library": "Array",
            "method": "new Array",
            "args": [],
            "view": {
              "row": 2,
              "col": 4
            },
            "polymorphIndex": 0
          },
          {
            "id": 25,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formOutput",
              "ptr": "/components/workflows"
            },
            "to": {
              "location": "outgoing",
              "name": "mata",
              "ptr": "/components/workflow"
            }
          },
          {
            "id": 26,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formOutput",
              "ptr": "/components/jsonForms"
            },
            "to": {
              "location": "outgoing",
              "name": "mata",
              "ptr": "/components/json-forms"
            }
          },
          {
            "id": 27,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formOutput",
              "ptr": "/components/forms"
            },
            "to": {
              "location": "outgoing",
              "name": "mata",
              "ptr": "/components/forms"
            }
          },
          {
            "id": 28,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formOutput",
              "ptr": "/components/templates"
            },
            "to": {
              "location": "outgoing",
              "name": "mata",
              "ptr": "/components/template"
            }
          },
          {
            "id": 29,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formOutput",
              "ptr": "/components/commandTemplates"
            },
            "to": {
              "location": "outgoing",
              "name": "mata",
              "ptr": "/components/mop-template"
            }
          },
          {
            "id": 30,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formOutput",
              "ptr": "/components/analyticTemplates"
            },
            "to": {
              "location": "outgoing",
              "name": "mata",
              "ptr": "/components/mop-analytic-template"
            }
          },
          {
            "id": 31,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formOutput",
              "ptr": "/components/transformations"
            },
            "to": {
              "location": "outgoing",
              "name": "mata",
              "ptr": "/components/transformation"
            }
          },
          {
            "id": 32,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "discovery",
              "ptr": "/dependencies"
            },
            "to": {
              "location": "outgoing",
              "name": "mata",
              "ptr": "/metadata/dependencies"
            }
          },
          {
            "id": 12,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 11,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "packageJSON",
              "ptr": "/scripts"
            }
          },
          {
            "id": 15,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 14,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "packageJSON",
              "ptr": "/devDependencies"
            }
          },
          {
            "id": 18,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 17,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "packageJSON",
              "ptr": "/contributors"
            }
          },
          {
            "id": 20,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 19,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "mata",
              "ptr": "/metadata/contributor"
            }
          },
          {
            "id": 22,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 21,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "mata",
              "ptr": "/metadata/categories"
            }
          },
          {
            "id": 23,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 21,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "mata",
              "ptr": "/metadata/keywords"
            }
          },
          {
            "id": 75,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formOutput",
              "ptr": "/components/catalogAutomations"
            },
            "to": {
              "location": "outgoing",
              "name": "mata",
              "ptr": "/components/ac-agenda-job"
            }
          },
          {
            "id": 76,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formOutput",
              "ptr": "/components/operationsAutomations"
            },
            "to": {
              "location": "outgoing",
              "name": "mata",
              "ptr": "/components/automation"
            }
          },
          {
            "id": 77,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "formOutput",
              "ptr": "/components/goldenConfigTrees"
            },
            "to": {
              "location": "outgoing",
              "name": "mata",
              "ptr": "/components/golden-config"
            }
          },
          {
            "id": 78,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "AEartifactInfo",
              "ptr": "/name"
            },
            "to": {
              "location": "outgoing",
              "name": "mata",
              "ptr": "/metadata/name"
            },
            "context": "#"
          },
          {
            "id": 79,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "AEartifactInfo",
              "ptr": "/name"
            },
            "to": {
              "location": "outgoing",
              "name": "packageJSON",
              "ptr": "/name"
            },
            "context": "#"
          }
        ],
        "functions": [],
        "comments": [],
        "view": {
          "col": 4,
          "row": 12
        },
        "created": "2025-02-06T18:32:41.085Z",
        "createdBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2025-02-06T18:32:41.085Z",
        "lastUpdatedBy": {
          "_id": "67a4e4222312192336f612c5",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    }
  ],
  "readme": "# Prebuilt Promotion\n\n## Table of Contents\n\n- [Prebuilt Promotion](#prebuilt-promotion)\n  - [Table of Contents](#table-of-contents)\n  - [Overview](#overview)\n  - [Supported IAP Versions](#supported-iap-versions)\n  - [Getting Started](#getting-started)\n    - [Prerequisites](#prerequisites)\n    - [Capabilities](#capabilities)\n    - [How to Install](#how-to-install)\n    - [Testing](#testing)\n  - [Using This Pre-Built](#using-this-pre-built)\n    - [Input Schema](#input-schema)\n    - [Git Credentials (Bitbucket and GitLab)](#git-credentials-bitbucket-and-gitlab)\n    - [Host Override (optional) (Bitbucket and GitLab)](#host-override-optional-bitbucket-and-gitlab)\n    - [IAP Credentials (for Promote stage)](#iap-credentials-for-promote-stage)\n    - [Integrating with GitLab](#integrating-with-gitlab)\n    - [Integrating with Bitbucket](#integrating-with-bitbucket)\n    - [Integrating with Github](#integrating-with-github)\n    - [Pipeline Stages](#pipeline-stages)\n  - [Additional Information](#additional-information)\n\n## Overview\n\n**Prebuilt Promotion** takes a pre-built installed on IAP in Admin Essentials and creates a new project or updates an existing project by way of a merge request or pull request in the specified version control platform (i.e. GitLab, Github, Bitbucket) using the pre-built's IAP components and other files for CI/CD of maintaining those resources.\n\nIn either case of a new project or an MR or PR created, a pipeline will be started that promotes the pre-built into a specified IAP environment by way of the version control's CI/CD environment variables. More details on the different stages of the pipeline can be found under [pipeline stages](#pipeline-stages) below.\n\n## Supported IAP Versions\n\nUsers must satisfy the following pre-requisites:\n\n- Itential Automation Platform\n  - `^2023.1`\n- App-Artifacts\n  - `^6.5.1-2023.1.0`\n- One of the following version control adapters\n  - [GitLab Adapter](https://gitlab.com/itentialopensource/adapters/devops-netops/adapter-gitlab) (`^v0.8.1`)\n  - [Bitbucket Adapter](https://gitlab.com/itentialopensource/adapters/devops-netops/adapter-bitbucket) (`^v0.4.0`)\n  - [GitHub Adapter](https://gitlab.com/itentialopensource/adapters/devops-netops/adapter-github) (`^v0.3.0`)\n  \n## Getting Started\n\n### Prerequisites\n\nRunning `Prebuilt Promotion` successfully requires the following:\n\n- Target pre-built to push to version control service already installed in Admin Essentials on IAP instance where `Prebuilt Promotion` is being run.\n- The pipeline runners from the version control service need to have network access to the target IAP instance for the promotion from the version control service to the target IAP instance to succeed.\n- Defining the version control service CI/CD variables listed below for promotion of the pre-built to the target IAP instance.\n\n### Capabilities\n\n- Performs rediscover on the pre-built if components are deleted or additional components are added\n- Includes the necessary configuration files and scripts to run a CI/CD pipeline process that will:\n  - Validate security of code and quality of manifest.json\n  - Version bump the pre-built bundle when pushing to master\n  - Generate an updated `artifact.json` file reflecting the changes made in the up-to-date artifact bundle\n  - Promote the `artifact.json` to the next IAP environment in the CI/CD process (e.g. staging). This step will overwrite exising components in IAP.\n\n### How to Install\n\nTo install this pre-built:\n\n- Verify that you are running the documented [prerequisites](#prerequisites) in order to install the pre-built.\n\n- Follow the instructions on the Itential Documentation site for [installing a pre-built](https://docs.itential.com/docs/installing-uninstalling-a-prebuilt).\n\n### Testing\n\nWhile Itential tests this pre-built and its capabilities, it is often the case the customer environments offer their own unique circumstances. Therefore, it is our recommendation that you deploy this pre-built into a development/testing environment in which you can test the pre-built.\n\n## Using This Pre-Built\n\nThis pre-built can be run from a standalone Operations Manager automation or a [childJob task](https://docs.itential.com/docs/childjob-3).\n\n**Note**: To run this pre-built from Operations Manager, use the automation `Prebuilt Promotion`. The entry point workflow used to run this pre-built in a childJob task is called `Prebuilt Promotion`.\n\n### Input Schema\n\nIf running this pre-built from Operations Manager, refer to the following list of JSON Form inputs that correspond to image below.\n\n<table><tr><td>\n  <img src=\"https://gitlab.com/itentialopensource/pre-built-automations/prebuilt-promotion/-/raw/release/2023.1/images/sampleFormData.png\" alt=\"sampleForm\" width=\"600px\">\n</td></tr></table>\n\nThe following table details the property keys of the input object.\n| key                                      | type    | required | description |\n|------------------------------------------|---------|----------|---------------------------------------------------------|\n| Check In Prebuilt -> Version Control Service                  | string   | yes      | The version control adapter used to push the pre-built files to the respective version control service such as GitLab or GitHub. <br><br>This value is also used to populate the `respository.type` field of the created Pre-Built. Further, the adapter associated with this value’s `hostname` is used to populate the `repository.hostname` field of the created Pre-Built. For more information about the Pre-Built repository setting, see [here](https://docs.itential.com/docs/configuring-multiple-prebuilt-repositories-1#managing-prebuilt-repository-configurations).|\n| Check In Prebuilt -> Project Name    | string  | yes | The project name to Update/Create. Avoid using spaces in the name for Github Projects.  |\n| Check In Prebuilt -> Make Project Private (Github Only) | boolean | no | If checked or set to true, will make project private in GitHub. If left unchecked, will make project public in GitHub |\n| Check In Prebuilt -> Group Path | string  | yes | The group path in which the project will be created. <br><br> This value is also used to populate the `respository.path` field of the created Pre-Built. For more information about the Pre-Built repository setting, see [here](https://docs.itential.com/docs/configuring-multiple-prebuilt-repositories-1#managing-prebuilt-repository-configurations). |\n| Check In Prebuilt -> Re-Discover Prebuilt | boolean  | no | If checked or set to true, the pre-built will perform re-discovery of IAP components by reference from existing IAP components in pre-built. This is needed if any IAP components have been added to or deleted from the pre-built since committing changes to version control service. For example if adding a new childJob task that has a new workflow, ensure this box is checked for that workflow to be included in pre-built changes to push to version control service. If unchecked, will commit IAP components already associated with pre-built as found in IAP Admin Essentials. |\n| Check In Prebuilt -> Prebuilt | string  | yes  | The pre-built found on the IAP instance's Admin Essentials to push to the respective version control service. |\n| Check In Prebuilt -> Project Path | string  | no  | Bitbucket project to create repo under. Only valid for Bitbucket projects. |\n| Check In Prebuilt -> For Existing Projects -> MR Type | string  | yes  | The type of merge request change being made: patch, minor, or major. |\n| Check In Prebuilt -> For Existing Projects -> Commit Message  | object  | yes  | The commit message to use in version control commit.  |\n| Check In Prebuilt -> For Existing Projects -> Target Branch   | object  | yes  | The branch to target pre-built changes to. |\n\n### Git Credentials (Bitbucket and GitLab)\n\nThe following tables indicate version control CI/CD variables that need to be set within the version control service (i.e. Bitbucket or GitLab) for the pipeline created by Prebuilt Promotion to work as expected.\n\n|Variable            |Example Value         |Description |\n|--------------------|----------------------|------------|\n|`CI_GIT_EMAIL`      |`example@gitlab.com`  |Email for user account running the pipeline. This will be used to set-up version control access within your pipeline environment.|\n|`CI_GIT_USERNAME`     |`ci-bot-user`         |Username of user account running the pipeline. This will be used to set-up version control access within your pipeline environment.|\n|`ID_RSA`              |Contents of private id_rsa key|The value for ID_RSA is the private key from an SSH key created by a Windows, Linux, or macOS machine. The corresponding public key generated should be added to the account you want to use for committing the generated artifact.json from the pipeline to the target project of your version control system. Refer to vendor documentation [here](https://docs.gitlab.com/ee/user/ssh.html#add-an-ssh-key-to-your-gitlab-account) for adding public SSH key to account in GitLab and [here](https://support.atlassian.com/bitbucket-cloud/docs/set-up-personal-ssh-keys-on-windows/#Provide-Bitbucket-Cloud-with-your-public-key) for adding public SSH key to account in Bitbucket Cloud.|\n\n### Host Override (optional) (Bitbucket and GitLab)\n\n|Variable            |Example Value         |Description |\n|--------------------|----------------------|------------|\n|`CI_ORIGIN_HOSTNAME` (optional) |`git@self-hosted-gitlab.com`                      |GitLab hostname. This will be used to setup GitLab access within your pipeline environment. When this variable is not set, the hostname will default to `git@gitlab.com`|\n|`CI_ORIGIN_SSH_PORT` (optional)| `2224` | Port that GitLab is running SSH on. This variable should be set if the SSH client connection is not accessible via the default 22 port.\n\n### IAP Credentials (for Promote stage)\n\nIf you do not want to promote your pre-built bundle to a higher IAP environment, set `PROMOTE = False` and disregard the variables in this section.\n|Variable            |Example Value         |Description |\n|--------------------|----------------------|------------|\n|`PROMOTE` (optional, defaults to `True`)     |`True` or `False`| Determines if \"promote\" stage of pipeline will run.\n|`IAP_HOSTNAME`        |`https://ACME.itential.com`| Used in promotion stage to connect to IAP|\n|`IAP_TOKEN`          |`123_sample_token`| Required if using token authentication and NOT basic authentication|\n|`IAP_USERNAME`        |`iap_user@itential.com`| Required if using basic authentication|\n|`IAP_PW`              |`itential123`| Required if using basic authentication\n|`IAP_SSL_CERT`        | `-----BEGIN CERTIFICATE-----...-----END CERTIFICATE-----`| Required if using two-way SSL verification for HTTPS for target IAP promotion\n|`IAP_PUSH_TO_LOCAL` (optional) |`True` or `False` | Determines the scope of the pre-built. If this variable is not set, the scope value will default to `local`. If this variable is set to `False`, the scope is set to the repository specified in the artifact.json file. <br><br>When `IAP_PUSH_TO_LOCAL` is set to `True` the object below replaces whatever the `repository` field is set to in the Pre-Built. Further, the local `repository` configuration shown below will be used if on import of a Pre-Built the repository configuration provided is not found on the target IAP. For more information about the Pre-Built repository setting, see [here](https://docs.itential.com/docs/configuring-multiple-prebuilt-repositories-1#managing-prebuilt-repository-configurations).<pre>{<br>  \"type\": \"local\", <br>  \"hostname\": \"localhost\", <br>  \"path\": \"/\"<br>}</pre>|\n\n### Integrating with GitLab\n\nFrom the GitLab UI, ensure that the necessary CI/CD variables are defined within the scope of your project. \n\n<table><tr><td>\n  <img src=\"https://gitlab.com/itentialopensource/pre-built-automations/prebuilt-promotion/-/raw/release/2023.1/images/setEnvVarGitlab.png\" alt=\"envVarPageGitlab\" width=\"800px\">\n</td></tr></table>\n\n### Integrating with Bitbucket\n\nEnsure that the necessary Workspace variables are set in your Workspace settings in Bitbucket.\n\n<table><tr><td>\n  <img src=\"https://gitlab.com/itentialopensource/pre-built-automations/prebuilt-promotion/-/raw/release/2023.1/images/setEnvVarBitbucket.png\" alt=\"envVarPageBitbucket\" width=\"800px\">\n</td></tr></table>\n\nA Bitbucket runner has to be registered in order to run builds in pipelines. The runner can be registered either for a repository or a workspace. A repository runner is used to run builds for that specific repository in a workspace. A workspace runner is used to run builds in pipelines for any repository in the workspace.\n\nThe steps to register a runner are in Bitbucket Cloud's official documentation page https://support.atlassian.com/bitbucket-cloud/docs/adding-a-new-runner-in-bitbucket/\n\n<table><tr><td>\n  <img src=\"https://gitlab.com/itentialopensource/pre-built-automations/prebuilt-promotion/-/raw/release/2023.1/images/registerBitbucketRunner.png\" alt=\"registerBitbucketRunner\" width=\"800px\">\n</td></tr></table>\n\n### Integrating with Github\n\nUnder your Github organization settings, ensure that the necessary environmental variables are defined as Action secrets.\n\n<table><tr><td>\n  <img src=\"https://gitlab.com/itentialopensource/pre-built-automations/prebuilt-promotion/-/raw/release/2023.1/images/setEnvVarGithub.png\" alt=\"envVarPageGithub\" width=\"800px\">\n</td></tr></table>\n\n### Pipeline Stages\n\n|Stage    |Description     |\n|---------|----------------|\n|quality  | Lints code, test code quality, and ensures that there are no security vulnerabilities|\n|test     | Validates path links and schema of `manifest.json`. |\n|bump     | Bumps pre-built version (only done on `master` branch). |\n|generate | Generates updated `artifact.json` file. |\n|promote  | Promotes updated `artifact.json` to specified IAP environment using the credentials and hostname specified in the environmental variables. |\n\n## Additional Information\n\nPlease use your Itential Customer Success account if you need support when using this Pre-Built.\n"
}